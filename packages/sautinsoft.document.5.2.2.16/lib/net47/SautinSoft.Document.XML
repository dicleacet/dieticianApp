<?xml version="1.0"?>
<doc>
  <assembly>
    <name>SautinSoft.Document</name>
  </assembly>
  <members>
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.Color.ChannelDefinitionMapper.getCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.Color.ChannelDefinitionMapper.getInternCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.Color.ChannelDefinitionMapper.getFixedPoint(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.Color.ColorSpaceMapper.getFixedPoint(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.Color.ColorSpaceMapper.getCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.Color.ColorSpaceMapper.getInternCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.Color.EnumeratedColorSpaceMapper.getCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.Color.EnumeratedColorSpaceMapper.getInternCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.Color.EsRgbColorSpaceMapper.getInternCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.Color.PalettizedColorSpaceMapper.getCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.Color.PalettizedColorSpaceMapper.ToString" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.Color.PalettizedColorSpaceMapper.getInternCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.Color.PalettizedColorSpaceMapper.getNomRangeBits(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.Color.PalettizedColorSpaceMapper.getCompImgHeight(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.Color.Resampler.getInternCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.Color.Resampler.getCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.Color.SYccColorSpaceMapper.getCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.Color.SYccColorSpaceMapper.getInternCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.Icc.ICCProfiler.getCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.Icc.ICCProfiler.getInternCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.Icc.Tags.ICCTag" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.codestream.ProgressionType" -->
    <!-- Badly formed XML comment ignored for member "F:CSJ2K.j2k.codestream.reader.PktDecoder.ttIncl" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.codestream.writer.BitOutputBuffer" -->
    <!-- Badly formed XML comment ignored for member "P:CSJ2K.j2k.codestream.writer.BitOutputBuffer.Length" -->
    <!-- Badly formed XML comment ignored for member "P:CSJ2K.j2k.codestream.writer.BitOutputBuffer.Buffer" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.codestream.writer.BitOutputBuffer.writeBit(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.codestream.writer.BitOutputBuffer.writeBits(System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.codestream.writer.CodestreamWriter.writePacketHead(System.Byte[],System.Int32,System.Boolean,System.Boolean,System.Boolean)" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.codestream.writer.FileCodestreamWriter" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.codestream.writer.FileCodestreamWriter.writePacketHead(System.Byte[],System.Int32,System.Boolean,System.Boolean,System.Boolean)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.codestream.writer.FileCodestreamWriter.writePacketBody(System.Byte[],System.Int32,System.Boolean,System.Boolean,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "F:CSJ2K.j2k.codestream.writer.PktEncoder.prevtIdxs" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.entropy.CBlkSizeSpec" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.entropy.CBlkSizeSpec.getCBlkWidth(System.Byte,System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.entropy.decoder.EntropyDecoder" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.entropy.decoder.EntropyDecoder.getSynSubbandTree(System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.entropy.decoder.MQDecoder.fastDecodeSymbols(System.Int32[],System.Int32,System.UInt32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.entropy.decoder.MQDecoder.decodeSymbols(System.Int32[],System.Int32[],System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.entropy.decoder.MQDecoder.decodeSymbol(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.entropy.decoder.MQDecoder.init" -->
    <!-- Badly formed XML comment ignored for member "F:CSJ2K.j2k.entropy.decoder.StdEntropyDecoder.state" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.entropy.decoder.StdEntropyDecoder.getCodeBlock(System.Int32,System.Int32,System.Int32,CSJ2K.j2k.wavelet.synthesis.SubbandSyn,CSJ2K.j2k.image.DataBlk)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.entropy.decoder.StdEntropyDecoder.magRefPass(CSJ2K.j2k.image.DataBlk,CSJ2K.j2k.entropy.decoder.MQDecoder,System.Int32,System.Int32[],System.Boolean)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.entropy.decoder.StdEntropyDecoder.rawMagRefPass(CSJ2K.j2k.image.DataBlk,CSJ2K.j2k.entropy.decoder.ByteToBitInput,System.Int32,System.Int32[],System.Boolean)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.entropy.decoder.StdEntropyDecoder.cleanuppass(CSJ2K.j2k.image.DataBlk,CSJ2K.j2k.entropy.decoder.MQDecoder,System.Int32,System.Int32[],System.Int32[],System.Boolean)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.entropy.encoder.EBCOTRateAllocator.getAllCodeBlocks" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.entropy.encoder.EntropyCoder.isReversible(System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.entropy.encoder.MQCoder" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.entropy.encoder.MQCoder.fastCodeSymbols(System.Int32,System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.entropy.PrecinctSizeSpec" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.fileformat.reader.FileFormatReader.readJP2HeaderBox(System.Int64,System.Int32,System.Int64)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.fileformat.reader.FileFormatReader.readContiguousCodeStreamBox(System.Int64,System.Int32,System.Int64)" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.image.BlkImgDataSrc" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.BlkImgDataSrc.getInternCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.BlkImgDataSrc.getCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.ImgData.getNomRangeBits(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.ImgDataAdapter.getNomRangeBits(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.ImgDataConverter.getCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.ImgDataConverter.getInternCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.ImgDataJoiner.#ctor(CSJ2K.j2k.image.BlkImgDataSrc[],System.Int32[])" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.ImgDataJoiner.getNomRangeBits(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.ImgDataJoiner.getInternCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.ImgDataJoiner.getCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.image.input.ImgReaderPGM" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.input.ImgReaderPGM.getNomRangeBits(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.input.ImgReaderPGM.getInternCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.input.ImgReaderPGM.getCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.image.input.ImgReaderPGX" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.input.ImgReaderPGX.getNomRangeBits(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.input.ImgReaderPGX.getInternCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.input.ImgReaderPGX.getCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.image.input.ImgReaderPPM" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.input.ImgReaderPPM.getNomRangeBits(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.input.ImgReaderPPM.getInternCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.input.ImgReaderPPM.getCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.invcomptransf.InvCompTransf.getFixedPoint(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.invcomptransf.InvCompTransf.getNomRangeBits(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.invcomptransf.InvCompTransf.getCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.invcomptransf.InvCompTransf.setTile(System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.invcomptransf.InvCompTransf.nextTile" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.image.output.ImgWriterPGM" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.output.ImgWriterPGM.#ctor(System.String,CSJ2K.j2k.image.BlkImgDataSrc,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.image.output.ImgWriterPGX" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.output.ImgWriterPGX.#ctor(System.String,CSJ2K.j2k.image.BlkImgDataSrc,System.Int32,System.Boolean)" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.image.output.ImgWriterPPM" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.output.ImgWriterPPM.write" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.output.ImgWriterPPM.writeHeaderInfo" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.Tiler.#ctor(CSJ2K.j2k.image.BlkImgDataSrc,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.io.BinaryDataOutput" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.io.BinaryDataOutput.writeByte(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.io.BinaryDataOutput.writeShort(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.io.BufferedRandomAccessFile" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.io.BufferedRandomAccessFile.writeByte(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.io.EndianType_Fields" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.JJ2KExceptionHandler" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.JJ2KExceptionHandler.handleException(System.Exception)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.ModuleSpec.parseIdx(System.String,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.NotImplementedError" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.NotImplementedError.#ctor" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.quantization.dequantizer.CBlkQuantDataSrcDec" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.quantization.dequantizer.Dequantizer.getNomRangeBits(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.quantization.dequantizer.Dequantizer.getSynSubbandTree(System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.quantization.dequantizer.Dequantizer.setTile(System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.quantization.dequantizer.Dequantizer.nextTile" -->
    <!-- Badly formed XML comment ignored for member "F:CSJ2K.j2k.quantization.dequantizer.StdDequantizerParams.exp" -->
    <!-- Badly formed XML comment ignored for member "F:CSJ2K.j2k.quantization.dequantizer.StdDequantizerParams.nStep" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.quantization.QuantizationType_Fields" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.quantization.quantizer.Quantizer.getAnSubbandTree(System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.quantization.QuantTypeSpec" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.roi.encoder.ArbROIMaskGenerator" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.roi.encoder.ArbROIMaskGenerator.getROIMask(CSJ2K.j2k.image.DataBlkInt,CSJ2K.j2k.wavelet.Subband,System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.roi.encoder.ArbROIMaskGenerator.makeMask(CSJ2K.j2k.wavelet.Subband,System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.roi.encoder.RectROIMaskGenerator" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.roi.encoder.RectROIMaskGenerator.getROIMask(CSJ2K.j2k.image.DataBlkInt,CSJ2K.j2k.wavelet.Subband,System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.roi.encoder.ROIMaskGenerator" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.roi.encoder.ROIScaler" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.roi.ROIDeScaler.getSynSubbandTree(System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.StringSpec.#ctor(System.Int32,System.Int32,System.Byte,System.String,System.String[],CSJ2K.j2k.util.ParameterList)" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.util.FacilityManager" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.util.ISRandomAccessIO" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.util.MsgLogger_Fields" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.util.MsgPrinter.nextLineEnd(System.String,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.util.MsgPrinter.nextWord(System.String,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.util.ParameterList.parseArgs(System.String[])" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.util.ThreadPool" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.util.ThreadPool.ThreadPoolThread.Run" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.util.ThreadPool.#ctor(System.Int32,System.Int32,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.util.ThreadPool.runTarget(IThreadRunnable,System.Object)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.util.ThreadPool.runTarget(IThreadRunnable,System.Object,System.Boolean)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.util.ThreadPool.clearTargetErrors" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.util.ThreadPool.putInIdleList(CSJ2K.j2k.util.ThreadPool.ThreadPoolThread)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.util.ThreadPool.getIdle(System.Boolean)" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.wavelet.analysis.AnWTFilterFloat" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.wavelet.analysis.AnWTFilterFloatLift9x7" -->
    <!-- Badly formed XML comment ignored for member "P:CSJ2K.j2k.wavelet.analysis.AnWTFilterFloatLift9x7.SynLowNegSupport" -->
    <!-- Badly formed XML comment ignored for member "P:CSJ2K.j2k.wavelet.analysis.AnWTFilterFloatLift9x7.SynLowPosSupport" -->
    <!-- Badly formed XML comment ignored for member "P:CSJ2K.j2k.wavelet.analysis.AnWTFilterFloatLift9x7.SynHighNegSupport" -->
    <!-- Badly formed XML comment ignored for member "P:CSJ2K.j2k.wavelet.analysis.AnWTFilterFloatLift9x7.SynHighPosSupport" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.wavelet.analysis.AnWTFilterFloatLift9x7.analyze_lpf(System.Single[],System.Int32,System.Int32,System.Int32,System.Single[],System.Int32,System.Int32,System.Single[],System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.wavelet.analysis.AnWTFilterFloatLift9x7.analyze_hpf(System.Single[],System.Int32,System.Int32,System.Int32,System.Single[],System.Int32,System.Int32,System.Single[],System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.wavelet.analysis.AnWTFilterFloatLift9x7.getLPSynthesisFilter" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.wavelet.analysis.AnWTFilterFloatLift9x7.getHPSynthesisFilter" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.wavelet.analysis.AnWTFilterFloatLift9x7.isSameAsFullWT(System.Int32,System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.wavelet.analysis.AnWTFilterFloatLift9x7.Equals(System.Object)" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.wavelet.analysis.AnWTFilterInt" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.wavelet.analysis.AnWTFilterIntLift5x3.analyze_hpf(System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.wavelet.analysis.AnWTFilterSpec.getHFilters(System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.wavelet.analysis.AnWTFilterSpec.getVFilters(System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.wavelet.synthesis.CBlkWTDataSrcDec.getNomRangeBits(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.wavelet.synthesis.InvWTFull.getNomRangeBits(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.wavelet.synthesis.MultiResImgDataAdapter.getCompImgHeight(System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.wavelet.synthesis.SynWTFilter" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.wavelet.synthesis.SynWTFilterFloat" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.wavelet.synthesis.SynWTFilterFloatLift9x7" -->
    <!-- Badly formed XML comment ignored for member "P:CSJ2K.j2k.wavelet.synthesis.SynWTFilterFloatLift9x7.SynLowNegSupport" -->
    <!-- Badly formed XML comment ignored for member "P:CSJ2K.j2k.wavelet.synthesis.SynWTFilterFloatLift9x7.SynLowPosSupport" -->
    <!-- Badly formed XML comment ignored for member "P:CSJ2K.j2k.wavelet.synthesis.SynWTFilterFloatLift9x7.SynHighNegSupport" -->
    <!-- Badly formed XML comment ignored for member "P:CSJ2K.j2k.wavelet.synthesis.SynWTFilterFloatLift9x7.SynHighPosSupport" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.wavelet.synthesis.SynWTFilterFloatLift9x7.synthetize_lpf(System.Single[],System.Int32,System.Int32,System.Int32,System.Single[],System.Int32,System.Int32,System.Int32,System.Single[],System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.wavelet.synthesis.SynWTFilterFloatLift9x7.synthetize_hpf(System.Single[],System.Int32,System.Int32,System.Int32,System.Single[],System.Int32,System.Int32,System.Int32,System.Single[],System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.wavelet.synthesis.SynWTFilterFloatLift9x7.isSameAsFullWT(System.Int32,System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.wavelet.synthesis.SynWTFilterInt" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.wavelet.WTDecompSpec" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.wavelet.WTDecompSpec.#ctor(System.Int32,System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.wavelet.WTDecompSpec.getDecSpecType(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.wavelet.WTDecompSpec.getDecompType(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.wavelet.WTDecompSpec.getLevels(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.wavelet.WTFilterSpec" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.wavelet.WTFilterSpec.#ctor(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.wavelet.WTFilterSpec.getKerSpecType(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "T:jj2000.j2k.util.NativeServices" -->
    <!-- Badly formed XML comment ignored for member "P:jj2000.j2k.util.NativeServices.ThreadConcurrency" -->
    <!-- Badly formed XML comment ignored for member "M:SupportClass.Tokenizer.MoveNext" -->
    <member name="T:SautinSoft.Document.Block">
      <summary>
            Represents a base class for all block elements.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\08. Manipulation\08. Element - Cloning\Sample.cs" title="How to clone an element in DOCX document using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\08. Manipulation\08. Element - Cloning\Sample.vb" title="How to clone an element in DOCX document using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Block.Clone(System.Boolean)">
      <summary>
            Clones this <see cref="T:SautinSoft.Document.Block" /> instance.
            </summary>
      <remarks>
        <para>This method serves as a copy constructor for elements. The cloned element
            has no parent, but belongs to the same document as the original element. </para>
        <para>If you want to insert this element into another document, then you should
            first import it into another document with 
            <see cref="M:SautinSoft.Document.DocumentCore.Import``1(``0,System.Boolean,System.Boolean)">Import&lt;T&gt;(T,System.Boolean,System.Boolean)</see>
            method and then insert the imported element.
            </para>
      </remarks>
      <param name="cloneDescendants">True to clone all descendants.</param>
      <returns>Cloned <see cref="T:SautinSoft.Document.Block" />.</returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\08. Manipulation\08. Element - Cloning\Sample.cs" title="How to clone an element in DOCX document using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\08. Manipulation\08. Element - Cloning\Sample.vb" title="How to clone an element in DOCX document using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Block.ParentCollection">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.BlockCollection" /> that contains this
            <see cref="T:SautinSoft.Document.Block" /> instance.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.BlockCollection">
      <summary>
            Represents a collection of a <see cref="T:SautinSoft.Document.Block" /> derived elements.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\08. Manipulation\17. ElementCollection - Iteration\Sample.cs" title="Iterates through a document and count the amount of Paragraphs and Runs using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\08. Manipulation\17. ElementCollection - Iteration\Sample.vb" title="Iterates through a document and count the amount of Paragraphs and Runs using VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.CharacterFormat">
      <summary>
            Represents a set of formatting properties which shall be applied to a document text.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\07. Character Formatting\Sample.cs" title="How set character formatting in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\07. Character Formatting\Sample.vb" title="How set character formatting in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.CharacterFormat.Style">
      <summary>
            Gets or sets the character style.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\11. Styles\Sample.cs" title="This sample shows how to work with styles in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\11. Styles\Sample.vb" title="This sample shows how to work with styles in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.CharacterFormat.AllCaps">
      <summary>
            Gets or sets a value to display all characters as capital letters.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\07. Character Formatting\Sample.cs" title="How set character formatting in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\07. Character Formatting\Sample.vb" title="How set character formatting in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.CharacterFormat.BackgroundColor">
      <summary>
            Gets or sets the text background color. <see cref="P:SautinSoft.Document.CharacterFormat.HighlightColor" /> 
            overrides <see cref="P:SautinSoft.Document.CharacterFormat.BackgroundColor" />.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\07. Character Formatting\Sample.cs" title="How set character formatting in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\07. Character Formatting\Sample.vb" title="How set character formatting in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.CharacterFormat.Bold">
      <summary>
            Gets or sets a value to display all characters as bold.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\07. Character Formatting\Sample.cs" title="How set character formatting in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\07. Character Formatting\Sample.vb" title="How set character formatting in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.CharacterFormat.Border">
      <summary>
            Gets or sets the border for the characters.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CharacterFormat.DoubleStrikethrough">
      <summary>
            Gets or sets a value to display all characters as double strikethrough.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CharacterFormat.FontColor">
      <summary>
            Gets or sets the text color.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\07. Character Formatting\Sample.cs" title="How set character formatting in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\07. Character Formatting\Sample.vb" title="How set character formatting in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.CharacterFormat.FontASCII">
      <summary>
            Gets or sets a font name which shall be used to format all characters in the Unicode range 
            (from 0 (zero) through 127).
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CharacterFormat.FontComplexScript">
      <summary>
            Gets or sets a font name which shall be used to format all characters in a complex script Unicode range.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CharacterFormat.FontEastAsian">
      <summary>
            Gets or sets a font name which shall be used to format all characters in an East Asian Unicode range.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CharacterFormat.FontHighANSI">
      <summary>
            Gets or sets a font name which shall be used to format all characters in a high ANSI Unicode range.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CharacterFormat.FontName">
      <summary>
            When getting, returns <see cref="P:SautinSoft.Document.CharacterFormat.FontASCII" />.<br />
            When setting, sets <see cref="P:SautinSoft.Document.CharacterFormat.FontASCII" />,
            <see cref="P:SautinSoft.Document.CharacterFormat.FontComplexScript" />,
            <see cref="P:SautinSoft.Document.CharacterFormat.FontEastAsian" /> and
            <see cref="P:SautinSoft.Document.CharacterFormat.FontHighANSI" /> to the specified value.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\07. Character Formatting\Sample.cs" title="How set character formatting in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\07. Character Formatting\Sample.vb" title="How set character formatting in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.CharacterFormat.Hidden">
      <summary>
            Gets or sets a value to format all characters as hidden.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CharacterFormat.HighlightColor">
      <summary>
            Gets or sets the text highlight (marker) color. 
            <see cref="P:SautinSoft.Document.CharacterFormat.HighlightColor" /> overrides 
            <see cref="P:SautinSoft.Document.CharacterFormat.BackgroundColor" /></summary>
    </member>
    <member name="P:SautinSoft.Document.CharacterFormat.Italic">
      <summary>
            Gets or sets a value to display all characters as italic.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\07. Character Formatting\Sample.cs" title="How set character formatting in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\07. Character Formatting\Sample.vb" title="How set character formatting in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.CharacterFormat.Kerning">
      <summary>
            Gets or sets the font size at which kerning starts.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CharacterFormat.Language">
      <summary>
            Gets or sets the language information.
            </summary>
      <value>
            The <see cref="T:System.Globalization.CultureInfo" /> which will be used for defining culture specific formatting.
            </value>
      <remarks>
            Default value is <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.
            </remarks>
    </member>
    <member name="P:SautinSoft.Document.CharacterFormat.Outline">
      <summary>
            Gets or sets a value to display an outline.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CharacterFormat.Position">
      <summary>
            Gets or sets the position of text (in points) relative to the base line. 
            A positive number raises the text, and a negative number lowers it.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CharacterFormat.RightToLeft">
      <summary>
            When true, the contents of this run shall have right-to-left reading order.
            Supported only in DOCX format.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CharacterFormat.Scaling">
      <summary>
            Gets or sets character width scaling in percent.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CharacterFormat.Size">
      <summary>
            Gets or sets the font size in points.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\07. Character Formatting\Sample.cs" title="How set character formatting in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\07. Character Formatting\Sample.vb" title="How set character formatting in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.CharacterFormat.SmallCaps">
      <summary>
            Gets or sets a value to display all characters as small capital letters.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CharacterFormat.Spacing">
      <summary>
            Gets or sets the spacing (in points) between characters.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CharacterFormat.Strikethrough">
      <summary>
            Gets or sets a value to display all characters as strikethrough.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CharacterFormat.Subscript">
      <summary>
            Gets or sets a value to display all characters as subscript.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CharacterFormat.Superscript">
      <summary>
            Gets or sets a value to display all characters as superscript.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CharacterFormat.UnderlineColor">
      <summary>
            Gets or sets the underline color.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\07. Character Formatting\Sample.cs" title="How set character formatting in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\07. Character Formatting\Sample.vb" title="How set character formatting in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.CharacterFormat.UnderlineStyle">
      <summary>
            Gets or sets the type of underline.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\07. Character Formatting\Sample.cs" title="How set character formatting in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\07. Character Formatting\Sample.vb" title="How set character formatting in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.CharacterFormat.Clone">
      <summary>
            Clones this <see cref="T:SautinSoft.Document.CharacterFormat" /> instance.
            </summary>
      <returns>
            Cloned <see cref="T:SautinSoft.Document.CharacterFormat" />.
            </returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\02. Sections and Page Layout\04. Page Numbering\02. Edit page numbering\Sample.cs" title="How to edit Page Numbering in an existing DOCX document in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\02. Sections and Page Layout\04. Page Numbering\02. Edit page numbering\Sample.vb" title="How to edit Page Numbering in an existing DOCX document in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.CharacterFormat.ClearFormatting">
      <summary>
            Clears the formatting.
            </summary>
      <remarks>
            This method will clear all directly set formatting values.
            </remarks>
    </member>
    <member name="M:SautinSoft.Document.CharacterFormat.Equals(System.Object)">
      <summary>
            Determines whether the specified object is equal to this
            <see cref="T:SautinSoft.Document.CharacterFormat" /> instance.
            </summary>
      <param name="obj">The object to compare with this 
            <see cref="T:SautinSoft.Document.CharacterFormat" /> instance.</param>
      <returns>
            true if the specified object is a <see cref="T:SautinSoft.Document.CharacterFormat" /> and is equal 
            to this <see cref="T:SautinSoft.Document.CharacterFormat" /> instance; otherwise, false.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.CharacterFormat.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.CharacterFormat" /> class.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\07. Character Formatting\Sample.cs" title="This sample shows how to set character format in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\07. Character Formatting\Sample.vb" title="This sample shows how to set character format in VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.CharacterStyle">
      <summary>
            Represents a character style.
            </summary>
      <remarks>
            Styles provide a way to format your document in a consistent way so when you 
            change your formatting options on a style, all document elements referencing that
            style will be changed.
            </remarks>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\11. Styles\Sample.cs" title="This sample shows how to work with styles in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\11. Styles\Sample.vb" title="This sample shows how to work with styles in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.CharacterStyle.BaseStyle">
      <summary>
            Gets or sets the style on which this style is based.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CharacterStyle.CharacterFormat">
      <summary>
            Gets or sets the character format.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\11. Styles\Sample.cs" title="This sample shows how to work with styles in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\11. Styles\Sample.vb" title="This sample shows how to work with styles in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.CharacterStyle.StyleType">
      <summary>
            Gets the type of the style.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.CharacterStyle.Equals(System.Object)">
      <summary>
            Determines whether the specified object is equal to this
            <see cref="T:SautinSoft.Document.CharacterStyle" /> instance.
            </summary>
      <param name="obj">The object to compare with this 
            <see cref="T:SautinSoft.Document.CharacterStyle" /> instance.</param>
      <returns>
            true if the specified object is a <see cref="T:SautinSoft.Document.CharacterStyle" /> and is equal 
            to this <see cref="T:SautinSoft.Document.CharacterStyle" /> instance; otherwise, false.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.CharacterStyle.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.CharacterStyle" /> class.
            </summary>
      <param name="name">The character style name.</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\11. Styles\Sample.cs" title="This sample shows how to work with styles in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\11. Styles\Sample.vb" title="This sample shows how to work with styles in VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.Bookmark">
      <summary>
            Represents a single bookmark.
            </summary>
      <remarks>
            Bookmark is a "facade" object that encapsulates two elements
            <see cref="T:SautinSoft.Document.BookmarkStart" /> and <see cref="T:SautinSoft.Document.BookmarkEnd" />
            in a document and allows to work with a bookmark as a single object.
            </remarks>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\05. Text\12. Bookmarks\Sample.cs" title="How add a text bounded by BookmarkStart and BookmarkEnd using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\05. Text\12. Bookmarks\Sample.vb" title="How add a text bounded by BookmarkStart and BookmarkEnd using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Bookmark.Name">
      <summary>
            Gets or sets the name of the bookmark.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Bookmark.Start">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.BookmarkStart" /> element.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\05. Text\12. Bookmarks\Sample.cs" title="How add a text bounded by BookmarkStart and BookmarkEnd using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\05. Text\12. Bookmarks\Sample.vb" title="How add a text bounded by BookmarkStart and BookmarkEnd using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Bookmark.End">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.BookmarkEnd" /> element.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\05. Text\12. Bookmarks\Sample.cs" title="How add a text bounded by BookmarkStart and BookmarkEnd using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\05. Text\12. Bookmarks\Sample.vb" title="How add a text bounded by BookmarkStart and BookmarkEnd using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Bookmark.GetContent(System.Boolean)">
      <summary>
            Gets the content of the current <see cref="T:SautinSoft.Document.Bookmark" />.
            </summary>
      <param name="includeBookmarkStartEnd">
            if set to true, returned <see cref="T:SautinSoft.Document.ContentRange" /> will also
            contain <see cref="P:SautinSoft.Document.Bookmark.Start" /> and 
            <see cref="P:SautinSoft.Document.Bookmark.End" /> elements, otherwise it won't.
            </param>
      <returns>
            The content of the current <see cref="T:SautinSoft.Document.Bookmark" />.
            </returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\05. Text\12. Bookmarks\Sample.cs" title="How add a text bounded by BookmarkStart and BookmarkEnd using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\05. Text\12. Bookmarks\Sample.vb" title="How add a text bounded by BookmarkStart and BookmarkEnd using VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.BookmarkStart">
      <summary>
            Represents the start of a bookmark.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.BookmarkStart.Name">
      <summary>
            Gets the name of this bookmark.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.BookmarkStart.ElementType">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.ElementType" /> of this element instance.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.BookmarkStart.Clone">
      <summary>
            Clones this <see cref="T:SautinSoft.Document.BookmarkStart" /> instance.
            </summary>
      <returns>
            Cloned <see cref="T:SautinSoft.Document.BookmarkStart" />.
            </returns>
      <remarks>
        <para>This method serves as a copy constructor for elements. The cloned element
            has no parent, but belongs to the same document as the original element. </para>
        <para>If you want to insert this element into another document, then you should
            first import it into another document with 
            <see cref="M:SautinSoft.Document.DocumentCore.Import``1(``0,System.Boolean,System.Boolean)">Import&lt;T&gt;(T,System.Boolean,System.Boolean)</see>
            method and then insert the imported element.
            </para>
      </remarks>
    </member>
    <member name="M:SautinSoft.Document.BookmarkStart.#ctor(SautinSoft.Document.DocumentCore,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.BookmarkStart" /> class.
            </summary>
      <param name="document">The owner document.</param>
      <param name="name">The bookmark name.</param>
    </member>
    <member name="T:SautinSoft.Document.BookmarkEnd">
      <summary>
            Represents the end of a bookmark.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.BookmarkEnd.Name">
      <summary>
            Gets the name of this bookmark.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.BookmarkEnd.ElementType">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.ElementType" /> of this element instance.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.BookmarkEnd.Clone">
      <summary>
            Clones this <see cref="T:SautinSoft.Document.BookmarkEnd" /> instance.
            </summary>
      <returns>
            Cloned <see cref="T:SautinSoft.Document.BookmarkEnd" />.
            </returns>
      <remarks>
        <para>This method serves as a copy constructor for elements. The cloned element
            has no parent, but belongs to the same document as the original element. </para>
        <para>If you want to insert this element into another document, then you should
            first import it into another document with 
            <see cref="M:SautinSoft.Document.DocumentCore.Import``1(``0,System.Boolean,System.Boolean)">Import&lt;T&gt;(T,System.Boolean,System.Boolean)</see>
            method and then insert the imported element.
            </para>
      </remarks>
    </member>
    <member name="M:SautinSoft.Document.BookmarkEnd.#ctor(SautinSoft.Document.DocumentCore,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.BookmarkEnd" /> class.
            </summary>
      <param name="document">The owner document.</param>
      <param name="name">The bookmark name.</param>
    </member>
    <member name="T:SautinSoft.Document.BookmarkCollection">
      <summary>
            Represents a collection of <see cref="T:SautinSoft.Document.Bookmark" />s.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\05. Text\12. Bookmarks\Sample.cs" title="How add a text bounded by BookmarkStart and BookmarkEnd using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\05. Text\12. Bookmarks\Sample.vb" title="How add a text bounded by BookmarkStart and BookmarkEnd using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.BookmarkCollection.Count">
      <summary>
            Gets the number of <see cref="T:SautinSoft.Document.Bookmark" />s contained 
            in the <see cref="T:SautinSoft.Document.BookmarkCollection" />.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.BookmarkCollection.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.Bookmark" /> at the specified index.
            </summary>
      <param name="index">The zero-based index of the bookmark to get.</param>
      <returns>
            The bookmark at the specified index.
            </returns>
    </member>
    <member name="P:SautinSoft.Document.BookmarkCollection.Item(System.String)">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.Bookmark" /> with the specified name.
            </summary>
      <param name="name">The name of the bookmark to get.</param>
      <returns>
            The bookmark with the specified name,
            or null if bookmark with specified name doesn't exist in the document.
            </returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\05. Text\12. Bookmarks\Sample.cs" title="How add a text bounded by BookmarkStart and BookmarkEnd using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\05. Text\12. Bookmarks\Sample.vb" title="How add a text bounded by BookmarkStart and BookmarkEnd using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.BookmarkCollection.Contains(SautinSoft.Document.Bookmark)">
      <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.BookmarkCollection.CopyTo(SautinSoft.Document.Bookmark[],System.Int32)">
      <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an
            <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">array is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from arrayIndex to the end of the destination array.</exception>
    </member>
    <member name="M:SautinSoft.Document.BookmarkCollection.GetEnumerator">
      <summary>
            Gets an enumerator that iterates through the collection.
            </summary>
      <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:SautinSoft.Document.BookmarkCollection.IndexOf(SautinSoft.Document.Bookmark)">
      <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
      <returns>The index of item if found in the list; otherwise, -1.</returns>
    </member>
    <member name="M:SautinSoft.Document.BookmarkCollection.Remove(SautinSoft.Document.Bookmark)">
      <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />;
            otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="M:SautinSoft.Document.BookmarkCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.
            </summary>
      <param name="index">The zero-based index of the item to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
    </member>
    <member name="M:SautinSoft.Document.BookmarkCollection.Clear">
      <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="T:SautinSoft.Document.BuiltInDocumentPropertiesDictionary">
      <summary>
            Represents a dictionary that contains <see cref="T:SautinSoft.Document.BuiltInDocumentProperty" /> 
            key and <see cref="T:System.String" /> value pairs.
            </summary>
      <remarks>
        <see cref="T:System.String" /> values cannot be null or <see cref="F:System.String.Empty" />.
            </remarks>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\07. Document Properties\01. Built-in Document Properties\Sample.cs" title="Read built-in document properties (from .docx) and enumerate them in new PDF document as small report using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\07. Document Properties\01. Built-in Document Properties\Sample.vb" title="Read built-in document properties (from .docx) and enumerate them in new PDF document as small report using VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.AbsolutePositionTabCharacter">
      <summary>
            Represents the absolute position tab character.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.AbsolutePositionTabCharacter.Alignment">
      <summary>
            Gets or sets the location of the positional tab stop on the line, as well as the alignment
            which shall be applied to text subsequent to the current positional tab stop
            </summary>
    </member>
    <member name="P:SautinSoft.Document.AbsolutePositionTabCharacter.RelativeTo">
      <summary>
            Gets or sets the extents which shall be used to calculate the absolute positioning of this
            positional tab character.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.AbsolutePositionTabCharacter.Leader">
      <summary>
            Gets or sets the character which shall be used to fill in the space 
            created by a positional tab.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.AbsolutePositionTabCharacter.Clone">
      <summary>
            Clones this element instance.
            </summary>
      <remarks>
        <para>This method serves as a copy constructor for elements. The cloned element
            has no parent, but belongs to the same document as the original element. </para>
        <para>If you want to insert this element into another document, then you should
            first import it into another document with 
            <see cref="M:SautinSoft.Document.DocumentCore.Import``1(``0,System.Boolean,System.Boolean)">Import&lt;T&gt;(T,System.Boolean,System.Boolean)</see>
            method and then insert the imported element.
            </para>
      </remarks>
      <returns>
            The cloned element.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.AbsolutePositionTabCharacter.#ctor(SautinSoft.Document.DocumentCore,SautinSoft.Document.AbsolutePositionTabAlignment,SautinSoft.Document.AbsolutePositionTabAnchor,SautinSoft.Document.TabCharacterLeader)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.AbsolutePositionTabCharacter" /> class.
            </summary>
      <param name="document">The owner document.</param>
      <param name="alignment">The alignment.</param>
      <param name="leader">The leader character.</param>
      <param name="relativeTo">The relative position.</param>
    </member>
    <member name="T:SautinSoft.Document.CustomMarkups.BlockContentControl">
      <summary>
            Represents block-level Content control (Structured Document Tag).
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CustomMarkups.BlockContentControl.ElementType">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.ElementType" /> of this element instance.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CustomMarkups.BlockContentControl.Blocks">
      <summary>
            Gets the blocks of this Content Control.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CustomMarkups.BlockContentControl.ContentControlType">
      <summary>
            The type of this Content Control.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CustomMarkups.BlockContentControl.Properties">
      <summary>
            Gets all the possible properties for this Content Control item.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.CustomMarkups.BlockContentControl.Clone(System.Boolean)">
      <summary>
            Clones this element instance.
            </summary>
      <remarks>
        <para>This method serves as a copy constructor for elements. The cloned element
            has no parent, but belongs to the same document as the original element. </para>
        <para>If you want to insert this element into another document, then you should
            first import it into another document with 
            <see cref="M:SautinSoft.Document.DocumentCore.Import``1(``0,System.Boolean,System.Boolean)">Import&lt;T&gt;(T,System.Boolean,System.Boolean)</see>
            method and then insert the imported element.
            </para>
      </remarks>
      <param name="cloneDescendants">
        <see langword="True" /> to clone all descendants.</param>
      <returns>
            The cloned element.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.CustomMarkups.BlockContentControl.UpdateContent">
      <summary>
            Updates a content. 
            </summary>
      <remarks>
            This method is applicable when the Content Control type is <see cref="F:SautinSoft.Document.CustomMarkups.ContentControlType.PlainText" />, 
            <see cref="F:SautinSoft.Document.CustomMarkups.ContentControlType.RichText" />, <see cref="F:SautinSoft.Document.CustomMarkups.ContentControlType.CheckBox" />,
            <see cref="F:SautinSoft.Document.CustomMarkups.ContentControlType.ComboBox" />, <see cref="F:SautinSoft.Document.CustomMarkups.ContentControlType.DropDownList" /> or <see cref="F:SautinSoft.Document.CustomMarkups.ContentControlType.Date" />.
            </remarks>
    </member>
    <member name="M:SautinSoft.Document.CustomMarkups.BlockContentControl.#ctor(SautinSoft.Document.DocumentCore,SautinSoft.Document.CustomMarkups.ContentControlType)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.CustomMarkups.BlockContentControl" /> class.
            </summary>
      <param name="document">The owner document.</param>
      <param name="contentControlType">Type of content control.</param>
    </member>
    <member name="M:SautinSoft.Document.CustomMarkups.BlockContentControl.#ctor(SautinSoft.Document.DocumentCore,SautinSoft.Document.CustomMarkups.ContentControlType,SautinSoft.Document.Block[])">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.CustomMarkups.BlockContentControl" /> class.
            </summary>
      <param name="document">The owner document.</param>
      <param name="contentControlType">Type of content control.</param>
      <param name="items">The content control's content.</param>
    </member>
    <member name="M:SautinSoft.Document.CustomMarkups.BlockContentControl.#ctor(SautinSoft.Document.DocumentCore,SautinSoft.Document.CustomMarkups.ContentControlType,System.Collections.Generic.IEnumerable{SautinSoft.Document.Block})">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.CustomMarkups.BlockContentControl" /> class.
            </summary>
      <param name="document">The owner document.</param>
      <param name="contentControlType">Type of content control.</param>
      <param name="items">The content control's content.</param>
    </member>
    <member name="T:SautinSoft.Document.CustomMarkups.CheckBoxSymbol">
      <summary>
            Represents a symbol that specifies how a CheckBox will look in a given state.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CustomMarkups.CheckBoxSymbol.Character">
      <summary>
            Gets or sets a character used by this CheckBoxSymbol.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CustomMarkups.CheckBoxSymbol.FontName">
      <summary>
            Gets or sets a font name for this CheckBoxSymbol.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.CustomMarkups.ContentControlListItem">
      <summary>
            Specifies a single list item within the parent Content Control item.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CustomMarkups.ContentControlListItem.DisplayName">
      <summary>
            Gets or sets the text which will be displayed for this list item.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CustomMarkups.ContentControlListItem.Value">
      <summary>
            Gets or sets the value of the list item.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.CustomMarkups.ContentControlListItem.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.CustomMarkups.ContentControlListItem" /> class.
            </summary>
      <param name="displayName">The text to be displayed.</param>
      <param name="value">The value for the list item entry.</param>
    </member>
    <member name="M:SautinSoft.Document.CustomMarkups.ContentControlListItem.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.CustomMarkups.ContentControlListItem" /> class.
            </summary>
      <param name="displayName">The text to be displayed.</param>
    </member>
    <member name="T:SautinSoft.Document.CustomMarkups.ContentControlProperties">
      <summary>
            Represents all possible properties for a Content Control item.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CustomMarkups.ContentControlProperties.Category">
      <summary>
            Gets or sets a value that specifies the category of document parts that will be used as the filter when determining the possible choices of document
            parts that are displayed for insertion into the Content Control item. A document part category is a sub-classification within a given document part
            <see cref="P:SautinSoft.Document.CustomMarkups.ContentControlProperties.Gallery">Gallery</see> which can be used to further categorize the parts in a given <see cref="P:SautinSoft.Document.CustomMarkups.ContentControlProperties.Gallery">Gallery</see>. 
            This property is applicable when the parent Content Control type is 
            <see cref="F:SautinSoft.Document.CustomMarkups.ContentControlType.BuildingBlockGallery">BuildingBlockGallery</see> or <see cref="F:SautinSoft.Document.CustomMarkups.ContentControlType.DocPartObj">DocPartObj</see>.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CustomMarkups.ContentControlProperties.CharacterFormat">
      <summary>
            Gets or sets the character format for the text inside a Content Control item.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CustomMarkups.ContentControlProperties.Checked">
      <summary>
            Gets or sets whether a Content Control item is checked. This property is applicable when the parent
            Content Control type is <see cref="F:SautinSoft.Document.CustomMarkups.ContentControlType.CheckBox">CheckBox</see>.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CustomMarkups.ContentControlProperties.CheckedSymbol">
      <summary>
            Gets a symbol that will be used if a CheckBox is checked. This property is applicable when the parent 
            Content Control type is <see cref="F:SautinSoft.Document.CustomMarkups.ContentControlType.CheckBox">CheckBox</see>.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CustomMarkups.ContentControlProperties.Color">
      <summary>
            Gets or sets the color of a Content Control item.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CustomMarkups.ContentControlProperties.Date">
      <summary>
            Gets or sets the date value of the Content Control item. This property is applicable when the parent 
            Content Control type is <see cref="F:SautinSoft.Document.CustomMarkups.ContentControlType.Date">Date</see>.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CustomMarkups.ContentControlProperties.DateCalendarType">
      <summary>
            Gets or sets a value that specifies the calendar type for a Date picker Content Control.
            This property is applicable when the parent Content Control type is <see cref="F:SautinSoft.Document.CustomMarkups.ContentControlType.Date">Date</see>.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CustomMarkups.ContentControlProperties.DateDisplayFormat">
      <summary>
            Gets or sets a value that specifies the display format for a date. This property is applicable when the parent 
            Content Control type is <see cref="F:SautinSoft.Document.CustomMarkups.ContentControlType.Date">Date</see>.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CustomMarkups.ContentControlProperties.DateLocale">
      <summary>
            Gets or sets culture info that will be used to format a date. This property is applicable when the parent 
            Content Control type is <see cref="F:SautinSoft.Document.CustomMarkups.ContentControlType.Date">Date</see>.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CustomMarkups.ContentControlProperties.DateStorageFormat">
      <summary>
            Gets or sets a value that specifies the date storage format. This property is applicable when the parent
            Content Control type is <see cref="F:SautinSoft.Document.CustomMarkups.ContentControlType.Date">Date</see>.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CustomMarkups.ContentControlProperties.DisplayMode">
      <summary>
            Gets or sets a value indicating how a Content Control item should be displayed in a document.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CustomMarkups.ContentControlProperties.Gallery">
      <summary>
            Gets or sets a value that specifies the gallery of document parts that will be used as the filter when determining the possible choices
            of document parts that are displayed for insertion into the Content Control item. This property is applicable when the parent
            Content Control type is <see cref="F:SautinSoft.Document.CustomMarkups.ContentControlType.BuildingBlockGallery">BuildingBlockGallery</see> or <see cref="F:SautinSoft.Document.CustomMarkups.ContentControlType.DocPartObj">DocPartObj</see>.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CustomMarkups.ContentControlProperties.Id">
      <summary>
            Gets or sets the ID of a Content Control item.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CustomMarkups.ContentControlProperties.IsShowingPlaceholderText">
      <summary>
            Gets or sets whether the content of the Content Control should be interpreted to contain placeholder text.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CustomMarkups.ContentControlProperties.ListItems">
      <summary>
            Gets list items associated with the Content Control item. This property is applicable when the parent
            Content Control type is <see cref="F:SautinSoft.Document.CustomMarkups.ContentControlType.ComboBox">ComboBox</see> or <see cref="F:SautinSoft.Document.CustomMarkups.ContentControlType.DropDownList">DropDownList</see>.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CustomMarkups.ContentControlProperties.LockAddDeleteSection">
      <summary>
            Gets or sets a value indicating whether a user is allowed to add or delete a section. This property is applicable when the parent
            Content Control type is <see cref="F:SautinSoft.Document.CustomMarkups.ContentControlType.RepeatingSection">RepeatingSection</see>.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CustomMarkups.ContentControlProperties.LockDeleting">
      <summary>
            Gets or sets a value indicating whether a Content Control item can be deleted.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CustomMarkups.ContentControlProperties.LockEditing">
      <summary>
            Gets or sets a value indicating whether the content of a Content Control item can be edited.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CustomMarkups.ContentControlProperties.Multiline">
      <summary>
            Gets or sets a value indicating whether this Content Control item can contain multiple lines of text. This property is applicable when the parent
            Content Control type is <see cref="F:SautinSoft.Document.CustomMarkups.ContentControlType.PlainText" />.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CustomMarkups.ContentControlProperties.NumberOfLines">
      <summary>
            Gets or sets the number of displaying text lines within form field when parent document saved as PDF. Default: 1.
            </summary>
      <remarks>
            This property is applicable when the <see cref="P:SautinSoft.Document.CustomMarkups.ContentControlProperties.Multiline" /> property is set to true 
            and the parent Content Control type is <see cref="F:SautinSoft.Document.CustomMarkups.ContentControlType.PlainText" /> or <see cref="F:SautinSoft.Document.CustomMarkups.ContentControlType.RichText" />. 
            </remarks>
    </member>
    <member name="P:SautinSoft.Document.CustomMarkups.ContentControlProperties.PlaceholderText">
      <summary>
            Gets or sets a placeholder text which should be displayed when Content Control is empty.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CustomMarkups.ContentControlProperties.RemoveWhenEdited">
      <summary>
            Gets or sets a value indicating whether a Content Control item should be removed after it is edited.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CustomMarkups.ContentControlProperties.SectionTitle">
      <summary>
            Gets or sets a section title. This property is applicable when the parent 
            Content Control type is <see cref="F:SautinSoft.Document.CustomMarkups.ContentControlType.RepeatingSection">RepeatingSection</see>.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CustomMarkups.ContentControlProperties.SelectedListItem">
      <summary>
            Gets or sets the selected value of the Content Control item. This property is applicable when the parent 
            Content Control type is <see cref="F:SautinSoft.Document.CustomMarkups.ContentControlType.ComboBox">ComboBox</see> or <see cref="F:SautinSoft.Document.CustomMarkups.ContentControlType.DropDownList">DropDownList</see>.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CustomMarkups.ContentControlProperties.Tag">
      <summary>
            Gets or sets the tag of a Content Control item.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CustomMarkups.ContentControlProperties.Title">
      <summary>
            Gets or sets the title of a Content Control item.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CustomMarkups.ContentControlProperties.UncheckedSymbol">
      <summary>
            Gets a symbol that will be used if a CheckBox is unchecked. This property is applicable when the parent 
            Content Control type is <see cref="F:SautinSoft.Document.CustomMarkups.ContentControlType.CheckBox">CheckBox</see>.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CustomMarkups.ContentControlProperties.Unique">
      <summary>
            Gets or sets a value that specifies that the Content Control item is being used to encapsulate a built-in document part. 
            This property is applicable when the parent Content Control type is <see cref="F:SautinSoft.Document.CustomMarkups.ContentControlType.BuildingBlockGallery">BuildingBlockGallery</see> 
            or <see cref="F:SautinSoft.Document.CustomMarkups.ContentControlType.DocPartObj">DocPartObj</see>.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CustomMarkups.ContentControlProperties.XmlMapping">
      <summary>
            Specifies the mapping between a content control and a custom XML part or a document property.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.CustomMarkups.CalendarType">
      <summary>
            Represents the calendar type of a Date picker Content Control item.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.CustomMarkups.CalendarType.Gregorian">
      <summary>
            The Gregorian calendar. This calendar should be localized into the appropriate language.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.CustomMarkups.CalendarType.GregorianArabic">
      <summary>
            The Gregorian calendar. This calendar should be presented in Arabic.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.CustomMarkups.CalendarType.GregorianEnglish">
      <summary>
            The Gregorian calendar. This calendar should be presented in English.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.CustomMarkups.CalendarType.GregorianMiddleEastFrench">
      <summary>
            The Gregorian calendar. This calendar should be presented in Middle East French.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.CustomMarkups.CalendarType.GregorianTransliteratedEnglish">
      <summary>
            The transliterated English version of the Gregorian calendar.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.CustomMarkups.CalendarType.GregorianTransliteratedFrench">
      <summary>
            The transliterated French version of the Gregorian calendar.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.CustomMarkups.CalendarType.Hebrew">
      <summary>
            The Hebrew calendar.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.CustomMarkups.CalendarType.Hijri">
      <summary>
            The Hirji calendar.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.CustomMarkups.CalendarType.Japan">
      <summary>
            The Japanese calendar.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.CustomMarkups.CalendarType.Korean">
      <summary>
            The Korean calendar.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.CustomMarkups.CalendarType.None">
      <summary>
            None.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.CustomMarkups.CalendarType.Saka">
      <summary>
            The Saka calendar.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.CustomMarkups.CalendarType.Taiwan">
      <summary>
            The Taiwanese calendar.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.CustomMarkups.CalendarType.Thai">
      <summary>
            The Thai calendar.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.CustomMarkups.ContentControlDisplayMode">
      <summary>
            Represents how Content Control is displayed in a document.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.CustomMarkups.ContentControlDisplayMode.BoundingBox">
      <summary>
            Bounding Box.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.CustomMarkups.ContentControlDisplayMode.None">
      <summary>
            None.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.CustomMarkups.ContentControlDisplayMode.StartEndTag">
      <summary>
            Start/End Tag.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.CustomMarkups.ContentControlType">
      <summary>
            Represents the type of a Content Control item (Structured Document Tag).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.CustomMarkups.ContentControlType.Bibliography">
      <summary>
            Bibliography Content Control.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.CustomMarkups.ContentControlType.BuildingBlockGallery">
      <summary>
            Building Block Gallery Content Control.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.CustomMarkups.ContentControlType.CheckBox">
      <summary>
            Check Box Content Control.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.CustomMarkups.ContentControlType.Citation">
      <summary>
            Citation Content Control. 
            </summary>
    </member>
    <member name="F:SautinSoft.Document.CustomMarkups.ContentControlType.ComboBox">
      <summary>
            Combo Box Content Control.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.CustomMarkups.ContentControlType.Date">
      <summary>
            Date Picker Content Control.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.CustomMarkups.ContentControlType.DocPartObj">
      <summary>
            DocPartObj Content Control.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.CustomMarkups.ContentControlType.DropDownList">
      <summary>
            Drop-Down List Content Control.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.CustomMarkups.ContentControlType.Equation">
      <summary>
            Equation Content Control.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.CustomMarkups.ContentControlType.Group">
      <summary>
            Grouped Content Controls.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.CustomMarkups.ContentControlType.Picture">
      <summary>
            Picture Content Control.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.CustomMarkups.ContentControlType.PlainText">
      <summary>
            Plain Text Content Control.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.CustomMarkups.ContentControlType.RepeatingSection">
      <summary>
            Repeating Section Content Control.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.CustomMarkups.ContentControlType.RepeatingSectionItem">
      <summary>
            Repeating Section Item Content Control.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.CustomMarkups.ContentControlType.RichText">
      <summary>
            Rich Text Content Control.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.CustomMarkups.DateStorageFormat">
      <summary>
            Specifies how the date for a date Content Control item is stored.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.CustomMarkups.DateStorageFormat.Date">
      <summary>
            The date storage format.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.CustomMarkups.DateStorageFormat.DateTime">
      <summary>
            The date and time storage format.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.CustomMarkups.DateStorageFormat.Text">
      <summary>
            The text storage format.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.CustomMarkups.InlineContentControl">
      <summary>
            Represents inline-level Content Control (Structured Document Tag).
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CustomMarkups.InlineContentControl.ElementType">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.ElementType" /> of this element instance.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CustomMarkups.InlineContentControl.Inlines">
      <summary>
            Gets the inlines of this Content Control.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CustomMarkups.InlineContentControl.ContentControlType">
      <summary>
            The type of this Content Control.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CustomMarkups.InlineContentControl.Properties">
      <summary>
            Gets all the possible properties for this Content Control item.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.CustomMarkups.InlineContentControl.Clone(System.Boolean)">
      <summary>
            Clones this element instance.
            </summary>
      <remarks>
        <para>This method serves as a copy constructor for elements. The cloned element
            has no parent, but belongs to the same document as the original element. </para>
        <para>If you want to insert this element into another document, then you should
            first import it into another document with 
            <see cref="M:SautinSoft.Document.DocumentCore.Import``1(``0,System.Boolean,System.Boolean)">Import&lt;T&gt;(T,System.Boolean,System.Boolean)</see>
            method and then insert the imported element.
            </para>
      </remarks>
      <param name="cloneDescendants">
        <see langword="True" /> to clone all descendants.</param>
      <returns>
            The cloned element.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.CustomMarkups.InlineContentControl.UpdateContent">
      <summary>
            Updates a content. 
            </summary>
      <remarks>
            This method is applicable when the Content Control type is <see cref="F:SautinSoft.Document.CustomMarkups.ContentControlType.PlainText" />, 
            <see cref="F:SautinSoft.Document.CustomMarkups.ContentControlType.RichText" />, <see cref="F:SautinSoft.Document.CustomMarkups.ContentControlType.CheckBox" />,
            <see cref="F:SautinSoft.Document.CustomMarkups.ContentControlType.ComboBox" />, <see cref="F:SautinSoft.Document.CustomMarkups.ContentControlType.DropDownList" /> or <see cref="F:SautinSoft.Document.CustomMarkups.ContentControlType.Date" />.
            </remarks>
    </member>
    <member name="M:SautinSoft.Document.CustomMarkups.InlineContentControl.#ctor(SautinSoft.Document.DocumentCore,SautinSoft.Document.CustomMarkups.ContentControlType)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.CustomMarkups.InlineContentControl" /> class.
            </summary>
      <param name="document">The owner document.</param>
      <param name="contentControlType">Type of content control.</param>
    </member>
    <member name="M:SautinSoft.Document.CustomMarkups.InlineContentControl.#ctor(SautinSoft.Document.DocumentCore,SautinSoft.Document.CustomMarkups.ContentControlType,SautinSoft.Document.Inline[])">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.CustomMarkups.InlineContentControl" /> class.
            </summary>
      <param name="document">The owner document.</param>
      <param name="contentControlType">Type of content control.</param>
      <param name="items">The content control's content.</param>
    </member>
    <member name="M:SautinSoft.Document.CustomMarkups.InlineContentControl.#ctor(SautinSoft.Document.DocumentCore,SautinSoft.Document.CustomMarkups.ContentControlType,System.Collections.Generic.IEnumerable{SautinSoft.Document.Inline})">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.CustomMarkups.InlineContentControl" /> class.
            </summary>
      <param name="document">The owner document.</param>
      <param name="contentControlType">Type of content control.</param>
      <param name="items">The content control's content.</param>
    </member>
    <member name="T:SautinSoft.Document.CustomMarkups.XmlMapping">
      <summary>
            Specifies the mapping between a content control and a custom XML part or a document property.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CustomMarkups.XmlMapping.BuiltInDocumentProperty">
      <summary>
            Gets the built-in document property that is mapped to the content control.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CustomMarkups.XmlMapping.CustomXmlPart">
      <summary>
            Gets or sets the custom XML part that will be used to evaluate the given XPath expression.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CustomMarkups.XmlMapping.PrefixMappings">
      <summary>
            Gets or sets a value that specifies the set of prefix mappings that will be used to interpret the XPath expression.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CustomMarkups.XmlMapping.XPath">
      <summary>
            Gets or sets the XPath expression that will be evaluated to find the custom XML node mapped to the content control.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.CustomMarkups.XmlMapping.#ctor(SautinSoft.Document.DocumentCore)">
      <summary>
             Initializes a new instance of the <see cref="T:SautinSoft.Document.CustomMarkups.XmlMapping" /> class.
            </summary>
      <param name="document">The owner document.</param>
    </member>
    <member name="T:SautinSoft.Document.CustomXmlPart">
      <summary>
            Represents a custom XML part within a document that contains arbitrary custom XML markup.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CustomXmlPart.Data">
      <summary>
            The custom XML part data.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CustomXmlPart.Id">
      <summary>
            Gets or sets the custom XML part ID. If value is not null, then it should be a <see href="https://docs.microsoft.com/dotnet/api/system.guid">Guid</see>
            value converted to <see href="https://docs.microsoft.com/dotnet/api/system.string">String</see> with a 
            <see href="https://docs.microsoft.com/dotnet/api/system.guid.tostring#System_Guid_ToString_System_String_">ToString(String)</see> method with a B specifier.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CustomXmlPart.Schemas">
      <summary>
            Gets the set of associated XML schemas.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.CustomXmlPart.Clone">
      <summary>
            Clones this <see cref="T:SautinSoft.Document.CustomXmlPart" /> instance.
            </summary>
      <returns>The cloned <see cref="T:SautinSoft.Document.CustomXmlPart" />.</returns>
    </member>
    <member name="M:SautinSoft.Document.CustomXmlPart.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.CustomXmlPart" /> class.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.CustomXmlPartCollection">
      <summary>
            Represents a collection of <see cref="T:SautinSoft.Document.CustomXmlPart" />s.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.CustomXmlPartCollection.Item(System.String)">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.CustomXmlPart" /> with the specified ID or null.
            </summary>
      <param name="id">The ID of the <see cref="T:SautinSoft.Document.CustomXmlPart" />.</param>
      <returns>The <see cref="T:SautinSoft.Document.CustomXmlPart" /> with the specified ID or null.</returns>
    </member>
    <member name="T:SautinSoft.Document.DocumentBuilder">
      <summary>
            Provides methods to insert text, images and other content, specify character, paragraph and section formatting.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.DocumentBuilder.Document">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.DocumentCore" /> that this <see cref="T:SautinSoft.Document.DocumentBuilder" /> is attached to.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.DocumentBuilder.CharacterFormat">
      <summary>
            Gets current character formatting properties.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.DocumentBuilder.ParagraphFormat">
      <summary>
            Gets the current paragraph formatting properties.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.DocumentBuilder.ListFormat">
      <summary>
            Gets the current list formatting properties.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.DocumentBuilder.CellFormat">
      <summary>
            Gets the current table cell formatting properties.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.DocumentBuilder.RowFormat">
      <summary>
            Gets the current table row formatting properties.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.DocumentBuilder.TableFormat">
      <summary>
            Gets the current table formatting properties.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.DocumentBuilder.PageSetup">
      <summary>
            Gets the current page setup and section properties.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.DocumentBuilder.CurrentPosition">
      <summary>
            Gets the current insert position.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.DocumentBuilder.StartTable">
      <summary>
            Inserts a table into the document.
            </summary>
      <returns>
        <see cref="T:SautinSoft.Document.Tables.Table" /> that was just inserted.</returns>
    </member>
    <member name="M:SautinSoft.Document.DocumentBuilder.InsertCell">
      <summary>
            Inserts a table cell into the document.
            </summary>
      <returns>The <see cref="T:SautinSoft.Document.Tables.TableCell" /> that was just inserted.</returns>
    </member>
    <member name="M:SautinSoft.Document.DocumentBuilder.EndTable">
      <summary>
            Ends a table in the document.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.DocumentBuilder.EndRow">
      <summary>
            Ends a table row in the document.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.DocumentBuilder.DeleteRow(System.Int32,System.Int32)">
      <summary>
            Deletes a row from a table.
            </summary>
      <param name="tableIndex">The index of the table.</param>
      <param name="rowIndex">The index of the row in the table.</param>
    </member>
    <member name="M:SautinSoft.Document.DocumentBuilder.Write(System.String)">
      <summary>
            Inserts a string into the document at the current insert position.
            </summary>
      <param name="text">The string to insert into the document.</param>
    </member>
    <member name="M:SautinSoft.Document.DocumentBuilder.Writeln(System.String)">
      <summary>
            Inserts a string and a paragraph break into the document.
            </summary>
      <param name="text">The string to insert into the document.</param>
    </member>
    <member name="M:SautinSoft.Document.DocumentBuilder.Writeln">
      <summary>
            Inserts a paragraph break into the document.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.DocumentBuilder.InsertSection">
      <summary>
            Inserts a section into the document.
            </summary>
      <returns>
        <see cref="T:SautinSoft.Document.Section" /> that was just inserted.</returns>
    </member>
    <member name="M:SautinSoft.Document.DocumentBuilder.InsertSpecialCharacter(SautinSoft.Document.SpecialCharacterType)">
      <summary>
            Inserts a special character into the document.
            </summary>
      <param name="specialCharacterType">Specifies the type of the special character to insert.</param>
      <returns>
        <see cref="T:SautinSoft.Document.SpecialCharacter" /> that was just inserted.</returns>
    </member>
    <member name="M:SautinSoft.Document.DocumentBuilder.InsertCheckBox(System.String,System.Boolean,System.Boolean,System.Int32)">
      <summary>
            Inserts a checkbox form field at the current position.
            </summary>
      <param name="name">The name of the form field. Can be an empty string. The value longer than 20 characters will be truncated.</param>
      <param name="defaultValue">Default value of the checkbox form field.</param>
      <param name="checkedValue">Checked status of the checkbox form field.</param>
      <param name="size">Specifies the size of the checkbox in points. Specify 0 for MS Word to calculate the size of the checkbox automatically.</param>
      <returns>
        <see cref="T:SautinSoft.Document.Field" /> that was just inserted.</returns>
    </member>
    <member name="M:SautinSoft.Document.DocumentBuilder.InsertCheckBox(System.String,System.Boolean,System.Int32)">
      <summary>
            Inserts a checkbox form field at the current position.
            </summary>
      <param name="name">The name of the form field. Can be an empty string. The value longer than 20 characters will be truncated.</param>
      <param name="checkedValue">Checked status of the checkbox form field.</param>
      <param name="size">Specifies the size of the checkbox in points. Specify 0 for MS Word to calculate the size of the checkbox automatically.</param>
      <returns>
        <see cref="T:SautinSoft.Document.Field" /> that was just inserted.</returns>
    </member>
    <member name="M:SautinSoft.Document.DocumentBuilder.InsertComboBox(System.String,System.String[],System.Int32)">
      <summary>
            Inserts a combobox form field at the current position.
            </summary>
      <param name="name">The name of the form field. Can be an empty string. The value longer than 20 characters will be truncated.</param>
      <param name="items">The items of the ComboBox. Maximum is 25 items.</param>
      <param name="selectedIndex">The index of the selected item in the ComboBox.</param>
      <returns>
        <see cref="T:SautinSoft.Document.Field" /> that was just inserted.</returns>
    </member>
    <member name="M:SautinSoft.Document.DocumentBuilder.InsertTextInput(System.String,SautinSoft.Document.FormTextType,System.String,System.String,System.Int32)">
      <summary>
            Inserts a text form field at the current position.
            </summary>
      <param name="name">The name of the form field. Can be an empty string.</param>
      <param name="textType">Specifies the type of the text form field.</param>
      <param name="format">Format string used to format the value of the form field.</param>
      <param name="fieldValue">Text that will be shown in the field.</param>
      <param name="maxLength">Maximum length the user can enter into the form field. Set to zero for unlimited length.</param>
      <returns>
        <see cref="T:SautinSoft.Document.Field" /> that was just inserted.</returns>
    </member>
    <member name="M:SautinSoft.Document.DocumentBuilder.InsertDocument(SautinSoft.Document.DocumentCore,SautinSoft.Document.ImportSession)">
      <summary>
            Inserts a document at the cursor position.
            </summary>
      <param name="sourceDocument">Source document for inserting.</param>
      <param name="session">Import session.</param>
    </member>
    <member name="M:SautinSoft.Document.DocumentBuilder.InsertDocument(SautinSoft.Document.DocumentCore)">
      <summary>
            Inserts a document at the cursor position.
            </summary>
      <param name="sourceDocument">Source document for inserting.</param>
    </member>
    <member name="M:SautinSoft.Document.DocumentBuilder.InsertField(System.String)">
      <summary>
            Inserts a Word field into a document.
            </summary>
      <param name="fieldCode">The field code to insert (without curly braces).</param>
      <returns>
        <see cref="T:SautinSoft.Document.Field" /> that was just inserted.</returns>
    </member>
    <member name="M:SautinSoft.Document.DocumentBuilder.InsertField(System.String,System.String)">
      <summary>
            Inserts a Word field into a document.
            </summary>
      <param name="fieldCode">The field code to insert (without curly braces).</param>
      <param name="fieldValue">The field value to insert. Pass null for fields that do not have a value.</param>
      <returns>
        <see cref="T:SautinSoft.Document.Field" /> that was just inserted.</returns>
    </member>
    <member name="M:SautinSoft.Document.DocumentBuilder.InsertContentControl(SautinSoft.Document.CustomMarkups.ContentControlType)">
      <summary>
            Inserts a content control into a document.
            </summary>
      <param name="type">Specifies the type of the content control.</param>
      <returns>
        <see cref="T:SautinSoft.Document.CustomMarkups.InlineContentControl" /> that was just inserted.</returns>
    </member>
    <member name="M:SautinSoft.Document.DocumentBuilder.InsertNote(SautinSoft.Document.NoteType,System.String,System.String)">
      <summary>
            Inserts a footnote or endnote into the document.
            </summary>
      <param name="noteType">Specifies whether to insert a footnote or an endnote.</param>
      <param name="noteText">Specifies the text of the note.</param>
      <param name="referenceMark">Specifies the custom reference mark of the note.</param>
      <returns>
        <see cref="T:SautinSoft.Document.Note" /> that was just inserted.</returns>
    </member>
    <member name="M:SautinSoft.Document.DocumentBuilder.InsertNote(SautinSoft.Document.NoteType,System.String)">
      <summary>
            Inserts a footnote or endnote into the document.
            </summary>
      <param name="noteType">Specifies whether to insert a footnote or an endnote.</param>
      <param name="noteText">Specifies the text of the note.</param>
      <returns>
        <see cref="T:SautinSoft.Document.Note" /> that was just inserted.</returns>
    </member>
    <member name="M:SautinSoft.Document.DocumentBuilder.InsertHtml(System.String)">
      <summary>
            Inserts an HTML string into the document.
            </summary>
      <param name="html">An HTML string to insert into the document.</param>
      <remarks>
            You can use this method to insert an HTML fragment or whole HTML document.
            </remarks>
    </member>
    <member name="M:SautinSoft.Document.DocumentBuilder.InsertHtml(System.String,System.Boolean)">
      <summary>
            Inserts an HTML string into the document.
            </summary>
      <param name="html">An HTML string to insert into the document.</param>
      <param name="useBuilderFormatting">A value indicating whether formatting specified in <see cref="T:SautinSoft.Document.DocumentBuilder" /> 
            is used as base formatting for text imported from HTML.</param>
      <remarks>
            You can use this method to insert an HTML fragment or whole HTML document.
            </remarks>
    </member>
    <member name="M:SautinSoft.Document.DocumentBuilder.InsertHyperlink(System.String,System.String,System.Boolean)">
      <summary>
            Inserts a hyperlink into the document.
            </summary>
      <param name="displayText">Text of the link to be displayed in the document.</param>
      <param name="urlOrBookmark">Link destination. Can be a url or a name of a bookmark inside the document.</param>
      <param name="isBookmark">True if the previous parameter is a name of a bookmark inside the document; false is the previous parameter is a URL.</param>
      <returns>
        <see cref="T:SautinSoft.Document.Hyperlink" /> that was just inserted.</returns>
    </member>
    <member name="M:SautinSoft.Document.DocumentBuilder.InsertImage(System.IO.Stream,System.Nullable{SautinSoft.Document.Drawing.Size})">
      <summary>
            Inserts an image from a stream into the document. The image is inserted inline and at 100% scale.
            </summary>
      <param name="stream">The stream that contains the image.</param>
      <param name="size">The size of the image in points. Can be a null value to request 100% scale.</param>
      <returns>
        <see cref="T:SautinSoft.Document.Drawing.Picture" /> that was just inserted.</returns>
    </member>
    <member name="M:SautinSoft.Document.DocumentBuilder.InsertImage(System.Byte[],System.Nullable{SautinSoft.Document.Drawing.Size})">
      <summary>
            Inserts an image from a byte array into the document. The image is inserted inline and at 100% scale.
            </summary>
      <param name="imageBytes">The byte array that contains the image.</param>
      <param name="size">The size of the image in points. Can be a null value to request 100% scale.</param>
      <returns>
        <see cref="T:SautinSoft.Document.Drawing.Picture" /> that was just inserted.</returns>
    </member>
    <member name="M:SautinSoft.Document.DocumentBuilder.InsertImage(System.String,System.Nullable{SautinSoft.Document.Drawing.Size})">
      <summary>
            Inserts an image from a file into the document. The image is inserted inline and at 100% scale.
            </summary>
      <param name="fileName">The file with the image.</param>
      <param name="size">The size of the image in points. Can be a null value to request 100% scale.</param>
      <returns>
        <see cref="T:SautinSoft.Document.Drawing.Picture" /> that was just inserted.</returns>
    </member>
    <member name="M:SautinSoft.Document.DocumentBuilder.InsertImage(System.IO.Stream,SautinSoft.Document.HorizontalPosition,SautinSoft.Document.VerticalPosition,SautinSoft.Document.Drawing.WrappingStyle,System.Nullable{SautinSoft.Document.Drawing.Size})">
      <summary>
            Inserts an image from a stream at the specified position and size.
            </summary>
      <param name="stream">The stream that contains the image.</param>
      <param name="horizontalPosition">The horizontal position.</param>
      <param name="verticalPosition">The vertical position.</param>
      <param name="wrappingStyle">Specifies how to wrap text around the image.</param>
      <param name="size">The size of the image in points. Can be a null value to request 100% scale.</param>
      <returns>
        <see cref="T:SautinSoft.Document.Drawing.Picture" /> that was just inserted.</returns>
    </member>
    <member name="M:SautinSoft.Document.DocumentBuilder.InsertImage(System.Byte[],SautinSoft.Document.HorizontalPosition,SautinSoft.Document.VerticalPosition,SautinSoft.Document.Drawing.WrappingStyle,System.Nullable{SautinSoft.Document.Drawing.Size})">
      <summary>
            Inserts an image from a byte array at the specified position and size.
            </summary>
      <param name="imageBytes">The byte array that contains the image.</param>
      <param name="horizontalPosition">The horizontal position.</param>
      <param name="verticalPosition">The vertical position.</param>
      <param name="wrappingStyle">Specifies how to wrap text around the image.</param>
      <param name="size">The size of the image in points. Can be a null value to request 100% scale.</param>
      <returns>
        <see cref="T:SautinSoft.Document.Drawing.Picture" /> that was just inserted.</returns>
    </member>
    <member name="M:SautinSoft.Document.DocumentBuilder.InsertImage(System.String,SautinSoft.Document.HorizontalPosition,SautinSoft.Document.VerticalPosition,SautinSoft.Document.Drawing.WrappingStyle,System.Nullable{SautinSoft.Document.Drawing.Size})">
      <summary>
            Inserts an image from a file at the specified position and size.
            </summary>
      <param name="fileName">The file that contains the image.</param>
      <param name="horizontalPosition">The horizontal position.</param>
      <param name="verticalPosition">The vertical position.</param>
      <param name="wrappingStyle">Specifies how to wrap text around the image.</param>
      <param name="size">The size of the image in points. Can be a null value to request 100% scale.</param>
      <returns>
        <see cref="T:SautinSoft.Document.Drawing.Picture" /> that was just inserted.</returns>
    </member>
    <member name="M:SautinSoft.Document.DocumentBuilder.InsertShape(SautinSoft.Document.Drawing.Figure,SautinSoft.Document.Drawing.Size)">
      <summary>
            Inserts inline shape with specified figure and size.
            </summary>
      <param name="figure">Specifies Microsoft Word figure.</param>
      <param name="size">The size of the shape in points.</param>
      <returns>
        <see cref="T:SautinSoft.Document.Drawing.Shape" /> that was just inserted.</returns>
    </member>
    <member name="M:SautinSoft.Document.DocumentBuilder.InsertShape(SautinSoft.Document.Drawing.Figure,SautinSoft.Document.HorizontalPosition,SautinSoft.Document.VerticalPosition,SautinSoft.Document.Drawing.WrappingStyle,SautinSoft.Document.Drawing.Size)">
      <summary>
            Inserts free-floating shape with specified position, size and text wrap style.
            </summary>
      <param name="figure">Specifies Microsoft Word figure.</param>
      <param name="horizontalPosition">The horizontal position.</param>
      <param name="verticalPosition">The vertical position.</param>
      <param name="wrappingStyle">Specifies how to wrap text around the shape.</param>
      <param name="size">The size of the shape in points.</param>
      <returns>
        <see cref="T:SautinSoft.Document.Drawing.Shape" /> that was just inserted.</returns>
    </member>
    <member name="M:SautinSoft.Document.DocumentBuilder.InsertInline(SautinSoft.Document.Inline)">
      <summary>
            Inserts an <see cref="T:SautinSoft.Document.Inline" /> at the current position.
            </summary>
      <param name="inline">
        <see cref="T:SautinSoft.Document.Inline" />.</param>
    </member>
    <member name="M:SautinSoft.Document.DocumentBuilder.InsertParagraph(System.String)">
      <summary>
            Inserts an <see cref="T:SautinSoft.Document.Paragraph" /> at the current position.
            </summary>
      <param name="text">The string to insert into the paragraph.</param>
      <returns>The reference to the just inserted <see cref="T:SautinSoft.Document.Paragraph" /> object.</returns>
    </member>
    <member name="M:SautinSoft.Document.DocumentBuilder.InsertTableOfContents(System.String)">
      <summary>
            Inserts a table of contents into the document.
            </summary>
      <param name="switches">The Microsoft Word TOC field switches.</param>
      <returns>
        <see cref="T:SautinSoft.Document.TableOfEntries" /> that was just inserted.</returns>
    </member>
    <member name="M:SautinSoft.Document.DocumentBuilder.MoveTo(SautinSoft.Document.ContentPosition)">
      <summary>
            Moves the cursor to a given position.
            </summary>
      <param name="position">Position within the document.</param>
    </member>
    <member name="M:SautinSoft.Document.DocumentBuilder.MoveToBookmark(System.String,System.Boolean,System.Boolean)">
      <summary>
            Moves the cursor to a bookmark.
            </summary>
      <param name="bookmarkName">The name of the bookmark to move the cursor to.</param>
      <param name="isStart">When true, moves the cursor to the beginning of the bookmark. When false, moves the cursor to the end of the bookmark.</param>
      <param name="isAfter">When true, moves the cursor to be after the bookmark start or end position. When false, moves the cursor to be before the bookmark start or end position.</param>
      <returns>True if the bookmark was found; false otherwise.</returns>
    </member>
    <member name="M:SautinSoft.Document.DocumentBuilder.MoveToBookmark(System.String)">
      <summary>
            Moves the cursor to a bookmark.
            </summary>
      <param name="bookmarkName">The name of the bookmark to move the cursor to.</param>
      <returns>True if the bookmark was found; false otherwise.</returns>
    </member>
    <member name="M:SautinSoft.Document.DocumentBuilder.MoveToCell(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Moves the cursor to a specified position inside table in the current section.
            </summary>
      <param name="tableIndex">The index (including nested tables) of the table to move to.</param>
      <param name="rowIndex">The index of the row in the table.</param>
      <param name="columnIndex">The index of the column in the table.</param>
      <param name="characterIndex">The index of the character inside the cell.</param>
    </member>
    <member name="M:SautinSoft.Document.DocumentBuilder.MoveToDocumentEnd">
      <summary>
            Moves the cursor to the end of the document.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.DocumentBuilder.MoveToDocumentStart">
      <summary>
            Moves the cursor to the beginning of the document.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.DocumentBuilder.MoveToField(SautinSoft.Document.Field,System.Boolean)">
      <summary>
            Moves the cursor to a field in the document.
            </summary>
      <param name="field">The field to move the cursor to.</param>
      <param name="isAfter">When true, moves the cursor to be after the field end. When false, moves the cursor to be before the field start.</param>
    </member>
    <member name="M:SautinSoft.Document.DocumentBuilder.MoveToHeaderFooter(SautinSoft.Document.HeaderFooterType)">
      <summary>
             Moves the cursor to the beginning of a header or footer in the current section.
            </summary>
      <param name="headerFooterType">Specifies the header or footer to move to.</param>
    </member>
    <member name="M:SautinSoft.Document.DocumentBuilder.MoveToMergeField(System.String,System.Boolean,System.Boolean)">
      <summary>
            Moves the cursor to the specified merge field.
            </summary>
      <param name="fieldName">The case-insensitive name of the mail merge field.</param>
      <param name="isAfter">When true, moves the cursor to be after the field end. When false, moves the cursor to be before the field start.</param>
      <param name="isDeleteField">When true, deletes the merge field.</param>
      <returns>True if the merge field was found and the cursor was moved; false otherwise.</returns>
    </member>
    <member name="M:SautinSoft.Document.DocumentBuilder.MoveToMergeField(System.String)">
      <summary>
            Moves the cursor to a position just beyond the specified merge field and removes the merge field.
            </summary>
      <param name="fieldName">The case-insensitive name of the mail merge field.</param>
      <returns>True if the merge field was found and the cursor was moved; false otherwise.</returns>
    </member>
    <member name="M:SautinSoft.Document.DocumentBuilder.MoveToParagraph(System.Int32,System.Int32)">
      <summary>
            Moves the cursor to a paragraph in the current section.
            </summary>
      <param name="paragraphIndex">The index of the paragraph to move to.</param>
      <param name="characterIndex">The index of the character inside the paragraph. </param>
    </member>
    <member name="M:SautinSoft.Document.DocumentBuilder.MoveToSection(System.Int32)">
      <summary>
            Moves the cursor to the beginning of a specified section.
            </summary>
      <param name="sectionIndex">The index of the section to move to.</param>
    </member>
    <member name="M:SautinSoft.Document.DocumentBuilder.PushCharacterFormat">
      <summary>
            Saves current character formatting onto the stack.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.DocumentBuilder.PopCharacterFormat">
      <summary>
            Retrieves character formatting previously saved on the stack.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.DocumentBuilder.StartBookmark(System.String)">
      <summary>
            Marks the current position in the document as a bookmark start.
            </summary>
      <param name="bookmarkName">Name of the bookmark.</param>
      <returns>
        <see cref="T:SautinSoft.Document.BookmarkStart" /> that was just created.</returns>
    </member>
    <member name="M:SautinSoft.Document.DocumentBuilder.EndBookmark(System.String)">
      <summary>
            Marks the current position in the document as a bookmark end.
            </summary>
      <param name="bookmarkName">Name of the bookmark.</param>
      <returns>
        <see cref="T:SautinSoft.Document.BookmarkEnd" /> that was just created.</returns>
    </member>
    <member name="M:SautinSoft.Document.DocumentBuilder.#ctor(SautinSoft.Document.DocumentCore)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.DocumentBuilder" /> class.
            </summary>
      <param name="document">The <see cref="T:SautinSoft.Document.DocumentCore" /> instance to attach to.</param>
    </member>
    <member name="M:SautinSoft.Document.DocumentBuilder.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.DocumentBuilder" /> class.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.DocumentVariablesDictionary">
      <summary>
            Represents a dictionary that contains <see cref="T:System.String" /> key and 
            <see cref="T:System.String" /> value pairs.
            </summary>
      <remarks>
        <para>
            Keys cannot be null or empty string.
            </para>
      </remarks>
    </member>
    <member name="T:SautinSoft.Document.ElementFrame">
      <summary>
            Represents the frame of an element that is layouted on the page.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.ElementFrame.PageIndex">
      <summary>
            Gets the zero-based index of parent page within <see cref="P:SautinSoft.Document.DocumentPaginator.Pages" />.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.ElementFrame.Element">
      <summary>
            Gets the parent element.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.ElementFrame.Content">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.ContentRange" /> that encompassed this element frame.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.ElementFrame.Bounds">
      <summary>
            Gets the bounds relative to upper-left corner of page.
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "T:SautinSoft.Document.Html.CharsetDetector" -->
    <!-- Badly formed XML comment ignored for member "M:SautinSoft.Document.Html.RandomAccessFileOrArray.ReadShortLE" -->
    <!-- Badly formed XML comment ignored for member "M:SautinSoft.Document.Html.RandomAccessFileOrArray.ReadUnsignedShortLE" -->
    <!-- Badly formed XML comment ignored for member "M:SautinSoft.Document.Html.RandomAccessFileOrArray.ReadCharLE" -->
    <!-- Badly formed XML comment ignored for member "M:SautinSoft.Document.Html.RandomAccessFileOrArray.ReadIntLE" -->
    <!-- Badly formed XML comment ignored for member "M:SautinSoft.Document.Html.RandomAccessFileOrArray.ReadUnsignedInt" -->
    <member name="T:SautinSoft.Document.ImageLoadOptions">
      <summary>
            Represents a class that stores options for loading images.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.ImageLoadOptions.OCROptions">
      <summary>
            Allows to specify options for OCR (optical character recognition) and enable it.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.ImageLoadOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.ImageLoadOptions" /> class.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.OCROptions">
      <summary>
            Represents a class that stores loading options for Portable Document Format (PDF).
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\03. Load\03. Load a PDF document\Sample.cs" title="Loads a PDF document into DocumentCore using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\03. Load\03. Load a PDF document\Sample.vb" title="Loads a PDF document into DocumentCore using VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.OCROptions.OCRMethod">
      <summary>
            Delegate to perform OCR (any 3rd party). We offer free library from Nicomsoft: https://www.nicomsoft.com/nicomsoft-ocr-sdk-is-freeware-now.
            </summary>
      <param name="Image">An input image</param>
      <returns>The result of OCR as PDF document. Note, your OCR library (for example Nicomsoft) must save the OCR result as PDF.</returns>
    </member>
    <member name="P:SautinSoft.Document.OCROptions.Method">
      <summary>
            Method to perform OCR (any 3rd party). We offer free library from Nicomsoft: https://www.nicomsoft.com/nicomsoft-ocr-sdk-is-freeware-now.
            </summary>
      <remarks>
            Thus, you method has to accept an image and return the recognizing result in PDF format.
            </remarks>
    </member>
    <member name="P:SautinSoft.Document.OCROptions.OCRMode">
      <summary>
            Gets or sets OCR mode. Default value: <see cref="F:SautinSoft.Document.OCRMode.Disabled" />.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.OCROptions.#ctor">
      <summary>
            A constructor for working with OCR.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.ImageSaveOptions">
      <summary>
            Represents options for saving to Rich Text (RTF) format.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\04. Save as\04. Save a document as RTF\Sample.cs" title="How to save a document in RTF format using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\04. Save as\04. Save a document as RTF\Sample.vb" title="How to save a document in RTF format using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.ImageSaveOptions.ContentType">
      <summary>
            Gets the content-type for image file format: <b>application/image</b>.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.ImageSaveOptions.PageIndex">
      <summary>
            Gets or sets the 0-based index of the first page to save. Default is 0.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.ImageSaveOptions.PageCount">
      <summary>
            Gets or sets the number of pages to save. Set PageCount = 0 for select all pages after PageIndex. Default value: 0.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.ImageSaveOptions.SelectedPages">
      <summary>
            Gets or sets a custom page 0-based index set for save.    
            Setting <see cref="P:SautinSoft.Document.ImageSaveOptions.PageIndex" /> or 
            <see cref="P:SautinSoft.Document.ImageSaveOptions.PageCount" /> properties are overrides 
            <see cref="P:SautinSoft.Document.ImageSaveOptions.SelectedPages" />.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.ImageSaveOptions.ImageFormat">
      <summary>
            Gets and sets the desired image format: Jpeg, PNG, Bitmap, TIFF etc.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.ImageSaveOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.ImageSaveOptions" /> class.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.OCREventArgs">
      <summary>
            Provides data for the <see cref="!:SautinSoft.Document.PdfLoadOptions.OCR" /> event.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.OCREventArgs.InputImage">
      <summary>
            Gets the input image data.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.OCREventArgs.OutputPdf">
      <summary>
            Gets or sets output Pdf document.
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "T:SautinSoft.Document.Pdf.Reader.CFFFont.Font" -->
    <!-- Badly formed XML comment ignored for member "T:SautinSoft.Document.Pdf.Reader.PdfArray" -->
    <!-- Badly formed XML comment ignored for member "M:SautinSoft.Document.Pdf.Reader.PdfDictionary.Get(SautinSoft.Document.Pdf.Reader.PdfName)" -->
    <!-- Badly formed XML comment ignored for member "M:SautinSoft.Document.Pdf.Reader.PdfEncodings.ConvertToBytes(System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:SautinSoft.Document.Pdf.Reader.PdfEncodings.ConvertToBytes(System.Char,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:SautinSoft.Document.Pdf.Reader.PdfEncodings.ConvertCmap(System.String,System.Byte[])" -->
    <!-- Badly formed XML comment ignored for member "M:SautinSoft.Document.Pdf.Reader.PdfEncodings.ConvertCmap(System.String,System.Byte[],System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:SautinSoft.Document.Pdf.Reader.PdfName.CompareTo(SautinSoft.Document.Pdf.Reader.PdfName)" -->
    <!-- Badly formed XML comment ignored for member "M:SautinSoft.Document.Pdf.Reader.PdfNull.#ctor" -->
    <!-- Badly formed XML comment ignored for member "T:SautinSoft.Document.Pdf.Reader.PdfNumber" -->
    <!-- Badly formed XML comment ignored for member "P:SautinSoft.Document.Pdf.Reader.Vector.Length" -->
    <!-- Badly formed XML comment ignored for member "P:SautinSoft.Document.Pdf.Reader.Vector.LengthSquared" -->
    <member name="T:SautinSoft.Document.Revision">
      <summary>
            Represents a revision (tracked change).
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Revision.RevisionType">
      <summary>
            Gets the type of this revision.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Revision.Author">
      <summary>
            Gets the author of this revision. 
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Revision.DateTime">
      <summary>
            Gets the date/time of this revision.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Revision.ParentElement">
      <summary>
            Gets the parent element (owner) of this revision. 
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Revision.Group">
      <summary>
            Gets the revision group. Returns null if the revision does not belong to any group.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.Revision.Accept">
      <summary>
            Accepts this revision.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.Revision.Reject">
      <summary>
            Rejects this revision.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.RevisionCollection">
      <summary>
            Represents a collection of <see cref="T:SautinSoft.Document.Revision" />s.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.RevisionCollection.Count">
      <summary>
            Gets the number of <see cref="T:SautinSoft.Document.Revision" />s contained 
            in the <see cref="T:SautinSoft.Document.RevisionCollection" />.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.RevisionCollection.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.Revision" /> at the specified index.
            </summary>
      <param name="index">The zero-based index of the revision to get.</param>
      <returns>
            The revision at the specified index.
            </returns>
    </member>
    <member name="P:SautinSoft.Document.RevisionCollection.Groups">
      <summary>
            Gets a collection of revision groups.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.RevisionCollection.GetEnumerator">
      <summary>
            Gets an enumerator that iterates through the collection.
            </summary>
      <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:SautinSoft.Document.RevisionCollection.AcceptAll">
      <summary>
            Accepts all revisions in this collection.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.RevisionCollection.RejectAll">
      <summary>
            Rejects all revisions in this collection.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.RevisionGroup">
      <summary>
            Represents a group of sequential <see cref="T:SautinSoft.Document.Revision" />s.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.RevisionGroup.RevisionType">
      <summary>
            Gets the type of revisions included in this group.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.RevisionGroup.Author">
      <summary>
            Gets the author of this revision group. 
            </summary>
    </member>
    <member name="P:SautinSoft.Document.RevisionGroup.Text">
      <summary>
            Gets inserted/deleted/moved text.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.RevisionGroupCollection">
      <summary>
            Represents a collection of <see cref="T:SautinSoft.Document.RevisionGroup" />s.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.RevisionGroupCollection.Count">
      <summary>
            Gets the number of <see cref="T:SautinSoft.Document.RevisionGroup" />s contained 
            in the <see cref="T:SautinSoft.Document.RevisionGroupCollection" />.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.RevisionGroupCollection.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.RevisionGroup" /> at the specified index.
            </summary>
      <param name="index">The zero-based index of the revision to get.</param>
      <returns>
            The revision at the specified index.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.RevisionGroupCollection.GetEnumerator">
      <summary>
            Gets an enumerator that iterates through the collection.
            </summary>
      <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="T:SautinSoft.Document.TextFrameFormat">
      <summary>
            Represents frame related formatting for a paragraph.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.TextFrameFormat.Size">
      <summary>
            Gets or sets the size of the frame.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.TextFrameFormat.HeightRule">
      <summary>
            Gets or sets the rule for determining the height of the frame.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.TextFrameFormat.DistanceFromText">
      <summary>
            Gets or sets the distance (in points) between the document text and frame.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.TextFrameFormat.HorizontalPosition">
      <summary>
            Gets or sets the horizontal position.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.TextFrameFormat.VerticalPosition">
      <summary>
            Gets or sets the vertical position.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.TextFrameFormat.DropCapPosition">
      <summary>
            Gets or sets the position for a drop cap text.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.TextFrameFormat.LinesToDrop">
      <summary>
            Gets or sets the number of lines of the paragraph text used to calculate the drop cap height.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.TextFrameFormat.IsFrame">
      <summary>
            Gets a value indicating whether parent <c>Paragraph</c> is a text frame.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.TextFrameFormat.ClearFormatting">
      <summary>
            Clears the formatting.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.Note">
      <summary>
            Represents a footnote or an endnote in the document.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\05. Text\13. Footnotes and Endnotes\Sample.cs" title="Create a document with a footnote in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\05. Text\13. Footnotes and Endnotes\Sample.vb" title="Create a document with a footnote in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Note.ElementType">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.ElementType" /> of this element instance.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\05. Text\13. Footnotes and Endnotes\Sample.cs" title="Create a document with a footnote in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\05. Text\13. Footnotes and Endnotes\Sample.vb" title="Create a document with a footnote in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Note.NoteType">
      <summary>
            Gets the note type.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\05. Text\13. Footnotes and Endnotes\Sample.cs" title="Create a document with a footnote in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\05. Text\13. Footnotes and Endnotes\Sample.vb" title="Create a document with a footnote in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Note.Blocks">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.Note">Note</see>'s blocks.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Note.CharacterFormat">
      <summary>
            Gets or sets the note mark character format.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\05. Text\13. Footnotes and Endnotes\Sample.cs" title="Create a document with a footnote in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\05. Text\13. Footnotes and Endnotes\Sample.vb" title="Create a document with a footnote in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Note.CustomMark">
      <summary>
            Gets or sets the custom mark.
            </summary>
      <remarks>
            If not null or empty, custom mark will be used as a note mark instead of automatically
            generated value determined by <see cref="P:SautinSoft.Document.NoteSettings.NumberStyle">NumberStyle</see>.
            </remarks>
    </member>
    <member name="M:SautinSoft.Document.Note.#ctor(SautinSoft.Document.DocumentCore,SautinSoft.Document.NoteType,SautinSoft.Document.Block[])">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Note">Note</see> class
            with specified note type and specified <see cref="T:SautinSoft.Document.Block">blocks</see>.
            </summary>
      <param name="document">The owner document.</param>
      <param name="noteType">The note type.</param>
      <param name="items">The <see cref="T:SautinSoft.Document.Note">Note</see> content.</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\05. Text\13. Footnotes and Endnotes\Sample.cs" title="Create a document with a footnote in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\05. Text\13. Footnotes and Endnotes\Sample.vb" title="Create a document with a footnote in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Note.#ctor(SautinSoft.Document.DocumentCore,SautinSoft.Document.NoteType,System.Collections.Generic.IEnumerable{SautinSoft.Document.Block})">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Note">Note</see> class
            with specified note type and specified <see cref="T:SautinSoft.Document.Block">blocks</see>.
            </summary>
      <param name="document">The owner document.</param>
      <param name="noteType">The note type.</param>
      <param name="items">The <see cref="T:SautinSoft.Document.Note">Note</see> content.</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\05. Text\13. Footnotes and Endnotes\Sample.cs" title="Create a document with a footnote in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\05. Text\13. Footnotes and Endnotes\Sample.vb" title="Create a document with a footnote in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Note.#ctor(SautinSoft.Document.DocumentCore,SautinSoft.Document.NoteType,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Note">Note</see> class
            with specified note type and specified text.
            </summary>
      <param name="document">The owner document.</param>
      <param name="noteType">The note type.</param>
      <param name="text">The text content for this <see cref="T:SautinSoft.Document.Note">Note</see> instance.</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\05. Text\13. Footnotes and Endnotes\Sample.cs" title="Create a document with a footnote in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\05. Text\13. Footnotes and Endnotes\Sample.vb" title="Create a document with a footnote in VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.NoteSettings">
      <summary>
            Represents the footnote or endnote options of a 
            <see cref="T:SautinSoft.Document.DocumentCore">DocumentCore</see> or 
            <see cref="T:SautinSoft.Document.Section">Section</see>.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.NoteSettings.ColumnCount">
      <summary>
            Gets or sets the number of columns in the note rendering area.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.NoteSettings.NoteLocation">
      <summary>
            Gets or sets the note rendering location.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.NoteSettings.NoteNumbering">
      <summary>
            Gets or sets the note numbering mode.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.NoteSettings.NumberStyle">
      <summary>
            Gets or sets the note mark number style.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.NoteSettings.StartAt">
      <summary>
            Gets or sets the note mark start number.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.PdfEncryptionDetails">
      <summary>
            Contains details for encrypting and access permissions for a PDF document.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\07. Document Properties\05. Secure a Document by password\Sample.cs" title="Create and secure a PDF document by password. Also set the permissions for the document using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\07. Document Properties\05. Secure a Document by password\Sample.vb" title="Create and secure a PDF document by password. Also set the permissions for the document using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.PdfEncryptionDetails.EncryptionAlgorithm">
      <summary>
            Specifies the encryption algorithm to use.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\07. Document Properties\05. Secure a Document by password\Sample.cs" title="Create and secure a PDF document by password. Also set the permissions for the document using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\07. Document Properties\05. Secure a Document by password\Sample.vb" title="Create and secure a PDF document by password. Also set the permissions for the document using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.PdfEncryptionDetails.OwnerPassword">
      <summary>
            Specifies the owner password for the encrypted PDF document.
            </summary>
      <remarks>
        <para>
            The owner password allows the user to open an encrypted PDF document without any
            access restrictions specified in <see cref="P:SautinSoft.Document.PdfEncryptionDetails.Permissions" />.
            </para>
        <para>
            The owner password cannot be the same as the user password. If you don't specify an 
            owner password, then the system will generate a random password when generating the PDF document.
            </para>
      </remarks>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\07. Document Properties\05. Secure a Document by password\Sample.cs" title="Create and secure a PDF document by password. Also set the permissions for the document using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\07. Document Properties\05. Secure a Document by password\Sample.vb" title="Create and secure a PDF document by password. Also set the permissions for the document using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.PdfEncryptionDetails.UserPassword">
      <summary>
            Specifies the user password required for opening the encrypted PDF document.
            </summary>
      <remarks>
        <para>
            The user password will be required to open an encrypted PDF document for viewing.
            The permissions specified in <see cref="P:SautinSoft.Document.PdfEncryptionDetails.Permissions" />
            will be enforced by the reader software.
            </para>
        <para>
            The user password can be null or empty string, in this case no password will be
            required from the user when opening the PDF document. The user password cannot be
            the same as the owner password.
            </para>
      </remarks>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\07. Document Properties\05. Secure a Document by password\Sample.cs" title="Create and secure a PDF document by password. Also set the permissions for the document using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\07. Document Properties\05. Secure a Document by password\Sample.vb" title="Create and secure a PDF document by password. Also set the permissions for the document using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.PdfEncryptionDetails.Permissions">
      <summary>
            Specifies the operations that are allowed to a user on an encrypted PDF document. 
            The default value is <see cref="F:SautinSoft.Document.PdfPermissions.DisallowAll" />.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\07. Document Properties\05. Secure a Document by password\Sample.cs" title="Create and secure a PDF document by password. Also set the permissions for the document using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\07. Document Properties\05. Secure a Document by password\Sample.vb" title="Create and secure a PDF document by password. Also set the permissions for the document using VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.PdfDigitalSignatureDetails">
      <summary>
            Represents a class that stores details for signing a document with a digital signature.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\07. Document Properties\04. Digital Signature\Sample.cs" title="Generate PDF document with the digital signature using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\07. Document Properties\04. Digital Signature\Sample.vb" title="Generate PDF document with the digital signature using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.PdfDigitalSignatureDetails.CertificateBytes">
      <summary>
            Gets or sets the byte array that contains data from an X.509 certificate.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.PdfDigitalSignatureDetails.CertificatePassword">
      <summary>
            Gets or sets the password required to access the X.509 certificate data.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\07. Document Properties\04. Digital Signature\Sample.cs" title="Generate PDF document with the digital signature using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\07. Document Properties\04. Digital Signature\Sample.vb" title="Generate PDF document with the digital signature using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.PdfDigitalSignatureDetails.CertificatePath">
      <summary>
            Gets or sets the file path to the X.509 certificate.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\07. Document Properties\04. Digital Signature\Sample.cs" title="Generate PDF document with the digital signature using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\07. Document Properties\04. Digital Signature\Sample.vb" title="Generate PDF document with the digital signature using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.PdfDigitalSignatureDetails.ContactInfo">
      <summary>
            Gets or sets the contact information provided by the signer to enable a recipient 
            to contact the signer to verify the signature.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\07. Document Properties\04. Digital Signature\Sample.cs" title="Generate PDF document with the digital signature using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\07. Document Properties\04. Digital Signature\Sample.vb" title="Generate PDF document with the digital signature using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.PdfDigitalSignatureDetails.Location">
      <summary>
            Gets or sets the CPU host name or physical location of the signing.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\07. Document Properties\04. Digital Signature\Sample.cs" title="Generate PDF document with the digital signature using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\07. Document Properties\04. Digital Signature\Sample.vb" title="Generate PDF document with the digital signature using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.PdfDigitalSignatureDetails.Reason">
      <summary>
            Gets or sets the reason for the signing.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\07. Document Properties\04. Digital Signature\Sample.cs" title="Generate PDF document with the digital signature using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\07. Document Properties\04. Digital Signature\Sample.vb" title="Generate PDF document with the digital signature using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.PdfDigitalSignatureDetails.Signature">
      <summary>
            Gets or sets the signature.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\07. Document Properties\04. Digital Signature\Sample.cs" title="Generate PDF document with the digital signature using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\07. Document Properties\04. Digital Signature\Sample.vb" title="Generate PDF document with the digital signature using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.PdfDigitalSignatureDetails.SignatureLine">
      <summary>
            Gets or sets the signature line (anchor).
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\07. Document Properties\04. Digital Signature\Sample.cs" title="Generate PDF document with the digital signature using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\07. Document Properties\04. Digital Signature\Sample.vb" title="Generate PDF document with the digital signature using VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.HtmlDocumentPartSavingArgs">
      <summary>
            Provides data for the <see cref="M:SautinSoft.Document.IHtmlDocumentPartSavingCallback.PartSaving(SautinSoft.Document.HtmlDocumentPartSavingArgs)" /> event.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.HtmlDocumentPartSavingArgs.Document">
      <summary>
            Gets the document that is currently being saved.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.HtmlDocumentPartSavingArgs.PartFileName">
      <summary>
            Gets or sets the file name (without path) where the part will be saved to.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.HtmlDocumentPartSavingArgs.PartStream">
      <summary>
            Allows to specify the stream where the part will be saved to.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.HtmlDocumentPartSavingArgs.KeepPartStreamOpen">
      <summary>
            Specifies whether keep the stream open or close it after saving a part.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.HtmlFixedSaveOptions">
      <summary>
            Represents options for saving to fixed HyperText Markup Language (HTML) format.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\04. Save as\05. Save a document as HTML\Sample.cs" title="Save document as HTML (in the Fixed and Flowing modes) using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\04. Save as\05. Save a document as HTML\Sample.vb" title="Save document as HTML (in the Fixed and Flowing modes) using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.HtmlFixedSaveOptions.PageMargins">
      <summary>
            Specifies the margins around pages.
            Default value is 10 points.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.HtmlFixedSaveOptions.PageBorder">
      <summary>
            Specifies whether border around pages should be shown. 
            Default is true.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.HtmlFixedSaveOptions.PageIndex">
      <summary>
            Gets or sets the 0-based index of the first page to save. Default is 0.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.HtmlFixedSaveOptions.PageCount">
      <summary>
            Gets or sets the number of pages to save.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.HtmlFixedSaveOptions.SelectedPages">
      <summary>
            Gets or sets a custom page 0-based index set for save.    
            Setting <see cref="P:SautinSoft.Document.HtmlFixedSaveOptions.PageIndex" /> or 
            <see cref="P:SautinSoft.Document.HtmlFixedSaveOptions.PageCount" /> properties are overrides 
            <see cref="P:SautinSoft.Document.HtmlFixedSaveOptions.SelectedPages" />.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.HtmlFixedSaveOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.HtmlFixedSaveOptions" /> class.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\04. Save as\05. Save a document as HTML\Sample.cs" title="Save document as HTML (in the Fixed and Flowing modes) using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\04. Save as\05. Save a document as HTML\Sample.vb" title="Save document as HTML (in the Fixed and Flowing modes) using VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.Drawing.GroupLayout">
      <summary>
            Represents a <see cref="T:SautinSoft.Document.Drawing.Layout" /> which is used to positioning
            elements within a <see cref="T:SautinSoft.Document.Drawing.ShapeGroup" />.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\06. Pictures and Shapes\08. Shape Groups\Sample.cs" title="This sample shows how to work with shape groups using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\06. Pictures and Shapes\08. Shape Groups\Sample.vb" title="This sample shows how to work with shape groups using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Drawing.GroupLayout.Position">
      <summary>
            Gets or sets the position 
            (in units of <see cref="P:SautinSoft.Document.Drawing.ShapeGroup.ChildSize" />) relative to 
            top-left corner of parent <see cref="T:SautinSoft.Document.Drawing.ShapeGroup" />.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.GroupLayout.Size">
      <summary>
            Gets or sets the size (in units of <see cref="P:SautinSoft.Document.Drawing.ShapeGroup.ChildSize" />
            of a parent <see cref="T:SautinSoft.Document.Drawing.ShapeGroup" />).
            </summary>
    </member>
    <member name="M:SautinSoft.Document.Drawing.GroupLayout.#ctor(SautinSoft.Document.Drawing.Point,SautinSoft.Document.Drawing.Size)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Drawing.GroupLayout" /> class
            with the specified position and size of a grouped element.
            </summary>
      <param name="position">The position 
            (in units of <see cref="P:SautinSoft.Document.Drawing.ShapeGroup.ChildSize" />) relative to 
            top-left corner of parent <see cref="T:SautinSoft.Document.Drawing.ShapeGroup" />.
            </param>
      <param name="size">The size 
            (in units of <see cref="P:SautinSoft.Document.Drawing.ShapeGroup.ChildSize" /> of a parent
            <see cref="T:SautinSoft.Document.Drawing.ShapeGroup" />).
            </param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\06. Pictures and Shapes\08. Shape Groups\Sample.cs" title="This sample shows how to work with shape groups using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\06. Pictures and Shapes\08. Shape Groups\Sample.vb" title="This sample shows how to work with shape groups using VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.Drawing.InlineLayout">
      <summary>
            Represents an in-line <see cref="T:SautinSoft.Document.Drawing.Layout" /> which is used to embed 
            document element in the current line of the main content flow.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\06. Pictures and Shapes\02. Add Pictures\01. Add Pictures from files\Sample.cs" title="How to add pictures into a document in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\06. Pictures and Shapes\02. Add Pictures\01. Add Pictures from files\Sample.vb" title="How to add pictures into a document in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Drawing.InlineLayout.#ctor(SautinSoft.Document.Drawing.Size)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Drawing.InlineLayout" /> class
            with the specified size of an in-line element.
            </summary>
      <param name="size">The size (in points).</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\06. Pictures and Shapes\02. Add Pictures\01. Add Pictures from files\Sample.cs" title="How to add pictures into a document in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\06. Pictures and Shapes\02. Add Pictures\01. Add Pictures from files\Sample.vb" title="How to add pictures into a document in VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.Drawing.FloatingLayout">
      <summary>
            Represents a floating <see cref="T:SautinSoft.Document.Drawing.Layout" /> which is used to embed 
            document element in a page outside of the main content flow. 
            Main content flow is usually wrapped around embedded element.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\06. Pictures and Shapes\07. Shapes\Sample.cs" title="This sample shows how to work with shapes using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\06. Pictures and Shapes\07. Shapes\Sample.vb" title="This sample shows how to work with shapes using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Drawing.FloatingLayout.Effects">
      <summary>
            Gets or sets a distance (in points) which shall be added to each edge of the element, 
            in order to compensate for any drawing effects applied to.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.FloatingLayout.DistanceFromText">
      <summary>
            Gets or sets the distance (in points) between the document text and the element.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.FloatingLayout.AspectRatioLocked">
      <summary>
            Gets or sets a value indicating whether the shape's aspect ratio is locked.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.FloatingLayout.HorizontalPosition">
      <summary>
            Gets or sets the horizontal position.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\06. Pictures and Shapes\07. Shapes\Sample.cs" title="This sample shows how to work with shapes using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\06. Pictures and Shapes\07. Shapes\Sample.vb" title="This sample shows how to work with shapes using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Drawing.FloatingLayout.VerticalPosition">
      <summary>
            Gets or sets the vertical position.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\06. Pictures and Shapes\07. Shapes\Sample.cs" title="This sample shows how to work with shapes using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\06. Pictures and Shapes\07. Shapes\Sample.vb" title="This sample shows how to work with shapes using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Drawing.FloatingLayout.WrappingStyle">
      <summary>
            Gets or sets the setting for how text is wrapped around the floating element.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\06. Pictures and Shapes\01. Pictures and Shapes\Sample.cs" title="How to add pictures into a document using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\06. Pictures and Shapes\01. Pictures and Shapes\Sample.vb" title="How to add pictures into a document using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Drawing.FloatingLayout.WrapSide">
      <summary>
            Gets or sets the setting for how text can wrap around the floating element's sides.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.FloatingLayout.WrapPolygon">
      <summary>
            Gets or sets the wrapping polygon which shall be used to determine the extents to which text can
            wrap around the floating element.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.FloatingLayout.AllowOverlap">
      <summary>
            Gets or sets a value that specifies whether floating element can overlap other elements.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.FloatingLayout.LayoutInCell">
      <summary>
            When true, the floating element shall be positioned
            within the existing table cell, causing the cell to be resized as needed.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.FloatingLayout.ZOrder">
      <summary>
            Gets or sets the z-order of the floating element.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.Drawing.FloatingLayout.#ctor(SautinSoft.Document.HorizontalPosition,SautinSoft.Document.VerticalPosition,SautinSoft.Document.Drawing.Size)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Drawing.FloatingLayout" /> class
            with the specified horizontal position, vertical position and size of a floating element.
            </summary>
      <param name="horizontalPosition">The horizontal position.</param>
      <param name="verticalPosition">The vertical position.</param>
      <param name="size">The size (in points).</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\06. Pictures and Shapes\07. Shapes\Sample.cs" title="This sample shows how to work with shapes using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\06. Pictures and Shapes\07. Shapes\Sample.vb" title="This sample shows how to work with shapes using VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.Drawing.Layout">
      <summary>
            Represents a base class for specifying element's layout properties, such as position and size.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.Layout.Size">
      <summary>
            Gets or sets the size.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\06. Pictures and Shapes\06. Get and Change Picture Size\Sample.cs" title="Get a Picture size, Change it and Save the document back using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\06. Pictures and Shapes\06. Get and Change Picture Size\Sample.vb" title="Get a Picture size, Change it and Save the document back using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Drawing.Layout.Inline(SautinSoft.Document.Drawing.Size)">
      <summary>
            Creates a layout used when element should be embedded in-line with the rest of the content.
            </summary>
      <param name="size">The size (in points).</param>
      <returns>
            A new instance of an <see cref="T:SautinSoft.Document.Drawing.InlineLayout" /> type which 
            contains all in-line embedded element's layout-related properties.
            </returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\06. Pictures and Shapes\02. Add Pictures\01. Add Pictures from files\Sample.cs" title="How to add pictures into a document in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\06. Pictures and Shapes\02. Add Pictures\01. Add Pictures from files\Sample.vb" title="How to add pictures into a document in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Drawing.Layout.Floating(SautinSoft.Document.HorizontalPosition,SautinSoft.Document.VerticalPosition,SautinSoft.Document.Drawing.Size)">
      <summary>
            Creates a layout used when element should be floating in a document page and rest of the
            page content should wrap around it.
            </summary>
      <param name="horizontalPosition">The horizontal position.</param>
      <param name="verticalPosition">The vertical position.</param>
      <param name="size">The size (in points).</param>
      <returns>
            A new instance of a <see cref="T:SautinSoft.Document.Drawing.FloatingLayout" /> type which
            contains all floating element's layout-related properties.
            </returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\06. Pictures and Shapes\02. Add Pictures\01. Add Pictures from files\Sample.cs" title="How to add pictures into a document in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\06. Pictures and Shapes\02. Add Pictures\01. Add Pictures from files\Sample.vb" title="How to add pictures into a document in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Drawing.Layout.Group(SautinSoft.Document.Drawing.Point,SautinSoft.Document.Drawing.Size)">
      <summary>
            Creates a layout used when element should be within a group.
            </summary>
      <param name="position">The position 
            (in units of <see cref="P:SautinSoft.Document.Drawing.ShapeGroup.ChildSize" />) relative to 
            top-left corner of parent <see cref="T:SautinSoft.Document.Drawing.ShapeGroup" />.
            </param>
      <param name="size">The size 
            (in units of <see cref="P:SautinSoft.Document.Drawing.ShapeGroup.ChildSize" /> of a parent
            <see cref="T:SautinSoft.Document.Drawing.ShapeGroup" />).
            </param>
      <returns>
            A new instance of an <see cref="T:SautinSoft.Document.Drawing.GroupLayout" /> type which 
            contains all grouped element's layout-related properties.
            </returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\06. Pictures and Shapes\08. Shape Groups\Sample.cs" title="This sample shows how to work with shape groups using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\06. Pictures and Shapes\08. Shape Groups\Sample.vb" title="This sample shows how to work with shape groups using VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.Drawing.ShapeCollection">
      <summary>
            Represents a collection of <see cref="T:SautinSoft.Document.Drawing.ShapeBase" /> derived elements.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.Drawing.ImageData">
      <summary>
            Provides an image data for <see cref="T:SautinSoft.Document.Drawing.Picture" /> or 
            <see cref="T:SautinSoft.Document.Drawing.PictureFillBrush" />.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\06. Pictures and Shapes\05. Extract Pictures\Sample.cs" title="Extract all pictures from document (PDF, DOCX, RTF, HTML) in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\06. Pictures and Shapes\05. Extract Pictures\Sample.vb" title="Extract all pictures from document (PDF, DOCX, RTF, HTML) in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Drawing.ImageData.Format">
      <summary>
            Gets the image file format.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.ImageData.Source">
      <summary>
            Gets the path and name of the source file.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.ImageData.IsLink">
      <summary>
            Returns true if the image is linked to source file.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.Drawing.ImageData.GetStream">
      <summary>
            Gets the stream that contains the image.
            </summary>
      <returns>A <see cref="T:System.IO.MemoryStream" /> object containing the image.</returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\06. Pictures and Shapes\05. Extract Pictures\Sample.cs" title="Extract all pictures from document (PDF, DOCX, RTF, HTML) in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\06. Pictures and Shapes\05. Extract Pictures\Sample.vb" title="Extract all pictures from document (PDF, DOCX, RTF, HTML) in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Drawing.ImageData.ImageBytes">
      <summary>
            Gets the byte array that contains the image.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.ImageData.FillMode">
      <summary>
            Gets or sets picture fill mode.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.Drawing.PictureFillBrush">
      <summary>
            Represents a brush which fills an area with a picture.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.PictureFillBrush.IsEmpty">
      <summary>
            Gets a value indicating whether the parent shape is filled.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.PictureFillBrush.ImageData">
      <summary>
            Gets an image data.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.Drawing.Brush">
      <summary>
            Represents a type which describes how the area is painted or filled.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\06. Pictures and Shapes\01. Pictures and Shapes\Sample.cs" title="Creates a new document with shape containing a text and picture using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\06. Pictures and Shapes\01. Pictures and Shapes\Sample.vb" title="Creates a new document with shape containing a text and picture using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Drawing.Brush.IsEmpty">
      <summary>
            Gets a value indicating whether the parent shape is filled.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.Drawing.Brush.SetEmpty">
      <summary>
            Sets an empty fill on the parent shape (shape won't be filled).
            </summary>
      <returns>
            A brush which specifies that no fill will be applied to the parent shape.
            </returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\06. Pictures and Shapes\01. Pictures and Shapes\Sample.cs" title="Creates a new document with shape containing a text and picture using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\06. Pictures and Shapes\01. Pictures and Shapes\Sample.vb" title="Creates a new document with shape containing a text and picture using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Drawing.Brush.SetSolid(SautinSoft.Document.Color)">
      <summary>
            Sets a solid color fill on the parent shape.
            </summary>
      <param name="color">The color to apply to the fill.</param>
      <returns>A brush which specifies a solid color fill which will be applied to the parent shape.</returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\06. Pictures and Shapes\01. Pictures and Shapes\Sample.cs" title="Creates a new document with shape containing a text and picture using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\06. Pictures and Shapes\01. Pictures and Shapes\Sample.vb" title="Creates a new document with shape containing a text and picture using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Drawing.Brush.SetPicture(System.IO.Stream,SautinSoft.Document.Drawing.PictureFormat)">
      <summary>
            Sets a picture fill on the parent shape.
            </summary>
      <param name="pictureStream">The picture pixel data stream.</param>
      <param name="format">The picture stream format.</param>
      <returns>
            A brush which specifies a picture fill which will be applied to the parent shape.
            </returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\06. Pictures and Shapes\09. Geometry\Sample.cs" title="This sample shows how to work with shapes and geometry using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\06. Pictures and Shapes\09. Geometry\Sample.vb" title="This sample shows how to work with shapes and geometry using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Drawing.Brush.SetPicture(System.String)">
      <summary>
            Sets a picture fill on the parent shape.
            </summary>
      <param name="picturePath">The file path to the image.</param>
      <returns>
            A brush which specifies a picture fill which will be applied to the parent shape.
            </returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\06. Pictures and Shapes\09. Geometry\Sample.cs" title="This sample shows how to work with shapes and geometry using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\06. Pictures and Shapes\09. Geometry\Sample.vb" title="This sample shows how to work with shapes and geometry using VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.Drawing.Size">
      <summary>
            A structure used to describe the size of an object.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.Size.Height">
      <summary>
            Gets the height in points.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.Size.Width">
      <summary>
            Gets the width in points.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.Drawing.Size.Equals(SautinSoft.Document.Drawing.Size)">
      <summary>
            Determines whether the <i>other</i> <see cref="T:SautinSoft.Document.Drawing.Size" /> is equal 
            to this <see cref="T:SautinSoft.Document.Drawing.Size" /> instance.
            </summary>
      <param name="other">The other size to compare with this size instance.</param>
      <returns>
        <see langword="true" /> if the <i>other</i> <see cref="T:SautinSoft.Document.Drawing.Size" /> is 
            equal to this <see cref="T:SautinSoft.Document.Drawing.Size" /> instance; 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Drawing.Size.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this 
            <see cref="T:SautinSoft.Document.Drawing.Size" /> instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this size instance.</param>
      <returns>
        <see langword="true" /> if the specified <see cref="T:System.Object" /> is a <see cref="T:SautinSoft.Document.Drawing.Size" /> and is 
            equal to this <see cref="T:SautinSoft.Document.Drawing.Size" /> instance;
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Drawing.Size.GetHashCode">
      <summary>
            Returns a hash code for this <see cref="T:SautinSoft.Document.Drawing.Size" /> instance.
            </summary>
      <returns>
            An integer value that specifies a hash value for this
            <see cref="T:SautinSoft.Document.Drawing.Size" /> instance.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Drawing.Size.ToString">
      <summary>
            Returns the value as string, in such format: W:65.754; H:120.33233.
            </summary>
      <returns>The <see cref="T:SautinSoft.Document.Drawing.Size" /> value as string.</returns>
    </member>
    <member name="M:SautinSoft.Document.Drawing.Size.op_Equality(SautinSoft.Document.Drawing.Size,SautinSoft.Document.Drawing.Size)">
      <summary>
            Determines whether <i>first</i> and <i>second</i> <see cref="T:SautinSoft.Document.Drawing.Size" />s are equal.
            </summary>
      <param name="first">The first size.</param>
      <param name="second">The second size.</param>
      <returns>
        <see langword="true" /> if <i>first</i> and <i>second</i> sizes are equal; 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Drawing.Size.op_Inequality(SautinSoft.Document.Drawing.Size,SautinSoft.Document.Drawing.Size)">
      <summary>
            Determines whether <i>first</i> and <i>second</i> <see cref="T:SautinSoft.Document.Drawing.Size" />s are not equal.
            </summary>
      <param name="first">The first size.</param>
      <param name="second">The second size.</param>
      <returns>
        <see langword="true" /> if <i>first</i> and <i>second</i> sizes are not equal; 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Drawing.Size.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Drawing.Size" /> struct.
            </summary>
      <param name="width">The width in points.</param>
      <param name="height">The height in points.</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\06. Pictures and Shapes\06. Get and Change Picture Size\Sample.cs" title="Get a Picture size, Change it and Save the document back using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\06. Pictures and Shapes\06. Get and Change Picture Size\Sample.vb" title="Get a Picture size, Change it and Save the document back using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Drawing.Size.#ctor(System.Double,System.Double,SautinSoft.Document.LengthUnit)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Drawing.Size" /> struct.
            </summary>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
      <param name="unit">The measurement unit for <i>width</i> and <i>height</i>.</param>
    </member>
    <member name="T:SautinSoft.Document.Drawing.Point">
      <summary>
            Represents an ordered pair of x- and y-coordinates that defines a point in 
            a two-dimensional plane.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.Point.X">
      <summary>
            Gets the x-coordinate in points.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.Point.Y">
      <summary>
            Gets the y-coordinate in points.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.Drawing.Point.Equals(SautinSoft.Document.Drawing.Point)">
      <summary>
            Determines whether the <i>other</i> <see cref="T:SautinSoft.Document.Drawing.Point" /> is equal 
            to this <see cref="T:SautinSoft.Document.Drawing.Point" /> instance.
            </summary>
      <param name="other">The other point to compare with this point instance.</param>
      <returns>
        <see langword="true" /> if the <i>other</i> <see cref="T:SautinSoft.Document.Drawing.Point" /> is 
            equal to this <see cref="T:SautinSoft.Document.Drawing.Point" /> instance; 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Drawing.Point.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this 
            <see cref="T:SautinSoft.Document.Drawing.Point" /> instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this point instance.</param>
      <returns>
        <see langword="true" /> if the specified <see cref="T:System.Object" /> is a <see cref="T:SautinSoft.Document.Drawing.Point" /> and is 
            equal to this <see cref="T:SautinSoft.Document.Drawing.Point" /> instance;
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Drawing.Point.GetHashCode">
      <summary>
            Returns a hash code for this <see cref="T:SautinSoft.Document.Drawing.Point" /> instance.
            </summary>
      <returns>
            An integer value that specifies a hash value for this
            <see cref="T:SautinSoft.Document.Drawing.Point" /> instance.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Drawing.Point.ToString">
      <summary>
            Returns the value as string, in such format: X:4.4347; Y:105.343023.
            </summary>
      <returns>The <see cref="T:SautinSoft.Document.Drawing.Point" /> value as string.</returns>
    </member>
    <member name="M:SautinSoft.Document.Drawing.Point.op_Equality(SautinSoft.Document.Drawing.Point,SautinSoft.Document.Drawing.Point)">
      <summary>
            Determines whether <i>first</i> and <i>second</i> <see cref="T:SautinSoft.Document.Drawing.Point" />s are equal.
            </summary>
      <param name="first">The first point.</param>
      <param name="second">The second point.</param>
      <returns>
        <see langword="true" /> if <i>first</i> and <i>second</i> points are equal; 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Drawing.Point.op_Inequality(SautinSoft.Document.Drawing.Point,SautinSoft.Document.Drawing.Point)">
      <summary>
            Determines whether <i>first</i> and <i>second</i> <see cref="T:SautinSoft.Document.Drawing.Point" />s are not equal.
            </summary>
      <param name="first">The first point.</param>
      <param name="second">The second point.</param>
      <returns>
        <see langword="true" /> if <i>first</i> and <i>second</i> points are not equal; 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Drawing.Point.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Drawing.Point" /> struct.
            </summary>
      <param name="x">X-coordinate in points.</param>
      <param name="y">Y-coordinate in points.</param>
    </member>
    <member name="M:SautinSoft.Document.Drawing.Point.#ctor(System.Double,System.Double,SautinSoft.Document.LengthUnit)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Drawing.Point" /> struct.
            </summary>
      <param name="x">X-coordinate.</param>
      <param name="y">Y-coordinate.</param>
      <param name="unit">The measurement unit for <i>x</i> and <i>y</i>.</param>
    </member>
    <member name="T:SautinSoft.Document.Drawing.Rectangle">
      <summary>
            Stores a set of four values that represent the location and size of a rectangle.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.Rectangle.Left">
      <summary>
            Gets the x-coordinate in points of the left edge of this <see cref="T:SautinSoft.Document.Drawing.Rectangle" /> structure.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.Rectangle.Right">
      <summary>
            Gets the x-coordinate in points that is the sum of <see cref="P:SautinSoft.Document.Drawing.Rectangle.Left" /> 
            and <see cref="P:SautinSoft.Document.Drawing.Rectangle.Width" /> property
            values of this <see cref="T:SautinSoft.Document.Drawing.Rectangle" /> structure.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.Rectangle.Top">
      <summary>
            Gets the y-coordinate in points of the top edge of this <see cref="T:SautinSoft.Document.Drawing.Rectangle" /> structure.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.Rectangle.Bottom">
      <summary>
            Gets the y-coordinate in points that is the sum of the <see cref="P:SautinSoft.Document.Drawing.Rectangle.Top" /> 
            and <see cref="P:SautinSoft.Document.Drawing.Rectangle.Height" /> property 
            values of this <see cref="T:SautinSoft.Document.Drawing.Rectangle" /> structure.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.Rectangle.Width">
      <summary>
            Gets or sets the width in points of this <see cref="T:SautinSoft.Document.Drawing.Rectangle" /> structure.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.Rectangle.Height">
      <summary>
            Gets or sets the height in points of this <see cref="T:SautinSoft.Document.Drawing.Rectangle" /> structure.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.Rectangle.Location">
      <summary>
            Gets coordinates of the upper-left corner of this <see cref="T:SautinSoft.Document.Drawing.Rectangle" /> structure.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.Drawing.Rectangle.Equals(SautinSoft.Document.Drawing.Rectangle)">
      <summary>
            Determines whether the <i>other</i> <see cref="T:SautinSoft.Document.Drawing.Rectangle" /> is equal 
            to this <see cref="T:SautinSoft.Document.Drawing.Rectangle" /> instance.
            </summary>
      <param name="other">The other rectangle to compare with this rectangle instance.</param>
      <returns>
        <see langword="true" /> if the <i>other</i> <see cref="T:SautinSoft.Document.Drawing.Rectangle" /> is 
            equal to this <see cref="T:SautinSoft.Document.Drawing.Rectangle" /> instance; 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Drawing.Rectangle.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this 
            <see cref="T:SautinSoft.Document.Drawing.Rectangle" /> instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this rectangle instance.</param>
      <returns>
        <see langword="true" /> if the specified <see cref="T:System.Object" /> is a <see cref="T:SautinSoft.Document.Drawing.Rectangle" /> and is 
            equal to this <see cref="T:SautinSoft.Document.Drawing.Rectangle" /> instance;
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Drawing.Rectangle.GetHashCode">
      <summary>
            Returns a hash code for this <see cref="T:SautinSoft.Document.Drawing.Rectangle" /> instance.
            </summary>
      <returns>
            An integer value that specifies a hash value for this
            <see cref="T:SautinSoft.Document.Drawing.Rectangle" /> instance.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Drawing.Rectangle.ToString">
      <summary>
            Returns the value as string, in such format: L:23.232; T:0.47; W:22.553; H:99.23243.
            </summary>
      <returns>The <see cref="T:SautinSoft.Document.Drawing.Rectangle" /> value as string.</returns>
    </member>
    <member name="M:SautinSoft.Document.Drawing.Rectangle.op_Equality(SautinSoft.Document.Drawing.Rectangle,SautinSoft.Document.Drawing.Rectangle)">
      <summary>
            Determines whether <i>first</i> and <i>second</i> <see cref="T:SautinSoft.Document.Drawing.Rectangle" />s are equal.
            </summary>
      <param name="first">The first rectangle.</param>
      <param name="second">The second rectangle.</param>
      <returns>
        <see langword="true" /> if <i>first</i> and <i>second</i> rectangles are equal; 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Drawing.Rectangle.op_Inequality(SautinSoft.Document.Drawing.Rectangle,SautinSoft.Document.Drawing.Rectangle)">
      <summary>
            Determines whether <i>first</i> and <i>second</i> <see cref="T:SautinSoft.Document.Drawing.Rectangle" />s are not equal.
            </summary>
      <param name="first">The first rectangle.</param>
      <param name="second">The second rectangle.</param>
      <returns>
        <see langword="true" /> if <i>first</i> and <i>second</i> rectangles are not equal; 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Drawing.Rectangle.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Drawing.Rectangle" /> struct.
            </summary>
      <param name="left">X-coordinate in points.</param>
      <param name="top">Y-coordinate in points.</param>
      <param name="width">The width in points.</param>
      <param name="height">The height in points.</param>
    </member>
    <member name="M:SautinSoft.Document.Drawing.Rectangle.#ctor(System.Double,System.Double,System.Double,System.Double,SautinSoft.Document.LengthUnit)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Drawing.Rectangle" /> struct.
            </summary>
      <param name="left">X-coordinate.</param>
      <param name="top">Y-coordinate.</param>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
      <param name="unit">The measurement unit for <i>left</i>, <i>top</i>, <i>width</i> and <i>height</i>.</param>
    </member>
    <member name="T:SautinSoft.Document.Drawing.ShapeBase">
      <summary>
            Base class for all drawing objects, such as a <see cref="T:SautinSoft.Document.Drawing.Shape" />, 
            <see cref="T:SautinSoft.Document.Drawing.ShapeGroup" /> or <see cref="T:SautinSoft.Document.Drawing.Picture" />.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.ShapeBase.CharacterFormat">
      <summary>
            Gets or sets the character format.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.ShapeBase.ParentGroup">
      <summary>
            Gets the parent group shape. 
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.ShapeBase.IsTopLevel">
      <summary>
            Returns true if this shape is not a child of a group shape.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.ShapeBase.Layout">
      <summary>
            Gets or sets the <see cref="T:SautinSoft.Document.Drawing.ShapeBase" /> layout (position and size).
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.ShapeBase.Rotation">
      <summary>
            Gets or sets the angle (in degrees) that a shape is rotated.
            Positive value corresponds to clockwise rotation angle.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.ShapeBase.FlipOrientation">
      <summary>
            Gets or sets the orientation of a shape.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.ShapeBase.Fill">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.Drawing.Brush" /> that specifies how the shape's interior is filled.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.Drawing.ShapeBase.Clone(System.Boolean)">
      <summary>
            Clones this element instance.
            </summary>
      <remarks>
        <para>This method serves as a copy constructor for elements. The cloned element
            has no parent, but belongs to the same document as the original element. </para>
        <para>If you want to insert this element into another document, then you should
            first import it into another document with 
            <see cref="M:SautinSoft.Document.DocumentCore.Import``1(``0,System.Boolean,System.Boolean)">Import&lt;T&gt;(T,System.Boolean,System.Boolean)</see>
            method and then insert the imported element.
            </para>
      </remarks>
      <param name="cloneDescendants">
        <see langword="True" /> to clone all descendants.</param>
      <returns>
            The cloned element.
            </returns>
    </member>
    <member name="T:SautinSoft.Document.Drawing.WrapSide">
      <summary>
            Specifies what side(s) of the shape or picture the text wraps around.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.WrapSide.Both">
      <summary>
            The document text wraps on both sides of the shape.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.WrapSide.Left">
      <summary>
            The document text wraps on the left side of the shape only. 
            There is a text free area on the right of the shape.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.WrapSide.Right">
      <summary>
            The document text wraps on the right side of the shape only. 
            There is a text free area on the left side of the shape.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.WrapSide.Largest">
      <summary>
            The document text wraps on the side of the shape that is farthest from the page margin, 
            leaving text free area on the other side of the shape.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.Drawing.WrappingStyle">
      <summary>
            Specifies how text is wrapped around a shape or picture.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\06. Pictures and Shapes\01. Pictures and Shapes\Sample.cs" title="Creates a new document with shape containing a text and picture using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\06. Pictures and Shapes\01. Pictures and Shapes\Sample.vb" title="Creates a new document with shape containing a text and picture using VB.Net">
        </code>
      </example>
    </member>
    <member name="F:SautinSoft.Document.Drawing.WrappingStyle.Square">
      <summary>
            Wraps text around all sides of the square bounding box of the shape.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.WrappingStyle.Tight">
      <summary>
            Wraps tightly around the edges of the shape, instead of wrapping around the bounding box.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.WrappingStyle.Through">
      <summary>
            Same as Tight, but wraps inside any parts of the shape that are open.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.WrappingStyle.TopAndBottom">
      <summary>
            The text stops at the top of the shape and restarts on the line below the shape.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.WrappingStyle.BehindText">
      <summary>
            No text wrapping around the shape. The shape is placed behind of text.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.WrappingStyle.InFrontOfText">
      <summary>
            No text wrapping around the shape. The shape is placed in front of text.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.Drawing.ShapeType">
      <summary>
            Specifies an shape type enumeration.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.ShapeType.Group">
      <summary>
            Group of shapes.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.ShapeType.Shape">
      <summary>
            Shape.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.ShapeType.Picture">
      <summary>
            Picture.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.Drawing.Figure">
      <summary>
            Specifies Microsoft Word figures.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\06. Pictures and Shapes\09. Geometry\Sample.cs" title="This sample shows how to work with shapes and geometry using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\06. Pictures and Shapes\09. Geometry\Sample.vb" title="This sample shows how to work with shapes and geometry using VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.Drawing.FlipOrientation">
      <summary>
            Specifies a possible values for the orientation of a shape.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.FlipOrientation.None">
      <summary>
            Coordinates are not flipped.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.FlipOrientation.Horizontal">
      <summary>
            Flip along the y-axis, reversing the x-coordinates.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.FlipOrientation.Vertical">
      <summary>
            Flip along the x-axis, reversing the y-coordinates.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.FlipOrientation.Both">
      <summary>
            Flip along both the y- and x-axis.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.Drawing.PathElementType">
      <summary>
            Specifies a possible custom geometry path element types.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.PathElementType.Close">
      <summary>
            Close shape path.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.PathElementType.MoveTo">
      <summary>
            Move path to.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.PathElementType.LineTo">
      <summary>
            Draw line to.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.PathElementType.ArcTo">
      <summary>
            Draw arc to.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.PathElementType.QuadBezierTo">
      <summary>
            Draw quadratic bezier curve to.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.PathElementType.CubicBezierTo">
      <summary>
            Draw cubic bezier curve to.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.Drawing.LineDashStyle">
      <summary>
            Specifies dash line style.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.LineDashStyle.Solid">
      <summary>
            Solid (continuous) pen.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.LineDashStyle.Dot">
      <summary>
            Dot style.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.LineDashStyle.Dash">
      <summary>
            Dash style.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.LineDashStyle.DashDot">
      <summary>
            Dash short dash.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.LineDashStyle.DashDotDot">
      <summary>
            Dash short dash short dash.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.Drawing.LineCapStyle">
      <summary>
            Specifies line cap style.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.LineCapStyle.Flat">
      <summary>
            Line ends at end point.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.LineCapStyle.Round">
      <summary>
            Rounded ends.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.LineCapStyle.Square">
      <summary>
            Square protrudes by half line width.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.Drawing.LineJoinStyle">
      <summary>
            Specifies line join style.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.LineJoinStyle.Bevel">
      <summary>
            Join edges by a straight line.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.LineJoinStyle.Miter">
      <summary>
            Extend edges until they join.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.LineJoinStyle.Round">
      <summary>
            Draw an arc between the two edges.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.Drawing.PictureFormat">
      <summary>
            Specifies the file format for a picture.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.PictureFormat.Unknown">
      <summary>
            An unknown image type or image type that cannot be directly stored inside a
            Microsoft Word document. 
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.PictureFormat.Jpeg">
      <summary>
            JPEG JFIF.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.PictureFormat.Gif">
      <summary>
            Graphics Interchange Format.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.PictureFormat.Png">
      <summary>
            Portable Network Graphics.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.PictureFormat.Tiff">
      <summary>
            Tagged Image File Format.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.PictureFormat.Emf">
      <summary>
            Windows Enhanced Metafile.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.PictureFormat.Wmf">
      <summary>
            Windows Metafile.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.PictureFormat.Bmp">
      <summary>
            Windows Bitmap.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.Drawing.PictureFillMode">
      <summary>
            Specifies a picture fill modes. 
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.PictureFillMode.Tile">
      <summary>
            Specifies that a picture's BLIP should be tiled to fill the available space. 
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.PictureFillMode.Stretch">
      <summary>
            Specifies that a picture's BLIP should be stretched to fill the target rectangle.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.Drawing.TextAnchoringType">
      <summary>
            Specifies the anchoring position of the text within the shape.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.TextAnchoringType.Top">
      <summary>
            Anchor the text at the top of the bounding rectangle.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.TextAnchoringType.Bottom">
      <summary>
            Anchor the text at the bottom of the bounding rectangle. 
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.TextAnchoringType.Center">
      <summary>
            Anchor the text at the middle of the bounding rectangle.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.TextAnchoringType.Distributed">
      <summary>
            Anchor the text so that it is distributed vertically.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.TextAnchoringType.Justified">
      <summary>
            Anchor the text so that it is justified vertically.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.Drawing.TextHorizontalOverflowType">
      <summary>
            Determines whether the text can flow out of the bounding box horizontally.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.TextHorizontalOverflowType.Overflow">
      <summary>
            When a big character does not fit into a line, allow a horizontal overflow.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.TextHorizontalOverflowType.Clip">
      <summary>
            When a big character does not fit into a line, clip it at the proper horizontal overflow.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.Drawing.TextVerticalOverflowType">
      <summary>
            Determines whether the text can flow out of the bounding box vertically.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.TextVerticalOverflowType.Overflow">
      <summary>
            Overflow the text and pay no attention to top and bottom barriers.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.TextVerticalOverflowType.Clip">
      <summary>
            Pay attention to top and bottom barriers. Provide no indication that there is text which is not visible.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.TextVerticalOverflowType.Ellipsis">
      <summary>
            Pay attention to top and bottom barriers. Use an ellipsis to denote that there is text which is not visible.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.Drawing.ShapeAutoFit">
      <summary>
            Specifies a shape auto-fit modes.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.ShapeAutoFit.NoAutoFit">
      <summary>
            No auto-fitting.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.ShapeAutoFit.FitTextToShape">
      <summary>
            Text within the shape should be normally auto-fit to the bounding box.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.ShapeAutoFit.FitShapeToText">
      <summary>
            Shape should be auto-fit to fully contain the text described within it.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.Drawing.PathFillMode">
      <summary>
            Specifies how the <see cref="T:SautinSoft.Document.Drawing.CustomPath">CustomPath</see> should be filled.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.PathFillMode.None">
      <summary>
            This specifies that the corresponding path should have no fill. 
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.PathFillMode.Normal">
      <summary>
            This specifies that the corresponding path should have a normally shaded color applied to it’s fill.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.PathFillMode.Lighten">
      <summary>
            This specifies that the corresponding path should have a lightly shaded color applied to it’s fill.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.PathFillMode.LightenLess">
      <summary>
            This specifies that the corresponding path should have a slightly lighter shaded color applied to it’s fill. 
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.PathFillMode.Darken">
      <summary>
            This specifies that the corresponding path should have a darker shaded color applied to it’s fill.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.PathFillMode.DarkenLess">
      <summary>
            This specifies that the corresponding path should have a slightly darker shaded color applied to it’s fill.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.Drawing.LineEndType">
      <summary>
            Specifies the line end decoration.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.LineEndType.None">
      <summary>
            No end.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.LineEndType.Arrow">
      <summary>
            Line arrow head.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.LineEndType.Diamond">
      <summary>
            Diamond.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.LineEndType.Oval">
      <summary>
            Oval.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.LineEndType.StealthArrow">
      <summary>
            Stealth arrow head
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Drawing.LineEndType.TriangleArrow">
      <summary>
            Triangle arrow head.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.Drawing.LineEndLength">
      <summary>
            Specifies the length of the line end decoration relative to the width of the line itself.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.Drawing.PathElement">
      <summary>
            Represents a base class for all path elements (lines and curves).
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.PathElement.ElementType">
      <summary>
            Gets a path element type.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.Drawing.PathClose">
      <summary>
            Close element.
            </summary>
      <remarks>
            Closes the current path.
            </remarks>
    </member>
    <member name="P:SautinSoft.Document.Drawing.PathClose.ElementType">
      <summary>
            Gets a path element type.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.Drawing.PathMoveTo">
      <summary>
            MoveTo element.
            </summary>
      <remarks>
            Moves the current pen position to the new specified point.
            </remarks>
    </member>
    <member name="P:SautinSoft.Document.Drawing.PathMoveTo.Point">
      <summary>
            Gets point.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.PathMoveTo.ElementType">
      <summary>
            Gets a path element type.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.Drawing.PathLineTo">
      <summary>
            LineTo element.
            </summary>
      <remarks>
            Draws a straight line from the current pen position to the new specified point.
            </remarks>
    </member>
    <member name="P:SautinSoft.Document.Drawing.PathLineTo.Point">
      <summary>
            Gets point.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.PathLineTo.ElementType">
      <summary>
            Gets a path element type.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.Drawing.PathArcTo">
      <summary>
            ArcTo element.
            </summary>
      <remarks>
            Draws an arc with the specified parameters from the current pen position.
            </remarks>
    </member>
    <member name="P:SautinSoft.Document.Drawing.PathArcTo.ArcHeightRadius">
      <summary>
            Gets arc height radius.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.PathArcTo.ArcWidthRadius">
      <summary>
            Gets arc width radius.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.PathArcTo.ArcStartAngle">
      <summary>
            Gets arc start angle.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.PathArcTo.ArcSwingAngle">
      <summary>
            Gets arc swing angle.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.PathArcTo.ElementType">
      <summary>
            Gets a path element type.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.Drawing.PathQuadBezierTo">
      <summary>
            QuadBezierTo element.
            </summary>
      <remarks>
            Draws a quadratic bezier curve along the specified points.
            </remarks>
    </member>
    <member name="P:SautinSoft.Document.Drawing.PathQuadBezierTo.ControlPoint">
      <summary>
            Gets control point.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.PathQuadBezierTo.EndPoint">
      <summary>
            Gets end point.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.PathQuadBezierTo.ElementType">
      <summary>
            Gets a path element type.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.Drawing.PathCubicBezierTo">
      <summary>
            CubicBezierTo element.
            </summary>
      <remarks>
            Draws a cubic bezier curve along the specified points.
            </remarks>
    </member>
    <member name="P:SautinSoft.Document.Drawing.PathCubicBezierTo.ControlPoint1">
      <summary>
            Gets control point 1.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.PathCubicBezierTo.ControlPoint2">
      <summary>
            Gets control point 2.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.PathCubicBezierTo.EndPoint">
      <summary>
            Gets end point.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.PathCubicBezierTo.ElementType">
      <summary>
            Gets a path element type.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.Drawing.CustomPath">
      <summary>
            Represents a series of connected lines and curves.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.CustomPath.Size">
      <summary>
            Gets path size, or maximum X and Y coordinates that should be used 
            for within the path coordinate system.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.CustomPath.FillMode">
      <summary>
            Specifies how the path should be filled.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.CustomPath.Stroke">
      <summary>
            Specifies if the corresponding path should have a path stroke shown.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.CustomPath.Count">
      <summary>
            Gets the number of elements contained in this path.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.CustomPath.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.Drawing.PathElement" /> at the specified index.
            </summary>
      <param name="index">The zero-based index of the <see cref="T:SautinSoft.Document.Drawing.PathElement" /> to get.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
    </member>
    <member name="M:SautinSoft.Document.Drawing.CustomPath.Reset">
      <summary>
            Removes all elements from this path.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.Drawing.CustomPath.ClosePath">
      <summary>
            Closes the current path.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.Drawing.CustomPath.MoveTo(SautinSoft.Document.Drawing.Point)">
      <summary>
            Moves the current pen position to the new specified <i>point</i>.
            </summary>
      <param name="point">Point.</param>
    </member>
    <member name="M:SautinSoft.Document.Drawing.CustomPath.AddLine(SautinSoft.Document.Drawing.Point)">
      <summary>
            Draws a straight line from the current pen position to the new specified <i>point</i>.
            </summary>
      <param name="point">Point.</param>
    </member>
    <member name="M:SautinSoft.Document.Drawing.CustomPath.AddArc(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Draws an arc with the specified <i>parameters</i> from the current pen position.
            </summary>
      <param name="arcHeightRadius">Arc height radius.</param>
      <param name="arcStartAngle">Arc start angle.</param>
      <param name="arcSwingAngle">Arc swing angle.</param>
      <param name="arcWidthRadius">Arc width radius.</param>
    </member>
    <member name="M:SautinSoft.Document.Drawing.CustomPath.AddQuadBezier(SautinSoft.Document.Drawing.Point,SautinSoft.Document.Drawing.Point)">
      <summary>
            Draws a quadratic bezier curve along the specified <i>points</i>.
            </summary>
      <param name="controlPoint">Control point.</param>
      <param name="endPoint">End point.</param>
    </member>
    <member name="M:SautinSoft.Document.Drawing.CustomPath.AddCubicBezier(SautinSoft.Document.Drawing.Point,SautinSoft.Document.Drawing.Point,SautinSoft.Document.Drawing.Point)">
      <summary>
            Draws a cubic bezier curve along the specified <i>points</i>.
            </summary>
      <param name="controlPoint1">Control point 1.</param>
      <param name="controlPoint2">Control point 2.</param>
      <param name="endPoint">End point.</param>
    </member>
    <member name="M:SautinSoft.Document.Drawing.CustomPath.GetEnumerator">
      <summary>
            Gets an enumerator that iterates through the path.
            </summary>
      <returns>An enumerator that can be used to iterate through the <see cref="T:SautinSoft.Document.Drawing.PathElement" /> collection.</returns>
    </member>
    <member name="T:SautinSoft.Document.Drawing.Pen">
      <summary>
            Represents a type which describes how a shape is outlined.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\06. Pictures and Shapes\01. Pictures and Shapes\Sample.cs" title="Creates a new document with shape containing a text and picture using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\06. Pictures and Shapes\01. Pictures and Shapes\Sample.vb" title="Creates a new document with shape containing a text and picture using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Drawing.Pen.Fill">
      <summary>
            Gets the fill of the outline.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.Pen.DashStyle">
      <summary>
            Gets or sets the dot and dash pattern for a stroke.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.Pen.CapStyle">
      <summary>
            Gets or sets the cap style for the end of a stroke.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.Pen.JoinStyle">
      <summary>
            Gets or sets the join style of a polyline.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.Pen.Width">
      <summary>
            Gets or sets the thickness of the stroke.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.Pen.HeadEnd">
      <summary>
            Gets or sets the decoration which will be added to the head of a line.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.Pen.HeadEndWidth">
      <summary>
            Gets or sets the line head-end width in relation to the line width.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.Pen.HeadEndLength">
      <summary>
            Gets or sets the line head-end length in relation to the line width.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.Pen.TailEnd">
      <summary>
            Gets or sets the decoration which will be added to the tail of a line.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.Pen.TailEndWidth">
      <summary>
            Gets or sets the line tail-end width in relation to the line width.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.Pen.TailEndLength">
      <summary>
            Gets or sets the line tail-end length in relation to the line width.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.Drawing.Picture">
      <summary>
            Represents a picture.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\06. Pictures and Shapes\02. Add Pictures\01. Add Pictures from files\Sample.cs" title="How to add Pictures into a document in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\06. Pictures and Shapes\02. Add Pictures\01. Add Pictures from files\Sample.vb" title="How to add Pictures into a document in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Drawing.Picture.ElementType">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.ElementType" /> of this element instance.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\06. Pictures and Shapes\05. Extract Pictures\Sample.cs" title="Extract all pictures from document (PDF, DOCX, RTF, HTML) in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\06. Pictures and Shapes\05. Extract Pictures\Sample.vb" title="Extract all pictures from document (PDF, DOCX, RTF, HTML) in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Drawing.Picture.ImageData">
      <summary>
            Gets an image data.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\06. Pictures and Shapes\05. Extract Pictures\Sample.cs" title="Extract all pictures from document (PDF, DOCX, RTF, HTML) in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\06. Pictures and Shapes\05. Extract Pictures\Sample.vb" title="Extract all pictures from document (PDF, DOCX, RTF, HTML) in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Drawing.Picture.Clone(System.Boolean)">
      <summary>
            Clones this element instance.
            </summary>
      <remarks>
        <para>This method serves as a copy constructor for elements. The cloned element
            has no parent, but belongs to the same document as the original element. </para>
        <para>If you want to insert this element into another document, then you should
            first import it into another document with 
            <see cref="M:SautinSoft.Document.DocumentCore.Import``1(``0,System.Boolean,System.Boolean)">Import&lt;T&gt;(T,System.Boolean,System.Boolean)</see>
            method and then insert the imported element.
            </para>
      </remarks>
      <param name="cloneDescendants">
        <see langword="True" /> to clone all descendants.</param>
      <returns>
            The cloned element.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Drawing.Picture.#ctor(SautinSoft.Document.DocumentCore,SautinSoft.Document.Drawing.Layout,System.IO.Stream,SautinSoft.Document.Drawing.PictureFormat)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Drawing.Picture" /> class.
            </summary>
      <param name="document">The owner document.</param>
      <param name="layout">The picture's layout (position and size).</param>
      <param name="pictureStream">The picture data stream.</param>
      <param name="format">The picture format.</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\06. Pictures and Shapes\02. Add Pictures\01. Add Pictures from files\Sample.cs" title="How to add pictures into a document in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\06. Pictures and Shapes\02. Add Pictures\01. Add Pictures from files\Sample.vb" title="How to add pictures into a document in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Drawing.Picture.#ctor(SautinSoft.Document.DocumentCore,SautinSoft.Document.Drawing.Layout,System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Drawing.Picture" /> class.
            </summary>
      <param name="document">The owner document.</param>
      <param name="layout">The picture's layout (position and size).</param>
      <param name="pictureStream">The picture data stream.</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\06. Pictures and Shapes\02. Add Pictures\01. Add Pictures from files\Sample.cs" title="How to add pictures into a document in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\06. Pictures and Shapes\02. Add Pictures\01. Add Pictures from files\Sample.vb" title="How to add pictures into a document in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Drawing.Picture.#ctor(SautinSoft.Document.DocumentCore,SautinSoft.Document.Drawing.Layout,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Drawing.Picture" /> class.
            </summary>
      <param name="document">The owner document.</param>
      <param name="layout">The picture's layout (position and size).</param>
      <param name="picturePath">The picture file path.</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\06. Pictures and Shapes\02. Add Pictures\01. Add Pictures from files\Sample.cs" title="How to add pictures into a document in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\06. Pictures and Shapes\02. Add Pictures\01. Add Pictures from files\Sample.vb" title="How to add pictures into a document in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Drawing.Picture.#ctor(SautinSoft.Document.DocumentCore,System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Drawing.Picture" /> class.
            </summary>
      <param name="document">The owner document.</param>
      <param name="pictureStream">The picture data stream.</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\06. Pictures and Shapes\02. Add Pictures\01. Add Pictures from files\Sample.cs" title="How to add pictures into a document in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\06. Pictures and Shapes\02. Add Pictures\01. Add Pictures from files\Sample.vb" title="How to add pictures into a document in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Drawing.Picture.#ctor(SautinSoft.Document.DocumentCore,System.IO.Stream,SautinSoft.Document.Drawing.PictureFormat)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Drawing.Picture" /> class.
            </summary>
      <param name="document">The owner document.</param>
      <param name="pictureStream">The picture data stream.</param>
      <param name="format">The picture format.</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\06. Pictures and Shapes\02. Add Pictures\01. Add Pictures from files\Sample.cs" title="How to add pictures into a document in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\06. Pictures and Shapes\02. Add Pictures\01. Add Pictures from files\Sample.vb" title="How to add pictures into a document in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Drawing.Picture.#ctor(SautinSoft.Document.DocumentCore,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Drawing.Picture" /> class.
            </summary>
      <param name="document">The owner document.</param>
      <param name="picturePath">The picture file path.</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\06. Pictures and Shapes\01. Pictures and Shapes\Sample.cs" title="Creates a new document with shape containing a text and picture in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\06. Pictures and Shapes\01. Pictures and Shapes\Sample.vb" title="Creates a new document with shape containing a text and picture in VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.Drawing.Shape">
      <summary>
            Represents a shape.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\06. Pictures and Shapes\07. Shapes\Sample.cs" title="How to work with Shapes in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\06. Pictures and Shapes\07. Shapes\Sample.vb" title="How to work with Shapes in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Drawing.Shape.ElementType">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.ElementType" /> of this element instance.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.Shape.Geometry">
      <summary>
            Gets a shape's geometry.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\06. Pictures and Shapes\09. Geometry\Sample.cs" title="This sample shows how to work with shapes and geometry using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\06. Pictures and Shapes\09. Geometry\Sample.vb" title="This sample shows how to work with shapes and geometry using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Drawing.Shape.Outline">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.Drawing.Pen" /> that specifies the shape's outline.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.Shape.Text">
      <summary>
            Gets a shape's text.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\06. Pictures and Shapes\07. Shapes\Sample.cs" title="This sample shows how to work with shapes using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\06. Pictures and Shapes\07. Shapes\Sample.vb" title="This sample shows how to work with shapes using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Drawing.Shape.Clone(System.Boolean)">
      <summary>
            Clones this element instance.
            </summary>
      <remarks>
        <para>This method serves as a copy constructor for elements. The cloned element
            has no parent, but belongs to the same document as the original element. </para>
        <para>If you want to insert this element into another document, then you should
            first import it into another document with 
            <see cref="M:SautinSoft.Document.DocumentCore.Import``1(``0,System.Boolean,System.Boolean)">Import&lt;T&gt;(T,System.Boolean,System.Boolean)</see>
            method and then insert the imported element.
            </para>
      </remarks>
      <param name="cloneDescendants">
        <see langword="True" /> to clone all descendants.</param>
      <returns>
            The cloned element.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Drawing.Shape.#ctor(SautinSoft.Document.DocumentCore,SautinSoft.Document.Drawing.Layout)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Drawing.Shape" /> class.
            </summary>
      <param name="document">The owner document.</param>
      <param name="layout">The shape's layout (position and size).</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\06. Pictures and Shapes\07. Shapes\Sample.cs" title="This sample shows how to work with shapes using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\06. Pictures and Shapes\07. Shapes\Sample.vb" title="This sample shows how to work with shapes using VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.Drawing.CustomGeometry">
      <summary>
            Represents the custom geometry. A sequence of <see cref="T:SautinSoft.Document.Drawing.CustomPath" />s 
            consisting of a series of moves, lines and curves, that when combined make up a geometry.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\06. Pictures and Shapes\09. Geometry\Sample.cs" title="This sample shows how to work with shapes and geometry using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\06. Pictures and Shapes\09. Geometry\Sample.vb" title="This sample shows how to work with shapes and geometry using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Drawing.CustomGeometry.TextBoundingBox">
      <summary>
            Gets or sets rectangular bounding box for text within a parent shape.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.CustomGeometry.Count">
      <summary>
            Gets the number of <see cref="T:SautinSoft.Document.Drawing.CustomPath" />s 
            contained in this <see cref="T:SautinSoft.Document.Drawing.CustomGeometry" />.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.CustomGeometry.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.Drawing.CustomPath" /> at the specified index.
            </summary>
      <param name="index">The zero-based index of the <see cref="T:SautinSoft.Document.Drawing.CustomPath" /> to get.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
    </member>
    <member name="M:SautinSoft.Document.Drawing.CustomGeometry.AddPath(SautinSoft.Document.Drawing.Size)">
      <summary>
            Adds new <see cref="T:SautinSoft.Document.Drawing.CustomPath" />.
            </summary>
      <param name="size">Path size. Maximum X and Y coordinates that should be used 
            for within the path coordinate system.</param>
      <returns>
            New <see cref="T:SautinSoft.Document.Drawing.CustomPath" />. 
            </returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\06. Pictures and Shapes\09. Geometry\Sample.cs" title="This sample shows how to work with shapes and geometry using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\06. Pictures and Shapes\09. Geometry\Sample.vb" title="This sample shows how to work with shapes and geometry using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Drawing.CustomGeometry.AddPath(SautinSoft.Document.Drawing.Size,SautinSoft.Document.Drawing.Point[])">
      <summary>
            Adds new <see cref="T:SautinSoft.Document.Drawing.CustomPath" />.
            </summary>
      <param name="size">
            The path size. Maximum X and Y coordinates that should be used for within the path coordinate system.
            </param>
      <param name="points">The points of the path.</param>
      <returns>
            New <see cref="T:SautinSoft.Document.Drawing.CustomPath" />. 
            </returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\06. Pictures and Shapes\09. Geometry\Sample.cs" title="This sample shows how to work with shapes and geometry using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\06. Pictures and Shapes\09. Geometry\Sample.vb" title="This sample shows how to work with shapes and geometry using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Drawing.CustomGeometry.AddPath(SautinSoft.Document.Drawing.Size,SautinSoft.Document.Drawing.Point[],System.Boolean)">
      <summary>
            Adds new <see cref="T:SautinSoft.Document.Drawing.CustomPath" />.
            </summary>
      <param name="size">
            The path size. Maximum X and Y coordinates that should be used for within the path coordinate system.
            </param>
      <param name="points">The points of the path.</param>
      <param name="close">When <see langword="true" /> closes the path.</param>
      <returns>
            New <see cref="T:SautinSoft.Document.Drawing.CustomPath" />. 
            </returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\06. Pictures and Shapes\09. Geometry\Sample.cs" title="This sample shows how to work with shapes and geometry using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\06. Pictures and Shapes\09. Geometry\Sample.vb" title="This sample shows how to work with shapes and geometry using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Drawing.CustomGeometry.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a paths.
            </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1">IEnumerator&lt;CustomPath&gt;</see> object that can be used to iterate through the paths.</returns>
    </member>
    <member name="T:SautinSoft.Document.Drawing.Geometry">
      <summary>
            Represent base class for the shape geometry.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\06. Pictures and Shapes\09. Geometry\Sample.cs" title="This sample shows how to work with shapes and geometry using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\06. Pictures and Shapes\09. Geometry\Sample.vb" title="This sample shows how to work with shapes and geometry using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Drawing.Geometry.AdjustValues">
      <summary>
            Gets the parent shape's adjust values.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.Geometry.IsPreset">
      <summary>
            Gets a value indicating whether this <see cref="T:SautinSoft.Document.Drawing.Geometry" /> 
            instance is <see cref="T:SautinSoft.Document.Drawing.PresetGeometry" />.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.Drawing.Geometry.SetPreset(SautinSoft.Document.Drawing.Figure)">
      <summary>
            Sets a preset geometry on the parent shape.
            </summary>
      <param name="figure">Microsoft Word figure.</param>
      <returns>
            The <see cref="T:SautinSoft.Document.Drawing.PresetGeometry" />.
            </returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\06. Pictures and Shapes\09. Geometry\Sample.cs" title="This sample shows how to work with shapes and geometry using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\06. Pictures and Shapes\09. Geometry\Sample.vb" title="This sample shows how to work with shapes and geometry using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Drawing.Geometry.SetCustom">
      <summary>
            Sets a custom geometry on the parent shape.
            </summary>
      <returns>
            The <see cref="T:SautinSoft.Document.Drawing.CustomGeometry" />.
            </returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\06. Pictures and Shapes\09. Geometry\Sample.cs" title="This sample shows how to work with shapes and geometry using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\06. Pictures and Shapes\09. Geometry\Sample.vb" title="This sample shows how to work with shapes and geometry using VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.Drawing.ShapeGroup">
      <summary>
             Represents a group of shapes.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\06. Pictures and Shapes\08. Shape Groups\Sample.cs" title="How to work with Shape Groups in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\06. Pictures and Shapes\08. Shape Groups\Sample.vb" title="How to work with Shape Groups in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Drawing.ShapeGroup.ElementType">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.ElementType" /> of this element instance.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.ShapeGroup.ChildSize">
      <summary>
            Gets or sets the size dimensions of the child extents rectangle.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.ShapeGroup.ChildShapes">
      <summary>
            Gets the child shapes.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.Drawing.ShapeGroup.Clone(System.Boolean)">
      <summary>
            Clones this element instance.
            </summary>
      <remarks>
        <para>This method serves as a copy constructor for elements. The cloned element
            has no parent, but belongs to the same document as the original element. </para>
        <para>If you want to insert this element into another document, then you should
            first import it into another document with 
            <see cref="M:SautinSoft.Document.DocumentCore.Import``1(``0,System.Boolean,System.Boolean)">Import&lt;T&gt;(T,System.Boolean,System.Boolean)</see>
            method and then insert the imported element.
            </para>
      </remarks>
      <param name="cloneDescendants">
        <see langword="True" /> to clone all descendants.</param>
      <returns>
            The cloned element.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Drawing.ShapeGroup.#ctor(SautinSoft.Document.DocumentCore,SautinSoft.Document.Drawing.Layout)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Drawing.ShapeGroup" /> class.
            </summary>
      <param name="document">The owner document.</param>
      <param name="layout">The group's layout (position and size).</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\06. Pictures and Shapes\08. Shape Groups\Sample.cs" title="How to work with Shape Groups in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\06. Pictures and Shapes\08. Shape Groups\Sample.vb" title="How to work with Shape Groups in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Drawing.ShapeGroup.#ctor(SautinSoft.Document.DocumentCore,SautinSoft.Document.Drawing.Layout,System.Collections.Generic.IEnumerable{SautinSoft.Document.Drawing.ShapeBase})">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Drawing.ShapeGroup" /> class.
            </summary>
      <param name="document">The owner document.</param>
      <param name="layout">The group's layout (position and size).</param>
      <param name="childShapes">The child shapes.</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\06. Pictures and Shapes\08. Shape Groups\Sample.cs" title="How to work with Shape Groups in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\06. Pictures and Shapes\08. Shape Groups\Sample.vb" title="How to work with Shape Groups in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Drawing.ShapeGroup.#ctor(SautinSoft.Document.DocumentCore,SautinSoft.Document.Drawing.Layout,SautinSoft.Document.Drawing.ShapeBase[])">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Drawing.ShapeGroup" /> class.
            </summary>
      <param name="document">The owner document.</param>
      <param name="layout">The group's layout (position and size).</param>
      <param name="childShapes">The child shapes.</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\06. Pictures and Shapes\08. Shape Groups\Sample.cs" title="How to work with Shape Groups in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\06. Pictures and Shapes\08. Shape Groups\Sample.vb" title="How to work with Shape Groups in VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.Drawing.PresetGeometry">
      <summary>
            Represents the preset geometry.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\06. Pictures and Shapes\09. Geometry\Sample.cs" title="This sample shows how to work with shapes and geometry using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\06. Pictures and Shapes\09. Geometry\Sample.vb" title="This sample shows how to work with shapes and geometry using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Drawing.PresetGeometry.Figure">
      <summary>
            Gets a figure.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\06. Pictures and Shapes\09. Geometry\Sample.cs" title="This sample shows how to work with shapes and geometry using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\06. Pictures and Shapes\09. Geometry\Sample.vb" title="This sample shows how to work with shapes and geometry using VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.Drawing.ShapeText">
      <summary>
            Defines the text inside a shape and its attributes.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\06. Pictures and Shapes\07. Shapes\Sample.cs" title="This sample shows how to work with shapes using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\06. Pictures and Shapes\07. Shapes\Sample.vb" title="This sample shows how to work with shapes using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Drawing.ShapeText.Anchoring">
      <summary>
            Gets or sets anchoring position of the text within the shape.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.ShapeText.Margins">
      <summary>
            Gets or sets internal margins.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.ShapeText.HorizontalOverflow">
      <summary>
            Gets or sets a value to determine whether the text can flow out of the bounding box horizontally.
            </summary>
      <remarks>
            This is used to determine what happens in the event that the text within a shape is 
            too large for the bounding box it is contained within.
            </remarks>
    </member>
    <member name="P:SautinSoft.Document.Drawing.ShapeText.VerticalOverflow">
      <summary>
            Gets or sets a value to determine whether the text can flow out of the bounding box vertically.
            </summary>
      <remarks>
            This is used to determine what happens in the event that the text within a shape is
            too large for the bounding box it is contained within.
            </remarks>
    </member>
    <member name="P:SautinSoft.Document.Drawing.ShapeText.WrapText">
      <summary>
            Gets or sets a value indicating whether text wraps inside a shape.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.ShapeText.TextDirection">
      <summary>
            Gets or sets a text direction.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.ShapeText.AutoFit">
      <summary>
            Gets or sets a value to determine whether Microsoft Word will grow the shape
            to fit text or vise versa.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.ShapeText.RotateWithShape">
      <summary>
            Gets or sets a value to determine whether text should remain upright, regardless of the transform applied to it and the accompanying shape transform.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.ShapeText.Blocks">
      <summary>
            Gets the shape's blocks.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.Drawing.SolidColorBrush">
      <summary>
            Represents a brush which fills an area with a solid color.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.SolidColorBrush.IsEmpty">
      <summary>
            Gets a value indicating whether the parent shape is filled.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Drawing.SolidColorBrush.Color">
      <summary>
            Gets or sets the color.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.HtmlFlowingSaveOptions">
      <summary>
            Represents options for saving to flowing HyperText Markup Language (HTML) format.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\04. Save as\05. Save a document as HTML\Sample.cs" title="Save document as HTML (in the Fixed and Flowing modes) using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\04. Save as\05. Save a document as HTML\Sample.vb" title="Save document as HTML (in the Fixed and Flowing modes) using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.HtmlFlowingSaveOptions.ListExportMode">
      <summary>
            Controls how list labels are output to HTML or MHTML.
            Default value is <see cref="F:SautinSoft.Document.HtmlListExportMode.Auto" />.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\04. Save as\05. Save a document as HTML\Sample.cs" title="Save document as HTML (in the Fixed and Flowing modes) using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\04. Save as\05. Save a document as HTML\Sample.vb" title="Save document as HTML (in the Fixed and Flowing modes) using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.HtmlFlowingSaveOptions.HeadersFootersExportMode">
      <summary>
            Specifies how headers and footers are output to HTML and MHTML. 
            Default value is <see cref="F:SautinSoft.Document.HtmlHeadersFootersExportMode.PerSection" />.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.HtmlFlowingSaveOptions.SplitCriteria">
      <summary>
            Specifies how the document should be split when saving to Html format. 
            Default is <see cref="F:SautinSoft.Document.HtmlSplitCriteria.None" />.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.HtmlFlowingSaveOptions.SplitHeadingLevel">
      <summary>
            Specifies the maximum level of headings at which to split the document.
            Default value is 2.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.HtmlFlowingSaveOptions.BuildNavigationPage">
      <summary>
            Whether to generate a navigation page (like a TOC - table of contents) or not. Default value: true.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.HtmlFlowingSaveOptions.PartSavingCallback">
      <summary>
            Allows to control how document parts are saved when a document is saved to HTML.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.HtmlFlowingSaveOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.HtmlFlowingSaveOptions" /> class.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\04. Save as\05. Save a document as HTML\Sample.cs" title="Save document as HTML (in the Fixed and Flowing modes) using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\04. Save as\05. Save a document as HTML\Sample.vb" title="Save document as HTML (in the Fixed and Flowing modes) using VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.HtmlImageSavingArgs">
      <summary>
            Provides data for the <see cref="M:SautinSoft.Document.IHtmlImageSavingCallback.ImageSaving(SautinSoft.Document.HtmlImageSavingArgs)" /> event.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.HtmlImageSavingArgs.CurrentShape">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.Drawing.ShapeBase" /> instance corresponding 
            to the shape or group shape that is about to be saved.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.HtmlImageSavingArgs.Document">
      <summary>
            Gets the document that is currently being saved.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.HtmlImageSavingArgs.ImageStream">
      <summary>
            Allows to specify the stream where the image will be saved to.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.HtmlImageSavingArgs.ImageFormat">
      <summary>
            Gets and sets a format of the image stored inside <see cref="P:SautinSoft.Document.HtmlImageSavingArgs.ImageStream" /> property. Default value: <see cref="F:SautinSoft.Document.Drawing.PictureFormat.Unknown" />.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.HtmlImageSavingArgs.ImageFileName">
      <summary>
            Gets or sets the file name (without path) where the image will be saved to.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.HtmlImageSavingArgs.KeepImageStreamOpen">
      <summary>
            Specifies whether keep the stream open or close it after saving an image.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.HtmlSaveOptions">
      <summary>
            Represents a base class for saving options to HyperText Markup Language (HTML) format.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\04. Save as\05. Save a document as HTML\Sample.cs" title="Save document as HTML (in the Fixed and Flowing modes) using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\04. Save as\05. Save a document as HTML\Sample.vb" title="Save document as HTML (in the Fixed and Flowing modes) using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.HtmlSaveOptions.ContentType">
      <summary>
            Gets the content-type for HTML file format.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.HtmlSaveOptions.SingleFontFamily">
      <summary>
            Sets or gets a single font family for a whole text in the HTML document. Default value: <see cref="F:System.String.Empty" />.
            </summary>
      <remarks>
            By default each block of text will have the same font family as in the original document.
            </remarks>
    </member>
    <member name="P:SautinSoft.Document.HtmlSaveOptions.SingleFontSize">
      <summary>
            Sets or gets a single font size in points (pt) for a whole text in the produced HTML document. Default value: null.
            </summary>
      <remarks>
            By default each block of text will have the same font size as in the original document.
            </remarks>
    </member>
    <member name="P:SautinSoft.Document.HtmlSaveOptions.SingleFontColor">
      <summary>
            Sets or gets a single font color for a whole text in the produced HTML document. Default value: null.
            </summary>
      <remarks>
            By default each block of text will have the same font color as in the original document.
            </remarks>
    </member>
    <member name="P:SautinSoft.Document.HtmlSaveOptions.Encoding">
      <summary>
            Gets or sets the encoding for the HTML file.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.HtmlSaveOptions.Version">
      <summary>
            Specifies version of HTML standard that should be used when saving the document to HTML or MHTML.
            Default value is <see cref="F:SautinSoft.Document.HtmlVersion.Xhtml" />.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\04. Save as\05. Save a document as HTML\Sample.cs" title="Save document as HTML (in the Fixed and Flowing modes) using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\04. Save as\05. Save a document as HTML\Sample.vb" title="Save document as HTML (in the Fixed and Flowing modes) using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.HtmlSaveOptions.CssExportMode">
      <summary>
            Specifies how CSS (Cascading Style Sheet) styles are exported to HTML or MHTML. 
            Default value is <see cref="F:SautinSoft.Document.CssExportMode.Inline" />.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\04. Save as\05. Save a document as HTML\Sample.cs" title="Save document as HTML (in the Fixed and Flowing modes) using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\04. Save as\05. Save a document as HTML\Sample.vb" title="Save document as HTML (in the Fixed and Flowing modes) using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.HtmlSaveOptions.CssFileName">
      <summary>
            Specifies the path and the name of the Cascading Style Sheet (CSS) file 
            written when a document is exported to HTML. Default is an empty string.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.HtmlSaveOptions.CssStream">
      <summary>
            Allows to specify the stream where the CSS information will be saved to.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.HtmlSaveOptions.KeepCssStreamOpen">
      <summary>
            Specifies whether keep the stream open or close it after saving an CSS information.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.HtmlSaveOptions.EmbedImages">
      <summary>
            Gets or sets a value indicating whether images are embedded directly within the
            HTML file in form of Base64 encoding.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.HtmlSaveOptions.ImagesDirectoryPath">
      <summary>
            Gets or sets the physical directory where all images will be saved.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.HtmlSaveOptions.ImagesDirectorySrcPath">
      <summary>
            Gets or sets the relative directory that will be used when referencing images in the HTML.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.HtmlSaveOptions.ImageSavingCallback">
      <summary>
            Allows to control how images are saved when a document is saved to HTML.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.HtmlSaveOptions.ProduceOnlyHtmlBody">
      <summary>
            Gets or sets a value to produce a complete HTML document or only between between &lt;body&gt;...&lt;/body&gt; tags. Default value: false.
            </summary>
      <remarks>
            In case of 'True' you will get only HTML between &lt;body&gt;...&lt;/body&gt; tags.<br />
            This property will be useful to merge multiply HTML documents into a single.
            </remarks>
    </member>
    <member name="P:SautinSoft.Document.HtmlSaveOptions.UseNumericCharacterReference">
      <summary>
            In case of 'true': Write the all characters in "<a href="http://en.wikipedia.org/wiki/Numeric_character_reference" target="_blank">NCR</a>" notation: &amp;#xxx;. In case of 'false': Write the all characters as Unicode (recommended). Default value: false.
            </summary>
      <remarks>
            A numeric character reference (NCR) is a common markup construct used in SGML and other SGML-related markup languages such as HTML and XML. It consists of a short sequence of characters that, in turn, represent a single character from the Universal Character Set (UCS) of Unicode.<br /><br />
            See details in <a href="http://en.wikipedia.org/wiki/Numeric_character_reference" target="_blank">Wikipedia ...</a></remarks>
    </member>
    <member name="P:SautinSoft.Document.HtmlSaveOptions.Title">
      <summary>
            Gets and sets a title for the produced HTML document. Default value: "Untitled document".
            </summary>
    </member>
    <member name="T:SautinSoft.Document.HtmlSaveOptions.EmbImagesFormat">
      <summary>
            Specifies the image format to embed in the document during the saving. Default value: <see cref="F:SautinSoft.Document.HtmlSaveOptions.EmbImagesFormat.Auto" />.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.HtmlSaveOptions.EmbImagesFormat.Auto">
      <summary>
            Default. In this case the embedded images will keep their original format. The Jpeg images will be stored using Jpeg codec, the all others as PNG.
            </summary>
      <remarks>
            Together with this option you can also control jpeg quality, using the property <see cref="P:SautinSoft.Document.HtmlSaveOptions.EmbeddedJpegQuality">EmbeddedJpegQuality</see>.
            </remarks>
    </member>
    <member name="F:SautinSoft.Document.HtmlSaveOptions.EmbImagesFormat.Jpeg">
      <summary>
            Force to convert all images into Jpeg format. Be careful: using Jpeg for images you can reduce the PDF size, but could lose the transparency.
            </summary>
      <remarks>
            Together with this option you can also control jpeg quality, using the property <see cref="P:SautinSoft.Document.HtmlSaveOptions.EmbeddedJpegQuality">EmbeddedJpegQuality</see>.
            </remarks>
    </member>
    <member name="F:SautinSoft.Document.HtmlSaveOptions.EmbImagesFormat.Png">
      <summary>
            Force to convert all images into Png format.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.HtmlSaveOptions.EmbeddedJpegQuality">
      <summary>
            Gets and sets the value value indicating Jpeg quality level. Affects only to the images which embedded in Jpeg format. Default value: 90.
            </summary>
      <remarks>
        <p>The amount of JPEG compression should really depend on the usage purpose for the JPEG, and the contents of the JPEG.</p>
        <p>The quality level one should choose when exporting an image to JPEG is highly dependent upon the kind of detail contained within the image.</p>
        <p>An image of a smooth blue sky or a sunset sky with large areas of orange gradient should probably use a high quality setting, 90-100. An image that contains nothing but complex detail could probably get away with a quality setting of 50-60, possibly even lower.There is no single "best" JPEG compression setting, and depending on the type and complexity of detail(or lack of complexity and detail), you may find yourself using 40-60, 70-80, or 90-100 as appropriate for the photo(s) you are exporting.</p>
        <p>Here is a test with quality from left to right: 10, 20, 30, 40, 55, 70, 80, 90, 100%.<br />File sizes for the full files are: 210k, 278k, 347k, 477k, 601k, 709k, 987k, 1.7M, 7M.</p>
      </remarks>
    </member>
    <member name="P:SautinSoft.Document.HtmlSaveOptions.EmbeddedImagesFormat">
      <summary>
            Gets and sets the format to embed images in the saving document. Default value: <see cref="F:SautinSoft.Document.HtmlSaveOptions.EmbImagesFormat.Auto" />.
            </summary>
      <remarks>Using this property together with the <see cref="P:SautinSoft.Document.HtmlSaveOptions.EmbeddedJpegQuality">EmbeddedJpegQuality</see> allows you to reduce to size of the saved document.</remarks>
    </member>
    <member name="T:SautinSoft.Document.FontSettings">
      <summary>
            Contains font related settings which are used when printing, importing or exporting a document
            to a file format that requires font information.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.FontSettings.MissingFonts">
      <summary>
            Get fonts which were not found during the loading/saving of the current document. Check this property after launching the method Save(). 
            </summary>
      <remarks>
            Next you may download these fonts from Internet, install into your OS or specify a special folder with these user fonts: <see cref="P:SautinSoft.Document.FontSettings.UserFontsDirectory" />.<br />
            Thus, you can improve the document loading/saving quality and avoid using of alternative fonts.
            </remarks>
    </member>
    <member name="P:SautinSoft.Document.FontSettings.UserFontsDirectory">
      <summary>
            Gets and sets an extra folder to search fonts (*.ttf, *.otf, *.ttc). Default value: null.
            </summary>
      <remarks>
            By default the component tries to find fonts in standard font folder (for example, in Windows OS - it may be c:\windows\fonts). 
            It will find the standard font folder from the Environment Variables.<br />
            But you may add an extra folder to also search fonts in it. Document .Net will try to find and load all font files with these extensions: *.ttf, *.otf, *.ttc.<br /><br />
            Steps to find the missing fonts:<br />
            1. Load your document.<br />
            2. Save the document as PDF.<br />
            3. Check the property <see cref="P:SautinSoft.Document.FontSettings.MissingFonts" />.<br />
            In case of the component will not find the necessary font, it place the font name in this list. Next the component will try to use a substitute font and finally use the default font (Calibri). 
            Next you may download these fonts from Internet, install into your OS or specify the <see cref="P:SautinSoft.Document.FontSettings.UserFontsDirectory" />.
            </remarks>
    </member>
    <member name="M:SautinSoft.Document.FontSettings.AddFontSubstitutes(System.String,System.String[])">
      <summary>
            Adds substitute (alternative) font names for given original font name.
            </summary>
      <param name="originalFontName">Original font name.</param>
      <param name="substituteFontNames">
            List of alternative font names to be used if original font is not presented in system.
            </param>
    </member>
    <member name="M:SautinSoft.Document.FontSettings.GetFontSubstitutes(System.String)">
      <summary>
            Gets array containing alternative font names to be used if original font is 
            not presented in system.
            </summary>
      <param name="originalFontName">Original font name.</param>
      <returns>Font substitutes.</returns>
    </member>
    <member name="T:SautinSoft.Document.ListItem">
      <summary>
            Represents content which prefixes numbered paragraph (<see cref="T:SautinSoft.Document.Paragraph" /> 
            for which <see cref="P:SautinSoft.Document.Paragraph.ListFormat" /> is not null.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.ListItem.Inlines">
      <summary>
            Gets the content of this <see cref="T:SautinSoft.Document.ListItem" /> instance.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.ListItem.Numbers">
      <summary>
            Gets the list of numbers calculated by counting list paragraphs and their indentation levels.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.ListItem.Paragraph">
      <summary>
            Gets the paragraph which this <see cref="T:SautinSoft.Document.ListItem" /> prefixes.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.Run">
      <summary>
            Represents a run of characters with the same character formatting.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\05. Text\02. Get text\Sample.cs" title="Get all Text (Run objects) from DOCX document and show it on Console using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\05. Text\02. Get text\Sample.vb" title="Get all Text (Run objects) from DOCX document and show it on Console using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Run.Text">
      <summary>
            Gets or sets the text of the run.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\05. Text\02. Get text\Sample.cs" title="Get all Text (Run objects) from DOCX document and show it on Console using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\05. Text\02. Get text\Sample.vb" title="Get all Text (Run objects) from DOCX document and show it on Console using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Run.ElementType">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.ElementType" /> of this element instance.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Run.CharacterFormat">
      <summary>
            Gets or sets the character format.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\07. Character Formatting\Sample.cs" title="How set character formatting in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\07. Character Formatting\Sample.vb" title="How set character formatting in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Run.Clone">
      <summary>
            Clones this element instance.
            </summary>
      <remarks>
        <para>This method serves as a copy constructor for elements. The cloned element
            has no parent, but belongs to the same document as the original element. </para>
        <para>If you want to insert this element into another document, then you should
            first import it into another document with 
            <see cref="M:SautinSoft.Document.DocumentCore.Import``1(``0,System.Boolean,System.Boolean)">Import&lt;T&gt;(T,System.Boolean,System.Boolean)</see>
            method and then insert the imported element.
            </para>
      </remarks>
      <returns>
            The cloned element.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Run.#ctor(SautinSoft.Document.DocumentCore)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Run" /> class.
            </summary>
      <param name="document">The owner document.</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\05. Text\01. Add Text\Sample.cs" title="How to create a simple document with text in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\05. Text\01. Add Text\Sample.vb" title="How to create a simple document with text in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Run.#ctor(SautinSoft.Document.DocumentCore,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Run" /> class.
            </summary>
      <param name="document">The owner document.</param>
      <param name="text">The text for this <see cref="T:SautinSoft.Document.Run" /> instance.</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\05. Text\01. Add Text\Sample.cs" title="How to create a simple document with text in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\05. Text\01. Add Text\Sample.vb" title="How to create a simple document with text in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Run.#ctor(SautinSoft.Document.DocumentCore,System.String,SautinSoft.Document.CharacterFormat)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Run" /> class.
            </summary>
      <param name="document">The owner document.</param>
      <param name="text">The text for this <see cref="T:SautinSoft.Document.Run" /> instance.</param>
      <param name="format">The <see cref="T:SautinSoft.Document.CharacterFormat" /> for 
            this <see cref="T:SautinSoft.Document.Run" /> instance.</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\05. Text\01. Add Text\Sample.cs" title="How to create a simple document with text in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\05. Text\01. Add Text\Sample.vb" title="How to create a simple document with text in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Run.#ctor(SautinSoft.Document.DocumentCore,System.Char)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Run" /> class.
            </summary>
      <param name="document">The owner document.</param>
      <param name="c">The character for this <see cref="T:SautinSoft.Document.Run" /> instance.</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\05. Text\01. Add Text\Sample.cs" title="How to create a simple document with text in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\05. Text\01. Add Text\Sample.vb" title="How to create a simple document with text in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Run.#ctor(SautinSoft.Document.DocumentCore,System.Char,SautinSoft.Document.CharacterFormat)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Run" /> class.
            </summary>
      <param name="document">The owner document.</param>
      <param name="c">The character for this <see cref="T:SautinSoft.Document.Run" /> instance.</param>
      <param name="format">The <see cref="T:SautinSoft.Document.CharacterFormat" /> for 
            this <see cref="T:SautinSoft.Document.Run" /> instance.</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\05. Text\01. Add Text\Sample.cs" title="How to create a simple document with text in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\05. Text\01. Add Text\Sample.vb" title="How to create a simple document with text in VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.Tables.TableRowHeight">
      <summary>
            Represents a table row height.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableRowHeight.Rule">
      <summary>
            Gets the table row height rule.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableRowHeight.Value">
      <summary>
            Gets the table row height value.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.Tables.TableRowHeight.Equals(SautinSoft.Document.Tables.TableRowHeight)">
      <summary>
            Determines whether the <i>other</i><see cref="T:SautinSoft.Document.Tables.TableRowHeight" /> is
            equal to this <see cref="T:SautinSoft.Document.Tables.TableRowHeight" /> instance.
            </summary>
      <param name="other">The other table row height to compare with this table row height instance.</param>
      <returns>
        <see langword="true" /> if the other <see cref="T:SautinSoft.Document.Tables.TableRowHeight" />
            is equal to this <see cref="T:SautinSoft.Document.Tables.TableRowHeight" /> instance;
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Tables.TableRowHeight.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this 
            <see cref="T:SautinSoft.Document.Tables.TableRowHeight" /> instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this table row height instance.</param>
      <returns>
        <see langword="true" /> if the specified <see cref="T:System.Object" /> is a 
            <see cref="T:SautinSoft.Document.Tables.TableRowHeight" /> and is equal to
            this <see cref="T:SautinSoft.Document.Tables.TableRowHeight" /> instance; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Tables.TableRowHeight.GetHashCode">
      <summary>
            Returns a hash code for this <see cref="T:SautinSoft.Document.Tables.TableRowHeight" /> instance.
            </summary>
      <returns>
            An integer value that specifies a hash value for this
            <see cref="T:SautinSoft.Document.Tables.TableRowHeight" /> instance.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Tables.TableRowHeight.op_Equality(SautinSoft.Document.Tables.TableRowHeight,SautinSoft.Document.Tables.TableRowHeight)">
      <summary>
            Determines whether <i>first</i> and <i>second</i> <see cref="T:SautinSoft.Document.Tables.TableRowHeight" />s are equal.
            </summary>
      <param name="first">The first table row height.</param>
      <param name="second">The second table row height.</param>
      <returns>
        <see langword="true" /> if <i>first</i> and <i>second</i> table row heights are equal; 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Tables.TableRowHeight.op_Inequality(SautinSoft.Document.Tables.TableRowHeight,SautinSoft.Document.Tables.TableRowHeight)">
      <summary>
            Determines whether <i>first</i> and <i>second</i> <see cref="T:SautinSoft.Document.Tables.TableRowHeight" />s are not equal.
            </summary>
      <param name="first">The first table row height.</param>
      <param name="second">The second table row height.</param>
      <returns>
        <see langword="true" /> if <i>first</i> and <i>second</i> table row heights are not equal; 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Tables.TableRowHeight.#ctor(System.Double,SautinSoft.Document.HeightRule)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Tables.TableRowHeight" /> struct.
            </summary>
      <param name="value">The table row height value.</param>
      <param name="rule">The table row height rule.</param>
    </member>
    <member name="T:SautinSoft.Document.Tables.TableWidth">
      <summary>
            Represents a table width encapsulating table width value and table width measurement unit.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableWidth.Unit">
      <summary>
            Gets the table width measurement unit.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableWidth.Value">
      <summary>
            Gets the table width value.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Tables.TableWidth.Auto">
      <summary>
            Represents an automatic table width.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.Tables.TableWidth.op_Equality(SautinSoft.Document.Tables.TableWidth,SautinSoft.Document.Tables.TableWidth)">
      <summary>
            Determines whether <i>first</i> and <i>second</i> <see cref="T:SautinSoft.Document.Tables.TableWidth" />s are equal.
            </summary>
      <param name="first">The first table width.</param>
      <param name="second">The second table width.</param>
      <returns>
        <see langword="true" /> if <i>first</i> and <i>second</i> table widths are equal;
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Tables.TableWidth.op_Inequality(SautinSoft.Document.Tables.TableWidth,SautinSoft.Document.Tables.TableWidth)">
      <summary>
            Determines whether <i>first</i> and <i>second</i> <see cref="T:SautinSoft.Document.Tables.TableWidth" />s are not equal.
            </summary>
      <param name="first">The first table width.</param>
      <param name="second">The second table width.</param>
      <returns>
        <see langword="true" /> if <i>first</i> and <i>second</i> table widths are not equal;
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Tables.TableWidth.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this 
            <see cref="T:SautinSoft.Document.Tables.TableWidth" /> instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this
            <see cref="T:SautinSoft.Document.Tables.TableWidth" /> instance.</param>
      <returns>
        <see langword="true" /> if the specified <see cref="T:System.Object" /> is a
            <see cref="T:SautinSoft.Document.Tables.TableWidth" /> and is equal to this 
            <see cref="T:SautinSoft.Document.Tables.TableWidth" /> instance; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Tables.TableWidth.Equals(SautinSoft.Document.Tables.TableWidth)">
      <summary>
            Determines whether the <i>other</i><see cref="T:SautinSoft.Document.Tables.TableWidth" /> 
            is equal to this <see cref="T:SautinSoft.Document.Tables.TableWidth" /> instance.
            </summary>
      <param name="other">The other table width to compare with this table width instance.</param>
      <returns>
        <see langword="true" /> if the other <see cref="T:SautinSoft.Document.Tables.TableWidth" />
            is equal to this <see cref="T:SautinSoft.Document.Tables.TableWidth" /> instance; 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Tables.TableWidth.GetHashCode">
      <summary>
            Returns a hash code for this <see cref="T:SautinSoft.Document.Tables.TableWidth" /> instance.
            </summary>
      <returns>
            An integer value that specifies a hash value for this 
            <see cref="T:SautinSoft.Document.Tables.TableWidth" /> instance.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Tables.TableWidth.#ctor(System.Double,SautinSoft.Document.Tables.TableWidthUnit)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Tables.TableWidth" /> struct.
            </summary>
      <param name="value">The table width value.</param>
      <param name="unit">The table width measurement unit.</param>
    </member>
    <member name="T:SautinSoft.Document.Tables.TableRowHeightRule">
      <summary>
            Represents the logic which shall be used to calculate the height of the 
            <see cref="T:SautinSoft.Document.Tables.TableRow" /> when it is displayed in the document.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Tables.TableRowHeightRule.Auto">
      <summary>
            The height will grow automatically to accommodate all text inside an object.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Tables.TableRowHeightRule.AtLeast">
      <summary>
            The height will be at least the specified height in points.
            It will grow, if needed, to accommodate all text inside an object.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Tables.TableRowHeightRule.Exact">
      <summary>
            The height is specified exactly in points. Please note that if the text cannot 
            fit inside the object of this height, it will appear truncated.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.Tables.TableStyleFormatType">
      <summary>
            Represents table style conditional format types which indicate what region
            of a table will be formatted with its parent <see cref="T:SautinSoft.Document.Tables.TableStyleFormat" />.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Tables.TableStyleFormatType.WholeTable">
      <summary>
            Specifies that the conditional formatting applies to the whole table.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Tables.TableStyleFormatType.OddBandedRows">
      <summary>
            Specifies that the table formatting applies to odd numbered groupings of rows.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Tables.TableStyleFormatType.EvenBandedRows">
      <summary>
            Specifies that the table formatting applies to even numbered groupings of rows.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Tables.TableStyleFormatType.OddBandedColumns">
      <summary>
            Specifies that the table formatting applies to odd numbered groupings of columns.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Tables.TableStyleFormatType.EvenBandedColumns">
      <summary>
            Specifies that the table formatting applies to even numbered groupings of columns.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Tables.TableStyleFormatType.FirstColumn">
      <summary>
            Specifies that the table formatting applies to the first column.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Tables.TableStyleFormatType.LastColumn">
      <summary>
            Specifies that the table formatting applies to the last column.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Tables.TableStyleFormatType.FirstRow">
      <summary>
            Specifies that the table formatting applies to the first row.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Tables.TableStyleFormatType.LastRow">
      <summary>
            Specifies that the table formatting applies to the last row.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Tables.TableStyleFormatType.TopLeftCell">
      <summary>
            Specifies that the table formatting applies to the top left cell.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Tables.TableStyleFormatType.TopRightCell">
      <summary>
            Specifies that the table formatting applies to the top right cell.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Tables.TableStyleFormatType.BottomLeftCell">
      <summary>
            Specifies that the table formatting applies to the bottom left cell.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Tables.TableStyleFormatType.BottomRightCell">
      <summary>
            Specifies that the table formatting applies to the bottom right cell.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.Tables.TableStyleOptions">
      <summary>
            Specifies which table style conditional formats are applied to a table.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Tables.TableStyleOptions.None">
      <summary>
            Do not apply any conditional formatting.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Tables.TableStyleOptions.FirstRow">
      <summary>
            Apply first row conditional formatting.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Tables.TableStyleOptions.LastRow">
      <summary>
            Apply last row conditional formatting.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Tables.TableStyleOptions.FirstColumn">
      <summary>
            Apply first column conditional formatting.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Tables.TableStyleOptions.LastColumn">
      <summary>
            Apply last column conditional formatting.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Tables.TableStyleOptions.BandedRows">
      <summary>
            Apply row banding conditional formatting.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Tables.TableStyleOptions.BandedColumns">
      <summary>
            Apply column banding conditional formatting.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Tables.TableStyleOptions.All">
      <summary>
            Apply all conditional formats.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.Tables.TableWidthUnit">
      <summary>
            Represents a table width measurement unit.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Tables.TableWidthUnit.Auto">
      <summary>
            Specifies that the value for the measurement of the current table width property
            in the parent table shall be automatically determined by the table layout algorithm 
            when the table is displayed (this width can be adjusted as appropriate).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Tables.TableWidthUnit.Point">
      <summary>
            Specifies that the value for the measurement of the current table width property 
            in the parent table shall be interpreted in points.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Tables.TableWidthUnit.Percentage">
      <summary>
            Specifies that the value for the measurement of the current table width property
            in the parent table shall be interpreted as a percent. These percentages shall be
            calculated relative to the extents specified by the parent element.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.Tables.CreateTableCell">
      <summary>
            Encapsulates a method used to create <see cref="T:SautinSoft.Document.Tables.TableCell" /> for 
            specified row and column.
            </summary>
      <param name="rowIndex">Index of the row.</param>
      <param name="columnIndex">Index of the column.</param>
      <returns>
            A <see cref="T:SautinSoft.Document.Tables.TableCell" /> instance that encapsulated method creates.
            </returns>
    </member>
    <member name="T:SautinSoft.Document.Tables.TableColumn">
      <summary>
            Represents a logical column in a <see cref="T:SautinSoft.Document.Tables.Table" /> used to specify the presence
            of a shared vertical edge in the <see cref="T:SautinSoft.Document.Tables.Table" />.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableColumn.PreferredWidth">
      <summary>
            Gets or sets the preferred width of the <see cref="T:SautinSoft.Document.Tables.TableColumn" />.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.Tables.TableColumn.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Tables.TableColumn" /> class.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.Tables.TableColumn.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Tables.TableColumn" /> class.
            </summary>
      <param name="preferredWidth">
            Preferred width of the <see cref="T:SautinSoft.Document.Tables.TableColumn" />.
            </param>
    </member>
    <member name="T:SautinSoft.Document.Tables.TableColumnCollection">
      <summary>
            Represents a set of <see cref="T:SautinSoft.Document.Tables.TableColumn" />s.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.Tables.TableMetadata">
      <summary>
            Represents a set of non-visual properties which shall be applied to the parent
            <see cref="T:SautinSoft.Document.Tables.Table" />.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableMetadata.Description">
      <summary>
            Gets or sets the alternative description.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableMetadata.Title">
      <summary>
            Gets or sets the alternative title.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.Tables.Table">
      <summary>
            Represents a table in a document.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\03. Tables\01. Tables\Sample.cs" title="Add a Table into a document using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\03. Tables\01. Tables\Sample.vb" title="Add a Table into a document using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Tables.Table.Columns">
      <summary>
            Gets the table columns.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Tables.Table.ElementType">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.ElementType" /> of this element instance.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Tables.Table.Metadata">
      <summary>
            Gets the metadata (non-visual properties) of this 
            <see cref="T:SautinSoft.Document.Tables.Table" /> instance.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Tables.Table.Rows">
      <summary>
            Gets the table rows.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\03. Tables\02. Add a simple table\Sample.cs" title="How to create a plain table in a document using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\03. Tables\02. Add a simple table\Sample.vb" title="How to create a plain table in a document using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Tables.Table.TableFormat">
      <summary>
            Gets or sets the table format.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\03. Tables\02. Add a simple table\Sample.cs" title="How to create a plain table in a document using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\03. Tables\02. Add a simple table\Sample.vb" title="How to create a plain table in a document using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Tables.Table.Positioning">
      <summary>
            Gets the floating table positioning settings.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.Tables.Table.Clone(System.Boolean)">
      <summary>
            Clones this element instance.
            </summary>
      <remarks>
        <para>This method serves as a copy constructor for elements. The cloned element
            has no parent, but belongs to the same document as the original element. </para>
        <para>If you want to insert this element into another document, then you should
            first import it into another document with 
            <see cref="M:SautinSoft.Document.DocumentCore.Import``1(``0,System.Boolean,System.Boolean)">Import&lt;T&gt;(T,System.Boolean,System.Boolean)</see>
            method and then insert the imported element.
            </para>
      </remarks>
      <param name="cloneDescendants">
        <see langword="True" /> to clone all descendants.</param>
      <returns>
            The cloned element.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Tables.Table.#ctor(SautinSoft.Document.DocumentCore)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Tables.Table" /> class.
            </summary>
      <param name="document">The owner document.</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\03. Tables\02. Add a simple table\Sample.cs" title="How to create a plain table in a document using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\03. Tables\02. Add a simple table\Sample.vb" title="How to create a plain table in a document using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Tables.Table.#ctor(SautinSoft.Document.DocumentCore,SautinSoft.Document.Tables.TableRow[])">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Tables.Table" /> class.
            </summary>
      <param name="document">The owner document.</param>
      <param name="rows">The table rows.</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\03. Tables\02. Add a simple table\Sample.cs" title="How to create a plain table in a document using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\03. Tables\02. Add a simple table\Sample.vb" title="How to create a plain table in a document using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Tables.Table.#ctor(SautinSoft.Document.DocumentCore,System.Collections.Generic.IEnumerable{SautinSoft.Document.Tables.TableRow})">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Tables.Table" /> class.
            </summary>
      <param name="document">The owner document.</param>
      <param name="rows">The table rows.</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\03. Tables\02. Add a simple table\Sample.cs" title="How to create a plain table in a document using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\03. Tables\02. Add a simple table\Sample.vb" title="How to create a plain table in a document using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Tables.Table.#ctor(SautinSoft.Document.DocumentCore,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Tables.Table" /> class.
            </summary>
      <param name="document">The owner document.</param>
      <param name="rowCount">The row count.</param>
      <param name="columnCount">The column count.</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\03. Tables\02. Add a simple table\Sample.cs" title="How to create a plain table in a document using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\03. Tables\02. Add a simple table\Sample.vb" title="How to create a plain table in a document using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Tables.Table.#ctor(SautinSoft.Document.DocumentCore,System.Int32,System.Int32,SautinSoft.Document.Tables.CreateTableCell)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Tables.Table" /> class.
            </summary>
      <param name="document">The owner document.</param>
      <param name="rowCount">The row count.</param>
      <param name="columnCount">The column count.</param>
      <param name="tableCellCreator">The table cell creator.</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\03. Tables\02. Add a simple table\Sample.cs" title="How to create a plain table in a document using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\03. Tables\02. Add a simple table\Sample.vb" title="How to create a plain table in a document using VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.Tables.TableCell">
      <summary>
            Represents a single cell in a table row, which contains the table’s content.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\03. Tables\04. Modify a table\Sample.cs" title="How to modify an existing table in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\03. Tables\04. Modify a table\Sample.vb" title="How to modify an existing table in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableCell.ElementType">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.ElementType" /> of this element instance.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableCell.Parent">
      <summary>
            Gets the parent <see cref="T:SautinSoft.Document.Tables.TableRow" /> element.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableCell.ParentCollection">
      <summary>
            Gets the parent <see cref="T:SautinSoft.Document.Tables.TableCellCollection" /> element.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableCell.Blocks">
      <summary>
            The collection of Block elements (Paragraphs, Table, etc) inside this cell.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableCell.CellFormat">
      <summary>
            Gets and sets cell formatting.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\03. Tables\04. Modify a table\Sample.cs" title="How to modify an existing table in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\03. Tables\04. Modify a table\Sample.vb" title="How to modify an existing table in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableCell.ColumnSpan">
      <summary>
            The attributes COLSPAN (“how many across”) and ROWSPAN (“how many down”) indicate how many columns or rows a cell should take up.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableCell.RowSpan">
      <summary>
            The attributes COLSPAN (“how many across”) and ROWSPAN (“how many down”) indicate how many columns or rows a cell should take up.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.Tables.TableCell.Clone(System.Boolean)">
      <summary>
            Clones the current <see cref="T:SautinSoft.Document.Tables.TableCell" /> element and returns its new copy.
            </summary>
      <param name="cloneDescendants">Whether to clone all descendants: <see cref="P:SautinSoft.Document.Tables.TableCell.Blocks" /> elements or skip them.</param>
      <returns>A new copy of the current <see cref="T:SautinSoft.Document.Tables.TableCell" /> element.</returns>
    </member>
    <member name="M:SautinSoft.Document.Tables.TableCell.#ctor(SautinSoft.Document.DocumentCore)">
      <summary>
            Creates a new Table Cell.
            </summary>
      <param name="document">Parent document</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\03. Tables\02. Add a simple table\Sample.cs" title="How to create a plain table in a document in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\03. Tables\02. Add a simple table\Sample.vb" title="How to create a plain table in a document in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Tables.TableCell.#ctor(SautinSoft.Document.DocumentCore,SautinSoft.Document.Block[])">
      <summary>
            Creates a new Table Cell with Block elements.
            </summary>
      <param name="document">Parent document</param>
      <param name="blocks">Block elements</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\03. Tables\02. Add a simple table\Sample.cs" title="How to create a plain table in a document in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\03. Tables\02. Add a simple table\Sample.vb" title="How to create a plain table in a document in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Tables.TableCell.#ctor(SautinSoft.Document.DocumentCore,System.Collections.Generic.IEnumerable{SautinSoft.Document.Block})">
      <summary>
            Creates a new Table Cell with Block elements.
            </summary>
      <param name="document">Parent document</param>
      <param name="blocks">Block elements</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\03. Tables\02. Add a simple table\Sample.cs" title="How to create a plain table in a document in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\03. Tables\02. Add a simple table\Sample.vb" title="How to create a plain table in a document in VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.Tables.TableCellCollection">
      <summary>
            Represents a collection of <see cref="T:SautinSoft.Document.Tables.TableCell" />s.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\03. Tables\03. Add a nested table\Sample.cs" title="How to create a nested table in a document using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\03. Tables\03. Add a nested table\Sample.vb" title="How to create a nested table in a document using VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.Tables.TableCellFormat">
      <summary>
            Represents a set of properties which shall be applied to a specific 
            <see cref="T:SautinSoft.Document.Tables.TableCell" />.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\10. TableCell Formatting\Sample.cs" title="How apply formatting for table cells in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\10. TableCell Formatting\Sample.vb" title="How apply formatting for table cells in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableCellFormat.Borders">
      <summary>
            Gets the table cell borders.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\10. TableCell Formatting\Sample.cs" title="How apply formatting for table cells in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\10. TableCell Formatting\Sample.vb" title="How apply formatting for table cells in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableCellFormat.BackgroundColor">
      <summary>
            Gets or sets the table cell background color.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\08. Table Formatting\Sample.cs" title="How to create a table and apply formatting in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\08. Table Formatting\Sample.vb" title="How to create a table and apply formatting in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableCellFormat.FitText">
      <summary>
            When true, fits text in the cell, compressing each paragraph to the width of the table cell.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableCellFormat.Padding">
      <summary>
            Gets or sets the table cell padding.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\08. Table Formatting\Sample.cs" title="How to create a table and apply formatting in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\08. Table Formatting\Sample.vb" title="How to create a table and apply formatting in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableCellFormat.PreferredWidth">
      <summary>
            Gets or sets the preferred width of the table cell.
            </summary>
      <remarks>
        <para>
            The preferred width (along with the table's 
            <see cref="P:SautinSoft.Document.Tables.TableFormat.AutomaticallyResizeToFitContents" /> option)
            determines how the actual width of the cell is calculated by the table layout algorithm. 
            Table layout can be performed by SautinSoft.Document when it saves the document or
            by Microsoft Word when it displays the document.
            </para>
        <para>
            The preferred width can be specified in points or in percent.
            The preferred width can also be specified as "auto", which means no preferred width is specified.
            </para>
        <para>
            The default value is <see cref="F:SautinSoft.Document.Tables.TableWidthUnit.Auto" />.
            </para>
      </remarks>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\03. Tables\02. Add a simple table\Sample.cs" title="How to create a plain table in a document using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\03. Tables\02. Add a simple table\Sample.vb" title="How to create a plain table in a document using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableCellFormat.TextDirection">
      <summary>
            Gets or sets the direction of the text flow for table cell.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableCellFormat.VerticalAlignment">
      <summary>
            Gets or sets the vertical alignment of text in the table cell.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\08. Table Formatting\Sample.cs" title="How to create a table and apply formatting in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\08. Table Formatting\Sample.vb" title="How to create a table and apply formatting in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableCellFormat.WrapText">
      <summary>
            When true, wrap text for the table cell.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.Tables.TableCellFormat.Clone">
      <summary>
            Clones this <see cref="T:SautinSoft.Document.Tables.TableCellFormat" /> instance.
            </summary>
      <returns>
            Cloned <see cref="T:SautinSoft.Document.Tables.TableCellFormat" />.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Tables.TableCellFormat.ClearFormatting">
      <summary>
            Clears the formatting.
            </summary>
      <remarks>
            This method will clear all directly set formatting values.
            When retrieving formatting value, they can still come from other sources,
            as explained in <see cref="!:" />.
            </remarks>
    </member>
    <member name="M:SautinSoft.Document.Tables.TableCellFormat.Equals(System.Object)">
      <summary>
            Determines whether the specified object is equal to this
            <see cref="T:SautinSoft.Document.Tables.TableCellFormat" /> instance.
            </summary>
      <param name="obj">The object to compare with this 
            <see cref="T:SautinSoft.Document.Tables.TableCellFormat" /> instance.</param>
      <returns>
            true if the specified object is a <see cref="T:SautinSoft.Document.Tables.TableCellFormat" /> and is equal 
            to this <see cref="T:SautinSoft.Document.Tables.TableCellFormat" /> instance; otherwise, false.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Tables.TableCellFormat.#ctor">
      <summary>
            Initializes a new instance of <see cref="T:SautinSoft.Document.Tables.TableCellFormat" /> class.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\10. TableCell Formatting\Sample.cs" title="How apply formatting for table cells in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\10. TableCell Formatting\Sample.vb" title="How apply formatting for table cells in VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.Tables.TableFormat">
      <summary>
            Represents a set of table-wide properties. These properties affect the appearance 
            of all rows and cells within the parent table, but may be overridden by
            individual row and cell level formatting.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\08. Table Formatting\Sample.cs" title="How to create a table and apply formatting in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\08. Table Formatting\Sample.vb" title="How to create a table and apply formatting in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableFormat.Style">
      <summary>
            Gets or sets the table style.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableFormat.Borders">
      <summary>
            Gets the table borders.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\08. Table Formatting\Sample.cs" title="How to create a table and apply formatting in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\08. Table Formatting\Sample.vb" title="How to create a table and apply formatting in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableFormat.Alignment">
      <summary>
            Gets or sets the alignment of the table with respect to the text margins in the section.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\08. Table Formatting\Sample.cs" title="How to create a table and apply formatting in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\08. Table Formatting\Sample.vb" title="How to create a table and apply formatting in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableFormat.AutomaticallyResizeToFitContents">
      <summary>
            Gets or sets a value indicating whether the table shall automatically resize to fit contents.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableFormat.BackgroundColor">
      <summary>
            Gets or sets the table background color.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableFormat.ColumnBandSize">
      <summary>
            Gets or sets the number of columns in column band for this table style.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableFormat.DefaultCellPadding">
      <summary>
            Gets or sets the default table cell padding.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableFormat.DefaultCellSpacing">
      <summary>
            Gets or sets the default table cell spacing (the spacing between adjacent cells and
            the edges of the table) for all cells in the parent table.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableFormat.IndentFromLeft">
      <summary>
            Gets or sets the value that represents the left indent of the table.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableFormat.PreferredWidth">
      <summary>
            Gets or sets the table preferred width.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\10. TableCell Formatting\Sample.cs" title="How apply formatting for table cells in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\10. TableCell Formatting\Sample.vb" title="How apply formatting for table cells in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableFormat.RowBandSize">
      <summary>
            Gets or sets the number of rows in row band for this table style.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableFormat.StyleOptions">
      <summary>
            Gets or sets the table style options that specify which of the referenced 
            <see cref="T:SautinSoft.Document.Tables.TableStyle" /> conditional formats will be
            applied on the parent table.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.Tables.TableFormat.Clone">
      <summary>
            Clones this <see cref="T:SautinSoft.Document.Tables.TableFormat" /> instance.
            </summary>
      <returns>
            Cloned <see cref="T:SautinSoft.Document.Tables.TableFormat" /> .
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Tables.TableFormat.ClearFormatting">
      <summary>
            Clears the formatting.
            </summary>
      <remarks>
            This method will clear all directly set formatting values.
            When retrieving formatting value, they can still come from other sources,
            as explained in <see cref="!:" />.
            </remarks>
    </member>
    <member name="M:SautinSoft.Document.Tables.TableFormat.Equals(System.Object)">
      <summary>
            Determines whether the specified object is equal to this
            <see cref="T:SautinSoft.Document.Tables.TableFormat" /> instance.
            </summary>
      <param name="obj">The object to compare with this 
            <see cref="T:SautinSoft.Document.Tables.TableFormat" /> instance.</param>
      <returns>
            true if the specified object is a <see cref="T:SautinSoft.Document.Tables.TableFormat" /> and is equal 
            to this <see cref="T:SautinSoft.Document.Tables.TableFormat" /> instance; otherwise, false.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Tables.TableFormat.#ctor">
      <summary>
            Initializes a new instance of <see cref="T:SautinSoft.Document.Tables.TableFormat" /> class.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\08. Table Formatting\Sample.cs" title="How to create a table and apply formatting in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\08. Table Formatting\Sample.vb" title="How to create a table and apply formatting in VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.Tables.FloatingTablePositioning">
      <summary>
            Represents floating table positioning settings.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Tables.FloatingTablePositioning.DistanceFromText">
      <summary>
            Gets or sets the distance (in points) between the document text and the table.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Tables.FloatingTablePositioning.HorizontalPosition">
      <summary>
            Gets or sets the horizontal position.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Tables.FloatingTablePositioning.VerticalPosition">
      <summary>
            Gets or sets the vertical position.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Tables.FloatingTablePositioning.IsFloating">
      <summary>
            Gets a value indicating whether parent <c>Table</c> is actually a floating table.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.Tables.FloatingTablePositioning.ClearPositioning">
      <summary>
            Clears the floating table positioning settings.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.Tables.TableRow">
      <summary>
            Represents a table row.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\03. Tables\03. Add a nested table\Sample.cs" title="How to create a nested table in a document using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\03. Tables\03. Add a nested table\Sample.vb" title="How to create a nested table in a document using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableRow.Cells">
      <summary>
            Gets the table cells contained in this row.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\03. Tables\04. Modify a table\Sample.cs" title="How to modify an existing table in a document using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\03. Tables\04. Modify a table\Sample.vb" title="How to modify an existing table in a document using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableRow.ElementType">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.ElementType" /> of this element instance.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableRow.Parent">
      <summary>
            Gets the parent <see cref="T:SautinSoft.Document.Tables.Table" /> of this 
            <see cref="T:SautinSoft.Document.Tables.TableRow" /> instance.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableRow.ParentCollection">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.Tables.TableRowCollection" /> that contains
            this <see cref="T:SautinSoft.Document.Tables.TableRow" /> instance.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableRow.RowFormat">
      <summary>
            Gets or sets the table row format.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\09. TableRow Formatting\Sample.cs" title="How to apply formatting for table rows in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\09. TableRow Formatting\Sample.vb" title="How to apply formatting for table rows in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Tables.TableRow.Clone(System.Boolean)">
      <summary>
            Clones this element instance.
            </summary>
      <remarks>
        <para>This method serves as a copy constructor for elements. The cloned element
            has no parent, but belongs to the same document as the original element. </para>
        <para>If you want to insert this element into another document, then you should
            first import it into another document with 
            <see cref="M:SautinSoft.Document.DocumentCore.Import``1(``0,System.Boolean,System.Boolean)">Import&lt;T&gt;(T,System.Boolean,System.Boolean)</see>
            method and then insert the imported element.
            </para>
      </remarks>
      <param name="cloneDescendants">
        <see langword="True" /> to clone all descendants.</param>
      <returns>
            The cloned element.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Tables.TableRow.#ctor(SautinSoft.Document.DocumentCore)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Tables.TableRow" /> class.
            </summary>
      <param name="document">The owner document.</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\09. TableRow Formatting\Sample.cs" title="How to apply formatting for table rows in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\09. TableRow Formatting\Sample.vb" title="How to apply formatting for table rows in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Tables.TableRow.#ctor(SautinSoft.Document.DocumentCore,SautinSoft.Document.Tables.TableCell[])">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Tables.TableRow" /> class.
            </summary>
      <param name="document">The owner document.</param>
      <param name="cells">The table cells.</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\09. TableRow Formatting\Sample.cs" title="How to apply formatting for table rows in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\09. TableRow Formatting\Sample.vb" title="How to apply formatting for table rows in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Tables.TableRow.#ctor(SautinSoft.Document.DocumentCore,System.Collections.Generic.IEnumerable{SautinSoft.Document.Tables.TableCell})">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Tables.TableRow" /> class.
            </summary>
      <param name="document">The owner document.</param>
      <param name="cells">The table cells.</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\09. TableRow Formatting\Sample.cs" title="How to apply formatting for table rows in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\09. TableRow Formatting\Sample.vb" title="How to apply formatting for table rows in VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.Tables.TableRowCollection">
      <summary>
            Represents a collection of <see cref="T:SautinSoft.Document.Tables.TableRow" />s.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\03. Tables\02. Add a simple table\Sample.cs" title="How to create a plain table in a document using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\03. Tables\02. Add a simple table\Sample.vb" title="How to create a plain table in a document using VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.Tables.TableRowFormat">
      <summary>
            Represents a set of properties which shall be applied to a specific 
            <see cref="T:SautinSoft.Document.Tables.TableRow" />.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\09. TableRow Formatting\Sample.cs" title="How to apply formatting for table rows in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\09. TableRow Formatting\Sample.vb" title="How to apply formatting for table rows in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableRowFormat.AllowBreakAcrossPages">
      <summary>
            When true, the text in a table row is allowed to split across a page break.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableRowFormat.Height">
      <summary>
            Gets or sets the table row height.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\09. TableRow Formatting\Sample.cs" title="How to apply formatting for table rows in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\09. TableRow Formatting\Sample.vb" title="How to apply formatting for table rows in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableRowFormat.Hidden">
      <summary>
            Gets or sets a value indicating whether table row shall be hidden from display 
            at display time in a document.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableRowFormat.RepeatOnEachPage">
      <summary>
            Gets or sets a value indicating whether the table row shall be repeated 
            at the top of each new page on which part of it's table is displayed.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableRowFormat.GridBefore">
      <summary>
            Gets or sets the number of <see cref="T:SautinSoft.Document.Tables.TableColumn" /> 
            in the parent table's <see cref="P:SautinSoft.Document.Tables.Table.Columns" /> 
            which must be skipped before the contents of this table row (its table cells) are added 
            to the parent table.
            </summary>
      <remarks>
             This property is used to specify tables whose leading edge
             does not start at the first grid column(the same shared edge).
            </remarks>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableRowFormat.GridAfter">
      <summary>
            Gets or sets the number of <see cref="T:SautinSoft.Document.Tables.TableColumn" />
            in the parent table's <see cref="P:SautinSoft.Document.Tables.Table.Columns" />
            which shall be left after the last cell in the table row.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.Tables.TableRowFormat.Clone">
      <summary>
            Clones this <see cref="T:SautinSoft.Document.Tables.TableRowFormat" /> instance.
            </summary>
      <returns>
            Cloned <see cref="T:SautinSoft.Document.Tables.TableRowFormat" /> .
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Tables.TableRowFormat.ClearFormatting">
      <summary>
            Clears the formatting.
            </summary>
      <remarks>
            This method will clear all directly set formatting values.
            When retrieving formatting value, they can still come from other sources,
            as explained in <see cref="!:" />.
            </remarks>
    </member>
    <member name="M:SautinSoft.Document.Tables.TableRowFormat.Equals(System.Object)">
      <summary>
            Determines whether the specified object is equal to this
            <see cref="T:SautinSoft.Document.Tables.TableRowFormat" /> instance.
            </summary>
      <param name="obj">The object to compare with this 
            <see cref="T:SautinSoft.Document.Tables.TableRowFormat" /> instance.</param>
      <returns>
            true if the specified object is a <see cref="T:SautinSoft.Document.Tables.TableRowFormat" /> and is equal 
            to this <see cref="T:SautinSoft.Document.Tables.TableRowFormat" /> instance; otherwise, false.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Tables.TableRowFormat.#ctor">
      <summary>
            Initializes a new instance of <see cref="T:SautinSoft.Document.Tables.TableRowFormat" /> class.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\09. TableRow Formatting\Sample.cs" title="How to apply formatting for table rows in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\09. TableRow Formatting\Sample.vb" title="How to apply formatting for table rows in VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.Tables.TableStyle">
      <summary>
            Represents a table style.
            </summary>
      <remarks>
            Styles provide a way to format your document in a consistent way so when you 
            change your formatting options on a style, all document elements referencing that
            style will be changed.
            </remarks>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableStyle.BaseStyle">
      <summary>
            Gets or sets the style on which this style is based.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableStyle.CharacterFormat">
      <summary>
            Gets or sets the character format.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableStyle.ParagraphFormat">
      <summary>
            Gets or sets the paragraph format.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableStyle.CellFormat">
      <summary>
            Gets or sets the table cell format.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableStyle.RowFormat">
      <summary>
            Gets or sets the table row format.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableStyle.TableFormat">
      <summary>
            Gets or sets the table format.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableStyle.ConditionalFormats">
      <summary>
            Gets a collection of conditional <see cref="T:SautinSoft.Document.Tables.TableStyleFormat" />s.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableStyle.StyleType">
      <summary>
            Gets the type of the style.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.Tables.TableStyle.Equals(System.Object)">
      <summary>
            Determines whether the specified object is equal to this
            <see cref="T:SautinSoft.Document.Tables.TableStyle" /> instance.
            </summary>
      <param name="obj">The object to compare with this 
            <see cref="T:SautinSoft.Document.Tables.TableStyle" /> instance.</param>
      <returns>
            true if the specified object is a <see cref="T:SautinSoft.Document.Tables.TableStyle" /> and is equal 
            to this <see cref="T:SautinSoft.Document.Tables.TableStyle" /> instance; otherwise, false.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Tables.TableStyle.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Tables.TableStyle" /> class.
            </summary>
      <param name="name">The table style name.</param>
    </member>
    <member name="T:SautinSoft.Document.Tables.TableStyleFormat">
      <summary>
        <para>Represents a set of table style conditional formatting properties.</para>
        <para>
            These properties affect the appearance of all rows, cells, paragraphs and runs within 
            the parent table matching the specified condition, but may be overridden by individual
            row, cell, paragraph and run level formatting.
            </para>
      </summary>
      <remarks>
            Table style conditional formats are applied to different regions of the table
            and allow you to define all formatting properties (formatting for a table, rows,
            cells, paragraphs and runs).
            </remarks>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableStyleFormat.CharacterFormat">
      <summary>
            Gets or sets the character format.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableStyleFormat.ParagraphFormat">
      <summary>
            Gets or sets the paragraph format.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableStyleFormat.CellFormat">
      <summary>
            Gets or sets the table cell format.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableStyleFormat.RowFormat">
      <summary>
            Gets or sets the table row format.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableStyleFormat.TableFormat">
      <summary>
            Gets or sets the table format.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableStyleFormat.FormatType">
      <summary>
            Gets the table style conditional format type.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.Tables.TableStyleFormat.ClearFormatting">
      <summary>
            Clears the formatting.
            </summary>
      <remarks>
            This method will clear all directly set formatting values.
            When retrieving formatting value, they can still come from other sources,
            as explained in <see cref="!:" />.
            </remarks>
    </member>
    <member name="M:SautinSoft.Document.Tables.TableStyleFormat.Equals(System.Object)">
      <summary>
            Determines whether the specified object is equal to this
            <see cref="T:SautinSoft.Document.Tables.TableStyleFormat" /> instance.
            </summary>
      <param name="obj">The object to compare with this 
            <see cref="T:SautinSoft.Document.Tables.TableStyleFormat" /> instance.</param>
      <returns>
            true if the specified object is a <see cref="T:SautinSoft.Document.Tables.TableStyleFormat" /> and is equal 
            to this <see cref="T:SautinSoft.Document.Tables.TableStyleFormat" /> instance; otherwise, false.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Tables.TableStyleFormat.#ctor(SautinSoft.Document.Tables.TableStyleFormatType)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Tables.TableStyleFormat" /> class.
            </summary>
      <param name="formatType">The table style conditional format type.</param>
    </member>
    <member name="T:SautinSoft.Document.Tables.TableStyleFormatCollection">
      <summary>
            Represents a collection of conditional <see cref="T:SautinSoft.Document.Tables.TableStyleFormat" />s.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Tables.TableStyleFormatCollection.Item(SautinSoft.Document.Tables.TableStyleFormatType)">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.Tables.TableStyleFormat" /> that corresponds to given format type.
            </summary>
      <param name="formatType">The format type of the <see cref="T:SautinSoft.Document.Tables.TableStyleFormat" />.</param>
      <returns>
            The <see cref="T:SautinSoft.Document.Tables.TableStyleFormat" /> that corresponds to given format type.
            </returns>
      <remarks>
            If <see cref="T:SautinSoft.Document.Tables.TableStyleFormatCollection" /> doesn't contain corresponding format, then new format will be added and returned.
            </remarks>
    </member>
    <member name="M:SautinSoft.Document.Tables.TableStyleFormatCollection.Clear">
      <summary>
            Clears the <see cref="T:SautinSoft.Document.Tables.TableStyleFormatCollection" />.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.Tables.TableStyleFormatCollection.Contains(SautinSoft.Document.Tables.TableStyleFormatType)">
      <summary>
            Determines whether the <see cref="T:SautinSoft.Document.Tables.TableStyleFormatCollection" />
            contains a <see cref="T:SautinSoft.Document.Tables.TableStyleFormat" /> instance with specific format type.
            </summary>
      <param name="formatType">Format type of the 
            <see cref="T:SautinSoft.Document.Tables.TableStyleFormat" /> to locate in the <see cref="T:SautinSoft.Document.Tables.TableStyleFormatCollection" />.</param>
      <returns>
        <see langword="true" /> if <see cref="T:SautinSoft.Document.Tables.TableStyleFormat" /> instance
            with specific format type is found in the <see cref="T:SautinSoft.Document.Tables.TableStyleFormatCollection" />; 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Tables.TableStyleFormatCollection.Remove(SautinSoft.Document.Tables.TableStyleFormatType)">
      <summary>
            Removes the <see cref="T:SautinSoft.Document.Tables.TableStyleFormat" /> with the specified 
            format type from the <see cref="T:SautinSoft.Document.Tables.TableStyleFormatCollection" />.
            </summary>
      <param name="formatType">Format type of the
            <see cref="T:SautinSoft.Document.Tables.TableStyleFormat" /> which should be removed from
            the <see cref="T:SautinSoft.Document.Tables.TableStyleFormatCollection" />.</param>
      <returns>
        <see langword="true" /> if <see cref="T:SautinSoft.Document.Tables.TableStyleFormat" /> is successfully removed;
            otherwise, <see langword="false" />. This method also returns <see langword="false" /> if <see cref="T:SautinSoft.Document.Tables.TableStyleFormat" />
            was not found in the <see cref="T:SautinSoft.Document.Tables.TableStyleFormatCollection" />.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Tables.TableStyleFormatCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1">IEnumerator&lt;TableStyleFormat&gt;</see> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="T:SautinSoft.Document.DocumentPage">
      <summary>
            Represents a document page.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\06. Split and Merge\02. Split document by pages\Sample.cs" title="Loads a document and split it by separate pages. Saves the each page into PDF format in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\06. Split and Merge\02. Split document by pages\Sample.vb" title="Loads a document and split it by separate pages. Saves the each page into PDF format in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.DocumentPage.Content">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.ContentRange" /> that represent content of this page.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.DocumentPage.PageSetup">
      <summary>
            Represents the page setup properties: paper type, orientation, margins and so forth.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\02. Sections and Page Layout\03. Page Setup\Sample.cs" title="How to adjust a document page properties in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\02. Sections and Page Layout\03. Page Setup\Sample.vb" title="How to adjust a document page properties in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.DocumentPage.Width">
      <summary>
            Gets the page width in Points.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.DocumentPage.Height">
      <summary>
            Gets the page height in points.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.DocumentPage.GetContent">
      <summary>
            Returns the content of the page as <see cref="T:System.Windows.FrameworkElement" /> object.
            </summary>
      <returns>
            The page content as <see cref="T:System.Windows.FrameworkElement" /> object.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.DocumentPage.GetElementFrames(SautinSoft.Document.ElementType[])">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.ElementFrame" />s that is layouted on this page.
            </summary>
      <param name="filterElements">Specify the <see cref="T:SautinSoft.Document.ElementType" />s which you want to get. For all types leave empty.</param>
      <returns>Returns sequence of <see cref="T:SautinSoft.Document.ElementFrame" />s.</returns>
    </member>
    <member name="M:SautinSoft.Document.DocumentPage.Rasterize(System.Int32)">
      <summary>
            Rasterizes the document page to <see cref="T:System.Drawing.Bitmap" />.
            </summary>
      <param name="dpi">Dots per inch.</param>
      <returns>The pixel-based image.</returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\04. Save as\07. Save a document as Image\Sample.cs" title="Load DOCX a document and save all pages as images in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\04. Save as\07. Save a document as Image\Sample.vb" title="Load DOCX a document and save all pages as images in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.DocumentPage.Rasterize(System.Int32,SautinSoft.Document.Color)">
      <summary>
            Rasterizes the document page to <see cref="T:System.Drawing.Bitmap" />.
            </summary>
      <param name="dpi">Dots per inch.</param>
      <param name="background">Background color.</param>
      <returns>The pixel-based image.</returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\04. Save as\07. Save a document as Image\Sample.cs" title="Load DOCX a document and save all pages as images in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\04. Save as\07. Save a document as Image\Sample.vb" title="Load DOCX a document and save all pages as images in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.DocumentPage.Save(System.IO.Stream,SautinSoft.Document.SaveOptions)">
      <summary>
            Saves the document page in the specified stream.
            </summary>
      <param name="stream">The stream in which to save the document page.</param>
      <param name="options">The saving options which can be used to define settings for save operation.</param>
      <remarks>
            Parameter <i>options</i>, currently, must be of type <see cref="T:SautinSoft.Document.PdfSaveOptions" />.
            </remarks>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\06. Split and Merge\02. Split document by pages\Sample.cs" title="Loads a document and split it by separate pages. Saves the each page into PDF format in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\06. Split and Merge\02. Split document by pages\Sample.vb" title="Loads a document and split it by separate pages. Saves the each page into PDF format in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.DocumentPage.Save(System.String,SautinSoft.Document.SaveOptions)">
      <summary>
            Saves the document page to a file with the specified path.
            </summary>
      <param name="path">The path to which to save the document page.</param>
      <param name="options">The saving options which can be used to define settings for save operation.</param>
      <remarks>
            Parameter <i>options</i>, currently, must be of type <see cref="T:SautinSoft.Document.PdfSaveOptions" />.
            </remarks>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\06. Split and Merge\02. Split document by pages\Sample.cs" title="Loads a document and split it by separate pages. Saves the each page into PDF format in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\06. Split and Merge\02. Split document by pages\Sample.vb" title="Loads a document and split it by separate pages. Saves the each page into PDF format in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.DocumentPage.Save(System.String)">
      <summary>
            Saves the document page to a file with the specified path. Path must include file extension.
            </summary>
      <param name="path">The path to which to save the document page.</param>
      <remarks>The <see cref="T:SautinSoft.Document.SaveOptions" /> will be automatically chosen by the extension.<br />
            If a file with the same name is already exists, it will be overwritten by the new.<br />
            Following file extensions are supported: Portable Document Format: .pdf
            </remarks>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\06. Split and Merge\02. Split document by pages\Sample.cs" title="Loads a document and split it by separate pages. Saves the each page into PDF format in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\06. Split and Merge\02. Split document by pages\Sample.vb" title="Loads a document and split it by separate pages. Saves the each page into PDF format in VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.PaginatorOptions">
      <summary>
            Represents options which used while paginating the document.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\09. Advanced\04. Table of Contents - Update TOC\Sample.cs" title="Update table of contents in word document in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\09. Advanced\04. Table of Contents - Update TOC\Sample.vb" title="Update table of contents in word document in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.PaginatorOptions.UpdateFields">
      <summary>
            Gets or sets a value indicating whether to update fields while paginating the document. Default: <b>true</b>.
            </summary>
      <remarks>
        <see cref="P:SautinSoft.Document.Field.ResultInlines" /> will be reset while paginating the document for each supported field in the document.
            Currently supported fields are: <see cref="F:SautinSoft.Document.FieldType.Page" />, 
            <see cref="F:SautinSoft.Document.FieldType.PageRef" />,
            <see cref="F:SautinSoft.Document.FieldType.NumPages" />, 
            <see cref="F:SautinSoft.Document.FieldType.Section" />, 
            <see cref="F:SautinSoft.Document.FieldType.SectionPages" />,
            <see cref="F:SautinSoft.Document.FieldType.FormCheckBox" />,
            <see cref="F:SautinSoft.Document.FieldType.FormDropDown" />,
            <see cref="F:SautinSoft.Document.FieldType.FormText" />,
            <see cref="F:SautinSoft.Document.FieldType.Date" /> and
            <see cref="F:SautinSoft.Document.FieldType.Time" />,
            </remarks>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\09. Advanced\04. Table of Contents - Update TOC\Sample.cs" title="Update table of contents in word document in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\09. Advanced\04. Table of Contents - Update TOC\Sample.vb" title="Update table of contents in word document in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.PaginatorOptions.UpdateContentControls">
      <summary>
            Gets or sets a value indicating whether to update content of <see cref="T:SautinSoft.Document.CustomMarkups.BlockContentControl" /> and 
            <see cref="T:SautinSoft.Document.CustomMarkups.InlineContentControl" /> while paginating the document. Default: <b>true</b>.
            </summary>
      <remarks>
            This property is applicable when the <see cref="P:SautinSoft.Document.CustomMarkups.ContentControlProperties.XmlMapping" /> is defined.
            <see cref="P:SautinSoft.Document.CustomMarkups.BlockContentControl.Blocks" /> and <see cref="P:SautinSoft.Document.CustomMarkups.InlineContentControl.Inlines" />
            will be reset while paginating the document.
            Currently supported content control types are: <see cref="F:SautinSoft.Document.CustomMarkups.ContentControlType.PlainText" />, 
            <see cref="F:SautinSoft.Document.CustomMarkups.ContentControlType.RichText" />,
            <see cref="F:SautinSoft.Document.CustomMarkups.ContentControlType.CheckBox" />,
            <see cref="F:SautinSoft.Document.CustomMarkups.ContentControlType.ComboBox" />,
            <see cref="F:SautinSoft.Document.CustomMarkups.ContentControlType.DropDownList" />,
            <see cref="F:SautinSoft.Document.CustomMarkups.ContentControlType.Date" />.
            </remarks>
    </member>
    <member name="P:SautinSoft.Document.PaginatorOptions.ShowHiddenText">
      <summary>
            Gets or sets a value indicating whether to show hidden text. Default: <b>false</b>.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.PaginatorOptions.ShowRevision">
      <summary>
            Gets or sets a value indicating whether to show revision (tracked change). Default: <b>true</b>.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.PaginatorOptions.ShowListRevisionDifferences">
      <summary>
            Gets or sets a value indicating whether to show revision differences in list items. Default: <b>true</b>.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.PaginatorOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.PaginatorOptions" /> class.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\09. Advanced\04. Table of Contents - Update TOC\Sample.cs" title="Update table of contents in word document in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\09. Advanced\04. Table of Contents - Update TOC\Sample.vb" title="Update table of contents in word document in VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.PdfSaveOptions">
      <summary>
            Represents a class that stores saving options for Adobe Portable Document Format (PDF) format.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\04. Save as\03. Save a document as PDF\Sample.cs" title="How to save a document in PDF format using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\04. Save as\03. Save a document as PDF\Sample.vb" title="How to save a document in PDF format using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.PdfSaveOptions.ContentType">
      <summary>
            Gets the content-type for PDF file format: <b>application/pdf</b>.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.PdfSaveOptions.DigitalSignature">
      <summary>
            Gets the digital signature options.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\07. Document Properties\04. Digital Signature\Sample.cs" title="Generate PDF document with the digital signature using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\07. Document Properties\04. Digital Signature\Sample.vb" title="Generate PDF document with the digital signature using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.PdfSaveOptions.EncryptionDetails">
      <summary>
            Gets the encryption options.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\07. Document Properties\05. Secure a Document by password\Sample.cs" title="Create and secure a PDF document by password. Also set the permissions for the document using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\07. Document Properties\05. Secure a Document by password\Sample.vb" title="Create and secure a PDF document by password. Also set the permissions for the document using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.PdfSaveOptions.Compliance">
      <summary>
            Specifies the PDF standards compliance level for output documents.
            Default is <see cref="F:SautinSoft.Document.PdfCompliance.PDF_15" />.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\07. Document Properties\03. PDF-A Compliance\Sample.cs" title="Load an existing document (*.docx, *.rtf, *.pdf, *.html, *.txt, *.pdf) and save it as a PDF/A compliant version using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\07. Document Properties\03. PDF-A Compliance\Sample.vb" title="Load an existing document (*.docx, *.rtf, *.pdf, *.html, *.txt, *.pdf) and save it as a PDF/A compliant version using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.PdfSaveOptions.ClipboardTextProtection">
      <summary>
            Gets and sets the protection on copying of all text from PDF document through clipboard.
            </summary>
      <remarks>
            Default value: false. In case of true, it's impossible to copy text to the clipboard from 
            resulting PDF. Important: The PDF document can be displayed incorrectly in some editors and
            converted back to Word also incorrectly.
            </remarks>
    </member>
    <member name="P:SautinSoft.Document.PdfSaveOptions.Compression">
      <summary>
            Allows to set compression to change size of the PDF document.
            </summary>
      <remarks>Default value is true.
            </remarks>
    </member>
    <member name="P:SautinSoft.Document.PdfSaveOptions.EmbedAllFonts">
      <summary>
            Embed all used fonts inside the PDF document. Default value: false.
            </summary>
      <remarks>
            This makes the PDF document completely standalone and independent of fonts installed
            on the computer where the PDF document will be opened.
            </remarks>
    </member>
    <member name="P:SautinSoft.Document.PdfSaveOptions.UseCoreFonts">
      <summary>
            Gets or sets a value determining whether or not to substitute TrueType fonts Arial,
            Times New Roman, Courier New and Symbol with core PDF Type 1 fonts. Default value: false.
            </summary>
      <remarks>
            The default value is true. When this value is set to true Arial, Times New Roman,
            Courier New and Symbol fonts are replaced in PDF document with corresponding core Type 1 font.
            </remarks>
    </member>
    <member name="P:SautinSoft.Document.PdfSaveOptions.PageIndex">
      <summary>
            Gets or sets the 0-based index of the first page to save. Default is 0.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.PdfSaveOptions.PageCount">
      <summary>
            Gets or sets the number of pages to save.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\04. Save as\03. Save a document as PDF\Sample.cs" title="How to save a document in PDF format using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\04. Save as\03. Save a document as PDF\Sample.vb" title="How to save a document in PDF format using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.PdfSaveOptions.SelectedPages">
      <summary>
            Gets or sets a custom page 0-based index set for save.    
            Setting <see cref="P:SautinSoft.Document.PdfSaveOptions.PageIndex" /> or 
            <see cref="P:SautinSoft.Document.PdfSaveOptions.PageCount" /> properties are overrides 
            <see cref="P:SautinSoft.Document.PdfSaveOptions.SelectedPages" />.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.PdfSaveOptions.PaginatorOptions">
      <summary>
            Gets or sets paginator options.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.PdfSaveOptions.EmbImagesFormat">
      <summary>
            Specifies the image format to embed in the document during the saving. Default value: <see cref="F:SautinSoft.Document.PdfSaveOptions.EmbImagesFormat.Auto" />.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PdfSaveOptions.EmbImagesFormat.Auto">
      <summary>
            Default. In this case the embedded images will keep their original format. The Jpeg images will be stored using Jpeg codec, the all others as PNG.
            </summary>
      <remarks>
            Together with this option you can also control jpeg quality, using the property <see cref="P:SautinSoft.Document.PdfSaveOptions.EmbeddedJpegQuality">EmbeddedJpegQuality</see>.
            </remarks>
    </member>
    <member name="F:SautinSoft.Document.PdfSaveOptions.EmbImagesFormat.Jpeg">
      <summary>
            Force to convert all images into Jpeg format. Be careful: using Jpeg for images you can reduce the PDF size, but could lose the transparency.
            </summary>
      <remarks>
            Together with this option you can also control jpeg quality, using the property <see cref="P:SautinSoft.Document.PdfSaveOptions.EmbeddedJpegQuality">EmbeddedJpegQuality</see>.
            </remarks>
    </member>
    <member name="F:SautinSoft.Document.PdfSaveOptions.EmbImagesFormat.Png">
      <summary>
            Force to convert all images into Png format.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.PdfSaveOptions.EmbeddedJpegQuality">
      <summary>
            Gets and sets the value value indicating Jpeg quality level. Affects only to the images which embedded in Jpeg format. Default value: 90.
            </summary>
      <remarks>
        <p>The amount of JPEG compression should really depend on the usage purpose for the JPEG, and the contents of the JPEG.</p>
        <p>The quality level one should choose when exporting an image to JPEG is highly dependent upon the kind of detail contained within the image.</p>
        <p>An image of a smooth blue sky or a sunset sky with large areas of orange gradient should probably use a high quality setting, 90-100. An image that contains nothing but complex detail could probably get away with a quality setting of 50-60, possibly even lower.There is no single "best" JPEG compression setting, and depending on the type and complexity of detail(or lack of complexity and detail), you may find yourself using 40-60, 70-80, or 90-100 as appropriate for the photo(s) you are exporting.</p>
        <p>Here is a test with quality from left to right: 10, 20, 30, 40, 55, 70, 80, 90, 100%.<br />File sizes for the full files are: 210k, 278k, 347k, 477k, 601k, 709k, 987k, 1.7M, 7M.</p>
      </remarks>
    </member>
    <member name="P:SautinSoft.Document.PdfSaveOptions.EmbeddedImagesFormat">
      <summary>
            Gets and sets the format to embed images in the saving document. Default value: <see cref="F:SautinSoft.Document.PdfSaveOptions.EmbImagesFormat.Auto" />.
            </summary>
      <remarks>Using this property together with the <see cref="P:SautinSoft.Document.PdfSaveOptions.EmbeddedJpegQuality">EmbeddedJpegQuality</see> allows you to reduce to size of the saved document.</remarks>
    </member>
    <member name="P:SautinSoft.Document.PdfSaveOptions.PreserveFormFields">
      <summary>
            Specifies whether to preserve Microsoft Word form fields as native PDF's form fields or convert 
            them to text. Default is <b>true</b>.
            </summary>
      <remarks>
            Following fields are supported: <see cref="F:SautinSoft.Document.FieldType.FormText" />, <see cref="F:SautinSoft.Document.FieldType.FormDropDown" /> and <see cref="F:SautinSoft.Document.FieldType.FormCheckBox" />.
            When set to <b>false</b>, these fields will be exported as text to PDF. 
            When set to <b>true</b>, these fields will be exported as PDF form fields.
            </remarks>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\09. Advanced\05. Forms and Fields\Sample.cs" title="Generate document (PDF) with forms and fields in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\09. Advanced\05. Forms and Fields\Sample.vb" title="Generate document (PDF) with forms and fields in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.PdfSaveOptions.PreserveContentControls">
      <summary>
            Specifies whether to preserve Microsoft Word content controls as native PDF's form fields or convert 
            them to text. Default is <b>true</b>.
            </summary>
      <remarks>
            Following content controls are supported: <see cref="F:SautinSoft.Document.CustomMarkups.ContentControlType.PlainText" />, <see cref="F:SautinSoft.Document.CustomMarkups.ContentControlType.RichText" />,
            <see cref="F:SautinSoft.Document.CustomMarkups.ContentControlType.DropDownList" />, <see cref="F:SautinSoft.Document.CustomMarkups.ContentControlType.ComboBox" /> and 
            <see cref="F:SautinSoft.Document.CustomMarkups.ContentControlType.CheckBox" />.
            When set to <b>false</b>, these controls will be exported as text to PDF. 
            When set to <b>true</b>, these controls will be exported as PDF form fields.
            </remarks>
    </member>
    <member name="M:SautinSoft.Document.PdfSaveOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.PdfSaveOptions" /> class.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\04. Save as\03. Save a document as PDF\Sample.cs" title="How to save a document in PDF format using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\04. Save as\03. Save a document as PDF\Sample.vb" title="How to save a document in PDF format using VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.HtmlLoadOptions">
      <summary>
            Represents a class that stores loading options for HyperText Markup Language (HTML) format.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\03. Load\06. Load a HTML document\Sample.cs" title="How to load a HTML document in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\03. Load\06. Load a HTML document\Sample.vb" title="How to load a HTML document in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.HtmlLoadOptions.BaseAddress">
      <summary>
            Gets or sets the base address for images with relative location.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.HtmlLoadOptions.Encoding">
      <summary>
            Gets or sets the encoding for the HTML file.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.HtmlLoadOptions.PageSetup">
      <summary>
            Gets and sets the page setup properties: paper type, orientation, margins and so forth.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.HtmlLoadOptions.PreserveHyperlinks">
      <summary>
            Get and set the value whether to preserve hyperlinks during the HTML loading or skip them. Default value: true.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.HtmlLoadOptions.DefaultFontFamily">
      <summary>
            Gets and sets a default font family for the loading HTML document. Default value: "Times New Roman".
            </summary>
    </member>
    <member name="P:SautinSoft.Document.HtmlLoadOptions.DefaultFontSize">
      <summary>
            Gets and sets a default font size for the loading HTML document. Default value: 12f.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.HtmlLoadOptions.DefaultFontColor">
      <summary>
            Gets and sets a default font color for the loading HTML document. Default value: <see cref="F:SautinSoft.Document.Color.Black">SautinSoft.Document.Color.Black</see>.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.HtmlLoadOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.HtmlLoadOptions" /> class.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\03. Load\06. Load a HTML document\Sample.cs" title="How to load a HTML document in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\03. Load\06. Load a HTML document\Sample.vb" title="How to load a HTML document in VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.DocumentPaginator">
      <summary>
            Provides a functionality to paginate the document content.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\04. Save as\07. Save a document as Image\Sample.cs" title="Load DOCX a document and save all pages as images in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\04. Save as\07. Save a document as Image\Sample.vb" title="Load DOCX a document and save all pages as images in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.DocumentPaginator.Pages">
      <summary>
            Gets the document pages.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.DocumentPaginator.GetElementFrames(SautinSoft.Document.ElementType[])">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.ElementFrame" />s that was layouted while pagination.
            </summary>
      <param name="filterElements">Specify the <see cref="T:SautinSoft.Document.ElementType" />s which you want to get. For all types leave empty.</param>
      <returns>Returns sequence of <see cref="T:SautinSoft.Document.ElementFrame" />s.</returns>
    </member>
    <member name="T:SautinSoft.Document.DocumentWriteProtection">
      <summary>
            Represents the write protection options for the document. Supported only in DOCX format.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.DocumentWriteProtection.SetPassword(System.String)">
      <summary>
            Sets the password. If password is <see langword="null" /> or empty,
            any existing password will be cleared.
            </summary>
      <param name="password">The password.</param>
    </member>
    <member name="P:SautinSoft.Document.DocumentWriteProtection.HasPassword">
      <summary>
            Returns true if document is protected with the password against re-saving to the same file name.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.DocumentWriteProtection.ReadOnlyRecommended">
      <summary>
            Gets or sets option that specifies if applications should provide user interface
            recommending that the user open this document in write protected state.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.DocumentEditProtection">
      <summary>
            Represents a set of document editing protection restrictions which have been applied to 
            the contents of a document.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.DocumentEditProtection.SetPassword(System.String)">
      <summary>
            Sets the password. If password is <see langword="null" /> or empty,
            any existing password will be cleared.
            </summary>
      <param name="password">The password.</param>
    </member>
    <member name="P:SautinSoft.Document.DocumentEditProtection.EditingRestriction">
      <summary>
            Gets or sets the set of editing restrictions which shall be enforced on a given document.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.DocumentEditProtection.HasPassword">
      <summary>
            Gets a value indicating whether document protection has password.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.DocumentEditProtection.LimitFormatting">
      <summary>
            Gets or sets a value indicating whether formatting is limited just to unlocked styles.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.DocumentEditProtection.EnforceEditingRestriction">
      <summary>
            Gets or sets a value indicating whether document protection settings shall be 
            enforced for a given document.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.DocumentEditProtection.StartEnforcingProtection(SautinSoft.Document.EditingRestrictionType,System.String)">
      <summary>
            Starts enforcing protection by restricting document editing actions
            to those specified by <i>editingRestriction</i> parameter with optional password
            which must be specified to stop protection in consumer application such as <b>MS Word</b>.
            </summary>
      <param name="editingRestriction">
            The editing restriction enforced upon the document in consumer application.
            </param>
      <param name="password">The optional password which must be specified to stop protection.</param>
    </member>
    <member name="M:SautinSoft.Document.DocumentEditProtection.StopProtection">
      <summary>
            Stops enforcing protection and clears password, if there is any.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.FormFieldDataCollection">
      <summary>
            Represents a collection of <see cref="T:SautinSoft.Document.FormFieldData" /> instances associated 
            with form fields from a particular part of document content.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.FormFieldDataCollection.Item(System.String)">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.FormFieldData" /> associated with the form field 
            with the specified name or <see langword="null" /> if no form field with the specified
            name exists in the current range.
            </summary>
      <param name="name">The name of the form field.</param>
      <returns>
            The <see cref="T:SautinSoft.Document.FormFieldData" /> associated with the form field 
            with the specified <i>name</i> or <see langword="null" /> if no form field with the 
            specified <i>name</i> exists in the current range.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.FormFieldDataCollection.GetAll(System.String)">
      <summary>
            Gets all <see cref="T:SautinSoft.Document.FormFieldData" /> instances associated with 
            form fields with the specified name.
            </summary>
      <param name="name">The name of the form field.</param>
      <returns>
            A sequence of all <see cref="T:SautinSoft.Document.FormFieldData" /> instances associated 
            with form fields with the specified <i>name</i>.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.FormFieldDataCollection.Reset">
      <summary>
            Resets all form fields contained in this collection.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.FormFieldDataCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1">IEnumerator&lt;FormFieldData&gt;</see> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="T:SautinSoft.Document.ImportSession">
      <summary>
            Represents an import session that maps styles (and other referenced objects) between two different 
            <see cref="T:SautinSoft.Document.DocumentCore" /> instances.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\06. Split and Merge\01. Merge two documents\Sample.cs" title="How to merge two documents: DOCX and PDF in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\06. Split and Merge\01. Merge two documents\Sample.vb" title="How to merge two documents: DOCX and PDF in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.ImportSession.SourceDocument">
      <summary>
            Gets the source document. 
            </summary>
    </member>
    <member name="P:SautinSoft.Document.ImportSession.DestinationDocument">
      <summary>
            Gets the destination document.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.ImportSession.ImportMode">
      <summary>
            Gets or sets style importing mode.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\06. Split and Merge\01. Merge two documents\Sample.cs" title="How to merge two documents: DOCX and PDF in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\06. Split and Merge\01. Merge two documents\Sample.vb" title="How to merge two documents: DOCX and PDF in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.ImportSession.Mapping">
      <summary>
            Gets the dictionary that contains styles mapping.
            <i>Key</i> is style in source document. <i>Value</i> is style in destination document.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.ImportSession.#ctor(SautinSoft.Document.DocumentCore,SautinSoft.Document.DocumentCore,SautinSoft.Document.StyleImportingMode)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.ImportSession" /> class.
            </summary>
      <param name="sourceDocument">The source document.</param>
      <param name="destinationDocument">The destination document.</param>
      <param name="importingMode">Specifies how to merge style formatting that clashes.</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\08. Manipulation\11. Element - Import with KeepDifferentStyles\Sample.cs" title="Import an Element with Styles from another document. Mode: KeepDifferentStyles using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\08. Manipulation\11. Element - Import with KeepDifferentStyles\Sample.vb" title="Import an Element with Styles from another document. Mode: KeepDifferentStyles using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.ImportSession.#ctor(SautinSoft.Document.DocumentCore,SautinSoft.Document.DocumentCore)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.ImportSession" /> class.
            </summary>
      <param name="sourceDocument">The source document.</param>
      <param name="destinationDocument">The destination document.</param>
      <remarks>
            Property <see cref="P:SautinSoft.Document.ImportSession.ImportMode" /> will be set to 
            <see cref="F:SautinSoft.Document.StyleImportingMode.UseDestinationStyles" />.
            </remarks>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\08. Manipulation\11. Element - Import with KeepDifferentStyles\Sample.cs" title="Import an Element with Styles from another document. Mode: KeepDifferentStyles using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\08. Manipulation\11. Element - Import with KeepDifferentStyles\Sample.vb" title="Import an Element with Styles from another document. Mode: KeepDifferentStyles using VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.PdfLoadOptions">
      <summary>
            Represents a class that stores loading options for Portable Document Format (PDF).
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\03. Load\03. Load a PDF document\Sample.cs" title="Loads a PDF document into DocumentCore using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\03. Load\03. Load a PDF document\Sample.vb" title="Loads a PDF document into DocumentCore using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.PdfLoadOptions.ConversionMode">
      <summary>
            Gets or sets PDF document conversion mode. Default value: <see cref="F:SautinSoft.Document.PdfConversionMode.Flowing" />.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.PdfLoadOptions.Password">
      <summary>
            Gets or sets the password to open protected / encrypted PDF document. Default value: String.Empty.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.PdfLoadOptions.PageIndex">
      <summary>
            Gets or sets the 0-based index of the first page to load. Default value: 0.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.PdfLoadOptions.PageCount">
      <summary>
            Gets or sets the number of pages to load. Default value: <see cref="F:System.Int32.MaxValue" />.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\03. Load\03. Load a PDF document\Sample.cs" title="Loads a PDF document into DocumentCore using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\03. Load\03. Load a PDF document\Sample.vb" title="Loads a PDF document into DocumentCore using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.PdfLoadOptions.SelectedPages">
      <summary>
            Gets or sets an array with pages to load (0-based index).    
            Setting <see cref="P:SautinSoft.Document.PdfLoadOptions.PageIndex" /> or 
            <see cref="P:SautinSoft.Document.PdfLoadOptions.PageCount" /> properties are overrides 
            <see cref="P:SautinSoft.Document.PdfLoadOptions.SelectedPages" />.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.PdfLoadOptions.ShowInvisibleText">
      <summary>
            Gets or sets a value indicating whether to load invisible text or skip it. Default value: false.
            </summary>
      <remarks>
            For OCR-ed documents we recommend to set this property to true. <br /><br />
            Default value: false.<br /></remarks>
    </member>
    <member name="P:SautinSoft.Document.PdfLoadOptions.ShapeAnchoring">
      <summary>
            Gets or sets a value indicating whether shape's coordinates are anchored relative to paragraph or not. Default value: true.
            </summary>
      <remarks>
            Default value: true.<br /></remarks>
    </member>
    <member name="P:SautinSoft.Document.PdfLoadOptions.ShapeGrouping">
      <summary>
            Gets or sets a value indicating whether to group the shapes or not. Default value: true.
            </summary>
      <remarks>
            Default value: true.<br /></remarks>
    </member>
    <member name="P:SautinSoft.Document.PdfLoadOptions.KeepCharScaleAndSpacing">
      <summary>
            Gets or sets a value indicating whether to keep the original char scaling and spacing or reset it to all symbols to 100%. Default value: true.
            </summary>
      <remarks>
            For OCR-ed documents we recommend to set this property to false. <br /><br />
            Default value: true.<br /></remarks>
    </member>
    <member name="P:SautinSoft.Document.PdfLoadOptions.DetectTables">
      <summary>
            Gets or sets a value indicating whether to recreate tables or leave them as graphical lines. Default value: false.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.PdfLoadOptions.OptimizeImages">
      <summary>
            Gets or sets a value indicating whether to merge adjacent images into a one. Default value: true.
            </summary>
      <remarks>
            This property allows to reduce the total size and the number of images in the document.<br />
            We recommend you to set it to true when to reduce th document size and ready to loose a little bit in the quality of images.<br /></remarks>
    </member>
    <member name="P:SautinSoft.Document.PdfLoadOptions.RasterizeVectorGraphics">
      <summary>
            Gets or sets a value indicating whether to rasterize complex vector graphics or leave them as is. Default value: false.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.PdfLoadOptions.PreserveImages">
      <summary>
            Gets or sets a value indicating whether to load images from PDF or skip them. Default value: true.
            </summary>
      <remarks>
            Default value: true.<br />
            In case of 'false' you may significantly save a time of loading a PDF document and using of memory.<br />
            we recommend to set this property to 'false' when you are need only in textual data from PDF.
            </remarks>
    </member>
    <member name="P:SautinSoft.Document.PdfLoadOptions.PreserveGraphics">
      <summary>
            Gets or sets a value indicating whether to load vector graphics from PDF or skip it. Default value: true.
            </summary>
      <remarks>
            Default value: true.<br />
            In case of 'false' you may significantly save a time of loading a PDF document and using of memory.<br />
            We recommend to set this property to 'false' when you are need only in textual data from PDF.<br />
            Note: that in case of 'false' the properties <see cref="P:SautinSoft.Document.PdfLoadOptions.DetectTables" /> and <see cref="P:SautinSoft.Document.PdfLoadOptions.RasterizeVectorGraphics" /> will not work.
            </remarks>
    </member>
    <member name="P:SautinSoft.Document.PdfLoadOptions.PreserveEmbeddedFonts">
      <summary>
            Gets or sets a value indicating whether to load embedded fonts from PDF and store them in document or skip it. Default value: false.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.PdfLoadOptions.AllowGraphicHyperlinks">
      <summary>
            Gets or sets a value indicating whether to allow graphic hyperlinks. Default value: false.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.PdfLoadOptions.OCROptions">
      <summary>
            Gets and sets options to enable and adjust OCR (optical character recognition).
            </summary>
    </member>
    <member name="T:SautinSoft.Document.PdfLoadOptions.PageProgressDelegate">
      <summary>
            Allows to define a progress indicator
            </summary>
      <param name="current">current page</param>
      <param name="total">total pages</param>
    </member>
    <member name="E:SautinSoft.Document.PdfLoadOptions.NotifyPageProgress">
      <summary>
            Allows to define a progress indicator
            </summary>
    </member>
    <member name="M:SautinSoft.Document.PdfLoadOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.PdfLoadOptions" /> class.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\03. Load\03. Load a PDF document\Sample.cs" title="Loads a PDF document into DocumentCore using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\03. Load\03. Load a PDF document\Sample.vb" title="Loads a PDF document into DocumentCore using VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.MailMerging.MailMergeClearOptions">
      <summary>
            Specifies options that determine what items are removed during mail merge.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\10. Reporting and Mail Merge\02. Mail Merge Clear Options\Sample.cs" title="Shows how use ClearOptions - remove specific elements if no data has been imported into them in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\10. Reporting and Mail Merge\02. Mail Merge Clear Options\Sample.vb" title="Shows how use ClearOptions - remove specific elements if no data has been imported into them in VB.Net">
        </code>
      </example>
    </member>
    <member name="F:SautinSoft.Document.MailMerging.MailMergeClearOptions.None">
      <summary>
            Do not remove unused fields nor empty ranges nor empty paragraphs.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.MailMerging.MailMergeClearOptions.RemoveUnusedFields">
      <summary>
            Remove fields for which no data has been found in the mail merge data source.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.MailMerging.MailMergeClearOptions.RemoveEmptyRanges">
      <summary>
            Remove ranges into which no field has been merged.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.MailMerging.MailMergeClearOptions.RemoveEmptyParagraphs">
      <summary>
            Remove paragraphs which contained merge fields but none of them has been merged.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.MailMerging.MailMergeClearOptions.RemoveEmptyTableRows">
      <summary>
            Remove table rows which contained merge fields but none of them has been merged.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.MailMerging.FieldMappingDictionary">
      <summary>
            Represents a dictionary that is used in mail merge when
            <see cref="T:SautinSoft.Document.Field" />s and data source columns have different names.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.MailMerging.FieldMappingDictionary.Add(System.String,System.String)">
      <summary>
            Adds a new mapping from field name to data source column name.
            </summary>
      <param name="fieldName">The field name.</param>
      <param name="valueName">The data source column name.</param>
    </member>
    <member name="T:SautinSoft.Document.MailMerging.FieldMergingEventArgs">
      <summary>
            Provides data for the <see cref="E:SautinSoft.Document.MailMerging.MailMerge.FieldMerging" /> event.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.MailMerging.FieldMergingEventArgs.Document">
      <summary>
            Gets the owner document.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.MailMerging.FieldMergingEventArgs.Field">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.Field" /> that will be replaced.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.MailMerging.FieldMergingEventArgs.FieldName">
      <summary>
            Gets the name of the merge field in the data source.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.MailMerging.FieldMergingEventArgs.Inline">
      <summary>
            Gets or sets the <see cref="T:SautinSoft.Document.Inline" /> that will replace the 
            <see cref="T:SautinSoft.Document.Field" />.
            </summary>
      <remarks>
        <para>
            Value of this property depends on a value of the 
            <see cref="P:SautinSoft.Document.MailMerging.FieldMergingEventArgs.Inlines" /> property.
            </para>
        <para>
            If <see cref="P:SautinSoft.Document.MailMerging.FieldMergingEventArgs.Inlines" /> is not empty,
            this property represents the first <see cref="T:SautinSoft.Document.Inline" /> element
            from it, otherwise <see langword="null" />.</para>
        <para>
            Setting this property will automatically clear 
            <see cref="P:SautinSoft.Document.MailMerging.FieldMergingEventArgs.Inlines" /> collection 
            and will add new value to it, if value is not <see langword="null" />.
            </para>
      </remarks>
    </member>
    <member name="P:SautinSoft.Document.MailMerging.FieldMergingEventArgs.Inlines">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.Inline" />s that will replace the
            <see cref="T:SautinSoft.Document.Field" />.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.MailMerging.FieldMergingEventArgs.IsValueFound">
      <summary>
            Gets a value indicating whether a value was found in the data source.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.MailMerging.FieldMergingEventArgs.RangeName">
      <summary>
            Gets the mail merge range name.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.MailMerging.FieldMergingEventArgs.RecordNumber">
      <summary>
            Gets the data source record number.
            </summary>
      <remarks>
            Record number starts from 1, not 0.
            </remarks>
    </member>
    <member name="P:SautinSoft.Document.MailMerging.FieldMergingEventArgs.Value">
      <summary>
            Gets the data source value for a specified <see cref="T:SautinSoft.Document.Field" />.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.MailMerging.IMailMergeDataSource">
      <summary>
            Implement this interface to allow mail merge from a custom data source.
            </summary>
      <remarks>
            When a data source is created, it should be initialized to point to BOF (before the first record).
            The mail merge engine will invoke <see cref="M:SautinSoft.Document.MailMerging.IMailMergeDataSource.MoveNext" /> 
            to advance to next record and then invoke
            <see cref="M:SautinSoft.Document.MailMerging.IMailMergeDataSource.TryGetValue(System.String,System.Object@)" />
            for every merge field it encounters in the document or the current mail merge region.
            </remarks>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\10. Reporting and Mail Merge\04. Custom Data Source\Sample.cs" title="Generate reports using a custom data source (collection of custom classes Actor and Order) in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\10. Reporting and Mail Merge\04. Custom Data Source\Sample.vb" title="Generate reports using a custom data source (collection of custom classes Actor and Order) in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.MailMerging.IMailMergeDataSource.MoveNext">
      <summary>
            Advances to the next record in the data source.
            </summary>
      <returns>
        <see langword="true" /> if next record is available; otherwise <see langword="false" />.
            </returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\10. Reporting and Mail Merge\04. Custom Data Source\Sample.cs" title="Generate reports using a custom data source (collection of custom classes Actor and Order) in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\10. Reporting and Mail Merge\04. Custom Data Source\Sample.vb" title="Generate reports using a custom data source (collection of custom classes Actor and Order) in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.MailMerging.IMailMergeDataSource.TryGetValue(System.String,System.Object@)">
      <summary>
            Tries to get the value with a name equal to <i>valueName</i> from the
            current record in data source.
            </summary>
      <param name="valueName">The name of the data field.</param>
      <param name="value">Returns the field value.</param>
      <returns>
        <see langword="true" /> if value was found.
            </returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\10. Reporting and Mail Merge\04. Custom Data Source\Sample.cs" title="Generate reports using a custom data source (collection of custom classes Actor and Order) in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\10. Reporting and Mail Merge\04. Custom Data Source\Sample.vb" title="Generate reports using a custom data source (collection of custom classes Actor and Order) in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.MailMerging.IMailMergeDataSource.GetChildDataSource(System.String)">
      <summary>
            The mail merge engine invokes this method when it encounters
            a beginning of a nested mail merge region.
            </summary>
      <param name="sourceName">
            The name of the mail merge region. Case-insensitive.
            </param>
      <returns>
            A data source object that will provide access to the data records.
            </returns>
      <remarks>
        <para>
            When the mail merge engine populates a mail merge region with data and encounters 
            the beginning of a nested mail merge region in the form of "MERGEFIELD RangeStart:TableName", it invokes 
            <see cref="M:SautinSoft.Document.MailMerging.IMailMergeDataSource.GetChildDataSource(System.String)" /> 
            on the current data source object. 
            Your implementation needs to return a new data source object that will provide access
            to the child records of the current parent record. 
            </para>
        <para>
            Below are the rules that the implementation of 
            <see cref="M:SautinSoft.Document.MailMerging.IMailMergeDataSource.GetChildDataSource(System.String)" />
            must follow.
            </para>
        <para>
            If the table that is represented by this data source object has a related child (detail) 
            table with the specified name, then your implementation needs to return a 
            new <see cref="T:SautinSoft.Document.MailMerging.IMailMergeDataSource" /> object that will
            provide access to the child records of the current record.
            An example of this is Orders / OrderDetails relationship. 
            Let's assume that the current <see cref="T:SautinSoft.Document.MailMerging.IMailMergeDataSource" /> 
            object represents the Orders table and it has a current order record. 
            Next, mail merge engine encounters "MERGEFIELD RangeStart:OrderDetails" in the document
            and invokes <see cref="M:SautinSoft.Document.MailMerging.IMailMergeDataSource.GetChildDataSource(System.String)" />.
            You need to create and return a <see cref="T:SautinSoft.Document.MailMerging.IMailMergeDataSource" />
            object that will allow to access the OrderDetails record for the current order.
            </para>
        <para>
            If a data source with the specified <i>sourceName</i> does not exist, your implementation should 
            return <see langword="null" />.
            </para>
      </remarks>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\10. Reporting and Mail Merge\04. Custom Data Source\Sample.cs" title="Generate reports using a custom data source (collection of custom classes Actor and Order) in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\10. Reporting and Mail Merge\04. Custom Data Source\Sample.vb" title="Generate reports using a custom data source (collection of custom classes Actor and Order) in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.MailMerging.IMailMergeDataSource.Name">
      <summary>
            Returns the name of the data source.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\10. Reporting and Mail Merge\04. Custom Data Source\Sample.cs" title="Generate reports using a custom data source (collection of custom classes Actor and Order) in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\10. Reporting and Mail Merge\04. Custom Data Source\Sample.vb" title="Generate reports using a custom data source (collection of custom classes Actor and Order) in VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.MailMerging.MailMerge">
      <summary>
            Represents the mail merge functionality.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\10. Reporting and Mail Merge\03. Table Report with Regions\Sample.cs" title="Generates a table report with regions based on DOCX template and XML document as data source in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\10. Reporting and Mail Merge\03. Table Report with Regions\Sample.vb" title="Generates a table report with regions based on DOCX template and XML document as data source in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.MailMerging.MailMerge.Document">
      <summary>
            Gets the owner document.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.MailMerging.MailMerge.ClearOptions">
      <summary>
            Gets or sets a set of flags that specify what items should be removed during mail merge.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\10. Reporting and Mail Merge\02. Mail Merge Clear Options\Sample.cs" title="Shows how use ClearOptions - remove specific elements if no data has been imported into them in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\10. Reporting and Mail Merge\02. Mail Merge Clear Options\Sample.vb" title="Shows how use ClearOptions - remove specific elements if no data has been imported into them in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.MailMerging.MailMerge.FieldMappings">
      <summary>
            Gets the mappings from field names to data source column names.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.MailMerging.MailMerge.RangeStartPrefix">
      <summary>
            Gets or sets a mail merge region start prefix.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.MailMerging.MailMerge.RangeEndPrefix">
      <summary>
            Gets or sets a mail merge region end prefix.
            </summary>
    </member>
    <member name="E:SautinSoft.Document.MailMerging.MailMerge.FieldMerging">
      <summary>
            Occurs when <see cref="T:SautinSoft.Document.Field" /> is merging with data source
            value and can be used to customize the merging operation.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.MailMerging.MailMerge.Execute(System.Object)">
      <summary>
            Executes a mail merge operation with specified data source.
            </summary>
      <param name="dataSource">
            The mail merge data source.
            </param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\10. Reporting and Mail Merge\03. Table Report with Regions\Sample.cs" title="Generates a table report with regions based on DOCX template and XML document as data source in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\10. Reporting and Mail Merge\03. Table Report with Regions\Sample.vb" title="Generates a table report with regions based on DOCX template and XML document as data source in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.MailMerging.MailMerge.Execute(System.Object,System.String)">
      <summary>
            Executes a mail merge operation with specified range name and data source.
            </summary>
      <param name="dataSource">The mail merge data source.</param>
      <param name="rangeName">The mail merge range name.</param>
    </member>
    <member name="M:SautinSoft.Document.MailMerging.MailMerge.ClearTemplate(System.Boolean,System.Boolean)">
      <summary>
            Remove all MergeFields from the current document.
            </summary>
      <param name="removeMergeFields">Remove all MergeFields in case of true.</param>
      <param name="removeMergeRanges">Remove the all ranges of MergeFields in case of true.</param>
      <returns>
            Returns the number of removed MergeFields.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.MailMerging.MailMerge.GetMergeFieldNames">
      <summary>
            Gets a collection of mail merge field names available in the document.
            </summary>
      <returns>
            A sequence of a merge field names.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.MailMerging.MailMerge.RemoveMergeFields">
      <summary>
            Removes all mail merge related fields
            (<see cref="F:SautinSoft.Document.FieldType.MergeField" />,
            <see cref="F:SautinSoft.Document.FieldType.MergeRec" />,
            <see cref="F:SautinSoft.Document.FieldType.MergeSeq" />,
            <see cref="F:SautinSoft.Document.FieldType.Next" /> and 
            <see cref="F:SautinSoft.Document.FieldType.If" />)
            from the document.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.MailMerging.MailMerge.RemoveMergeFields(System.Boolean)">
      <summary>
            Removes mail merge related fields from the document.
            </summary>
      <param name="allRelatedMergeFields">
            if set to <see langword="true" /> all mail merge related fields are removed, 
            such as <see cref="F:SautinSoft.Document.FieldType.MergeField" />,
            <see cref="F:SautinSoft.Document.FieldType.MergeRec" />,
            <see cref="F:SautinSoft.Document.FieldType.MergeSeq" />,
            <see cref="F:SautinSoft.Document.FieldType.Next" /> and 
            <see cref="F:SautinSoft.Document.FieldType.If" /> fields; 
            otherwise <see cref="F:SautinSoft.Document.FieldType.MergeField" /> only.
            </param>
    </member>
    <member name="T:SautinSoft.Document.RtfLoadOptions">
      <summary>
            Represents a class that stores loading options for Rich Text (RTF) format.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\03. Load\05. Load a RTF document\Sample.cs" title="How to load a RTF document using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\03. Load\05. Load a RTF document\Sample.vb" title="How to load a RTF document using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.RtfLoadOptions.Encoding">
      <summary>
            Gets or sets the encoding for the RTF file.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.RtfLoadOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.RtfLoadOptions" /> class.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\03. Load\05. Load a RTF document\Sample.cs" title="How to load a RTF document using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\03. Load\05. Load a RTF document\Sample.vb" title="How to load a RTF document using VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.RtfSaveOptions">
      <summary>
            Represents options for saving to Rich Text (RTF) format.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\04. Save as\04. Save a document as RTF\Sample.cs" title="How to save a document in RTF format using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\04. Save as\04. Save a document as RTF\Sample.vb" title="How to save a document in RTF format using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.RtfSaveOptions.ContentType">
      <summary>
            Gets the content-type for RTF file format: <b>application/rtf</b>.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.RtfSaveOptions.Encoding">
      <summary>
            Gets or sets the encoding for the RTF file.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.RtfSaveOptions.CalculateListItems">
      <summary>
            When true, list items contained in the document will be recalculates before saving. Default: <b>true</b>.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.RtfSaveOptions.EmbImagesFormat">
      <summary>
            Specifies the image format to embed in the document during the saving. Default value: <see cref="F:SautinSoft.Document.RtfSaveOptions.EmbImagesFormat.Auto" />.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.RtfSaveOptions.EmbImagesFormat.Auto">
      <summary>
            Default. In this case the embedded images will keep their original format. The Jpeg images will be stored using Jpeg codec, the all others as PNG.
            </summary>
      <remarks>
            Together with this option you can also control jpeg quality, using the property <see cref="P:SautinSoft.Document.RtfSaveOptions.EmbeddedJpegQuality">EmbeddedJpegQuality</see>.
            </remarks>
    </member>
    <member name="F:SautinSoft.Document.RtfSaveOptions.EmbImagesFormat.Jpeg">
      <summary>
            Force to convert all images into Jpeg format. Be careful: using Jpeg for images you can reduce the PDF size, but could lose the transparency.
            </summary>
      <remarks>
            Together with this option you can also control jpeg quality, using the property <see cref="P:SautinSoft.Document.RtfSaveOptions.EmbeddedJpegQuality">EmbeddedJpegQuality</see>.
            </remarks>
    </member>
    <member name="F:SautinSoft.Document.RtfSaveOptions.EmbImagesFormat.Png">
      <summary>
            Force to convert all images into Png format.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.RtfSaveOptions.EmbeddedJpegQuality">
      <summary>
            Gets and sets the value value indicating Jpeg quality level. Affects only to the images which embedded in Jpeg format. Default value: 90.
            </summary>
      <remarks>
        <p>The amount of JPEG compression should really depend on the usage purpose for the JPEG, and the contents of the JPEG.</p>
        <p>The quality level one should choose when exporting an image to JPEG is highly dependent upon the kind of detail contained within the image.</p>
        <p>An image of a smooth blue sky or a sunset sky with large areas of orange gradient should probably use a high quality setting, 90-100. An image that contains nothing but complex detail could probably get away with a quality setting of 50-60, possibly even lower.There is no single "best" JPEG compression setting, and depending on the type and complexity of detail(or lack of complexity and detail), you may find yourself using 40-60, 70-80, or 90-100 as appropriate for the photo(s) you are exporting.</p>
        <p>Here is a test with quality from left to right: 10, 20, 30, 40, 55, 70, 80, 90, 100%.<br />File sizes for the full files are: 210k, 278k, 347k, 477k, 601k, 709k, 987k, 1.7M, 7M.</p>
      </remarks>
    </member>
    <member name="P:SautinSoft.Document.RtfSaveOptions.EmbeddedImagesFormat">
      <summary>
            Gets and sets the format to embed images in the saving document. Default value: <see cref="F:SautinSoft.Document.RtfSaveOptions.EmbImagesFormat.Auto" />.
            </summary>
      <remarks>Using this property together with the <see cref="P:SautinSoft.Document.RtfSaveOptions.EmbeddedJpegQuality">EmbeddedJpegQuality</see> allows you to reduce to size of the saved document.</remarks>
    </member>
    <member name="M:SautinSoft.Document.RtfSaveOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.RtfSaveOptions" /> class.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\04. Save as\04. Save a document as RTF\Sample.cs" title="How to save a document in RTF format using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\04. Save as\04. Save a document as RTF\Sample.vb" title="How to save a document in RTF format using VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.TxtSaveOptions">
      <summary>
            Represents options for saving to plain text (TXT) format.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\04. Save as\06. Save a document as Text\Sample.cs" title="How to save a document in Text format using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\04. Save as\06. Save a document as Text\Sample.vb" title="How to save a document in Text format using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.TxtSaveOptions.ContentType">
      <summary>
            Gets the content-type for TXT file format: "text/plain; charset=" + 
            <see cref="P:System.Text.Encoding.WebName" />.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.TxtSaveOptions.Encoding">
      <summary>
            Gets or sets the encoding for the TXT file.
            Default value is <see cref="P:System.Text.Encoding.UTF8" />.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.TxtSaveOptions.ParagraphBreak">
      <summary>
            Gets or sets the string to use as a paragraph break.
            Default value is <see cref="P:System.Environment.NewLine" />.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.TxtSaveOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.TxtSaveOptions" /> class.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\04. Save as\06. Save a document as Text\Sample.cs" title="How to save a document in Text format using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\04. Save as\06. Save a document as Text\Sample.vb" title="How to save a document in Text format using VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.DocxSaveOptions">
      <summary>
            Represents a class that stores saving options for Microsoft Word (DOCX) format.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\04. Save as\02. Save a document as DOCX\Sample.cs" title="How to save a document in DOCX format using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\04. Save as\02. Save a document as DOCX\Sample.vb" title="How to save a document in DOCX format using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.DocxSaveOptions.ContentType">
      <summary>
            Gets the content-type for DOCX file format: <b>application/vnd.openxmlformats</b>.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.DocxSaveOptions.Format">
      <summary>
            Gets or sets the Word file format into which to save the 
            <see cref="T:SautinSoft.Document.DocumentCore" /> instance.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.DocxSaveOptions.Password">
      <summary>
            Gets or sets the password used to protect / encrypt the document.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.DocxSaveOptions.EmbImagesFormat">
      <summary>
            Specifies the image format to embed in the document during the saving. Default value: <see cref="F:SautinSoft.Document.DocxSaveOptions.EmbImagesFormat.Auto" />.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.DocxSaveOptions.EmbImagesFormat.Auto">
      <summary>
            Default. In this case the embedded images will keep their original format. The Jpeg images will be stored using Jpeg codec, the all others as PNG.
            </summary>
      <remarks>
            Together with this option you can also control jpeg quality, using the property <see cref="P:SautinSoft.Document.DocxSaveOptions.EmbeddedJpegQuality">EmbeddedJpegQuality</see>.
            </remarks>
    </member>
    <member name="F:SautinSoft.Document.DocxSaveOptions.EmbImagesFormat.Jpeg">
      <summary>
            Force to convert all images into Jpeg format. Be careful: using Jpeg for images you can reduce the document size, but could lose the transparency.
            </summary>
      <remarks>
            Together with this option you can also control jpeg quality, using the property <see cref="P:SautinSoft.Document.DocxSaveOptions.EmbeddedJpegQuality">EmbeddedJpegQuality</see>.
            </remarks>
    </member>
    <member name="F:SautinSoft.Document.DocxSaveOptions.EmbImagesFormat.Png">
      <summary>
            Force to convert all images into Png format.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.DocxSaveOptions.EmbeddedJpegQuality">
      <summary>
            Gets and sets the value value indicating Jpeg quality level. Affects only to the images which embedded in Jpeg format. Default value: 90.
            </summary>
      <remarks>
        <p>The amount of JPEG compression should really depend on the usage purpose for the JPEG, and the contents of the JPEG.</p>
        <p>The quality level one should choose when exporting an image to JPEG is highly dependent upon the kind of detail contained within the image.</p>
        <p>An image of a smooth blue sky or a sunset sky with large areas of orange gradient should probably use a high quality setting, 90-100. An image that contains nothing but complex detail could probably get away with a quality setting of 50-60, possibly even lower.There is no single "best" JPEG compression setting, and depending on the type and complexity of detail(or lack of complexity and detail), you may find yourself using 40-60, 70-80, or 90-100 as appropriate for the photo(s) you are exporting.</p>
        <p>Here is a test with quality from left to right: 10, 20, 30, 40, 55, 70, 80, 90, 100%.<br />File sizes for the full files are: 210k, 278k, 347k, 477k, 601k, 709k, 987k, 1.7M, 7M.</p>
      </remarks>
    </member>
    <member name="P:SautinSoft.Document.DocxSaveOptions.EmbeddedImagesFormat">
      <summary>
            Gets and sets the format to embed images in the saving document. Default value: <see cref="F:SautinSoft.Document.DocxSaveOptions.EmbImagesFormat.Auto" />.
            </summary>
      <remarks>Using this property together with the <see cref="P:SautinSoft.Document.DocxSaveOptions.EmbeddedJpegQuality">EmbeddedJpegQuality</see> allows you to reduce to size of the saved document.</remarks>
    </member>
    <member name="M:SautinSoft.Document.DocxSaveOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.DocumentCore" /> class.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\04. Save as\02. Save a document as DOCX\Sample.cs" title="How to save a document in DOCX format using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\04. Save as\02. Save a document as DOCX\Sample.vb" title="How to save a document in DOCX format using VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.SaveOptions">
      <summary>
            Represents a base class for saving options of various file formats.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\04. Save as\01. Save a document\Sample.cs" title="How to save a document in a desired format using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\04. Save as\01. Save a document\Sample.vb" title="How to save a document in a desired format using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.SaveOptions.ContentType">
      <summary>
            Gets the content-type for this specific file format as defined in the RFC 2616.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.SaveOptions.DocxDefault">
      <summary>
            Gets the default saving options for Microsoft Word file format.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\04. Save as\02. Save a document as DOCX\Sample.cs" title="How to save a document in DOCX format using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\04. Save as\02. Save a document as DOCX\Sample.vb" title="How to save a document in DOCX format using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.SaveOptions.RtfDefault">
             summary&gt;
             Gets the default saving options for HyperText Markup Language (HTML) format.
             /summary&gt;
            public static HtmlSaveOptions HtmlDefault { get; }
            <summary>
            Gets the default saving options for Rich Text (RTF) format.
            </summary><example><code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\04. Save as\04. Save a document as RTF\Sample.cs" title="How to save a document in RTF format using C#"></code><code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\04. Save as\04. Save a document as RTF\Sample.vb" title="How to save a document in RTF format using VB.Net"></code></example></member>
    <member name="P:SautinSoft.Document.SaveOptions.TxtDefault">
      <summary>
            Gets the default saving options for Plain Text (TXT) format.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\04. Save as\06. Save a document as Text\Sample.cs" title="How to save a document in Text format using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\04. Save as\06. Save a document as Text\Sample.vb" title="How to save a document in Text format using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.SaveOptions.HtmlFlowingDefault">
      <summary>
            Gets the default saving options for flowing HyperText Markup Language (HTML) format.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\04. Save as\05. Save a document as HTML\Sample.cs" title="Save document as HTML (in the Fixed and Flowing modes) using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\04. Save as\05. Save a document as HTML\Sample.vb" title="Save document as HTML (in the Fixed and Flowing modes) using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.SaveOptions.HtmlFixedDefault">
      <summary>
            Gets the default saving options for fixed HyperText Markup Language (HTML) format.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\04. Save as\05. Save a document as HTML\Sample.cs" title="Save document as HTML (in the Fixed and Flowing modes) using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\04. Save as\05. Save a document as HTML\Sample.vb" title="Save document as HTML (in the Fixed and Flowing modes) using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.SaveOptions.PdfDefault">
      <summary>
            Gets the default saving options for Adobe Portable Document format (PDF).
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\04. Save as\03. Save a document as PDF\Sample.cs" title="How to save a document in PDF format using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\04. Save as\03. Save a document as PDF\Sample.vb" title="How to save a document in PDF format using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.SaveOptions.ImageDefault">
      <summary>
            Gets the default saving options for Image format (PDF). Default image format: multipage  TIF.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.DocxLoadOptions">
      <summary>
            Represents a class that stores loading options for Microsoft Word (DOCX) format.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\03. Load\02. Load a DOCX document\Sample.cs" title="How to load a DOCX document in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\03. Load\02. Load a DOCX document\Sample.vb" title="How to load a DOCX document in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.DocxLoadOptions.Password">
      <summary>
            Gets or sets the password to open protected / encrypted document.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.DocxLoadOptions.EmbedExternalImages">
      <summary>
            Gets or sets a value indicating whether external images
            should be embedded directly into document.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.DocxLoadOptions.PreserveUnsupportedFeatures">
      <summary>
            Gets or sets a value indicating whether to preserve file format features that are
            not directly supported.
            </summary>
      <remarks>
            Default value is set to <see langword="true" />.
            </remarks>
    </member>
    <member name="M:SautinSoft.Document.DocxLoadOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.DocxLoadOptions" /> class.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\03. Load\02. Load a DOCX document\Sample.cs" title="How to load a DOCX document in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\03. Load\02. Load a DOCX document\Sample.vb" title="How to load a DOCX document in VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.TxtLoadOptions">
      <summary>
            Represents a class that stores loading options for plain text (TXT) format.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.TxtLoadOptions.Encoding">
      <summary>
            Gets or sets the encoding for the TXT file. Default value: <see cref="P:System.Text.Encoding.UTF8" />.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.TxtLoadOptions.AllowLineBreaks">
      <summary>
            When true, Line-Feed (0x0A) character will be converted to <see cref="F:SautinSoft.Document.SpecialCharacterType.LineBreak" />; 
            otherwise it will creates new paragraph. Default: false.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.TxtLoadOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.TxtLoadOptions" /> class.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.LoadOptions">
      <summary>
            Represents a base class for loading options of various file formats.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\03. Load\01. Load a document\Sample.cs" title="How to load a document using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\03. Load\01. Load a document\Sample.vb" title="How to load a document using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.LoadOptions.DocxDefault">
      <summary>
            Gets the default loading options for Microsoft Word (DOCX) format.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\03. Load\02. Load a DOCX document\Sample.cs" title="How to load a DOCX document in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\03. Load\02. Load a DOCX document\Sample.vb" title="How to load a DOCX document in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.LoadOptions.HtmlDefault">
      <summary>
            Gets the default loading options for HyperText Markup Language (HTML) format.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\03. Load\06. Load a HTML document\Sample.cs" title="How to load a HTML document in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\03. Load\06. Load a HTML document\Sample.vb" title="How to load a HTML document in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.LoadOptions.RtfDefault">
      <summary>
            Gets the default loading options for Rich Text (RTF) format.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\03. Load\05. Load a RTF document\Sample.cs" title="How to load a RTF document using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\03. Load\05. Load a RTF document\Sample.vb" title="How to load a RTF document using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.LoadOptions.TxtDefault">
      <summary>
            Gets the default loading options for Plain Text (TXT) format.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.LoadOptions.ImageDefault">
      <summary>
            Gets the default loading options for image (JPG, PNG, BMP, TIF,)format.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.LoadOptions.PdfDefault">
      <summary>
            Gets the default loading options for Portable Document Format (PDF).
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\03. Load\03. Load a PDF document\Sample.cs" title="How to load a PDF document in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\03. Load\03. Load a PDF document\Sample.vb" title="How to load a PDF document in VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.LengthUnitConverter">
      <summary>
            Utility class used for converting values between various 
            <see cref="T:SautinSoft.Document.LengthUnit" /> measurement units.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\09. Advanced\07. Unit Conversion\Sample.cs" title="Shows what is the one point is equal in different units in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\09. Advanced\07. Unit Conversion\Sample.vb" title="Shows what is the one point is equal in different units in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.LengthUnitConverter.Convert(System.Double,SautinSoft.Document.LengthUnit,SautinSoft.Document.LengthUnit)">
      <summary>
            Converts the specified length from <i>sourceUnit</i> measurement unit to 
            <i>destinationUnit</i> measurement unit.
            </summary>
      <param name="length">The length that will be converted.</param>
      <param name="sourceUnit">The source measurement unit.</param>
      <param name="destinationUnit">The destination measurement unit.</param>
      <returns>The converted value in the destination measurement units.</returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\09. Advanced\07. Unit Conversion\Sample.cs" title="Shows what is the one point is equal in different units in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\09. Advanced\07. Unit Conversion\Sample.vb" title="Shows what is the one point is equal in different units in VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.ContentPosition">
      <summary>
            Represents a position within a document.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\08. Manipulation\04. Content - Insert\Sample.cs" title="Creates a new document with some content using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\08. Manipulation\04. Content - Insert\Sample.vb" title="Creates a new document with some content using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.ContentPosition.Parent">
      <summary>
            Gets the parent that scopes the current <see cref="T:SautinSoft.Document.ContentPosition" />.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.ContentPosition.Insert(SautinSoft.Document.ContentRange)">
      <summary>
            Inserts the content of the specified <see cref="T:SautinSoft.Document.ContentRange" /> 
            at the current <see cref="T:SautinSoft.Document.ContentPosition" />.
            </summary>
      <param name="range">
            The <see cref="T:SautinSoft.Document.ContentRange" /> which content should be inserted 
            at the current <see cref="T:SautinSoft.Document.ContentPosition" />.</param>
      <returns>
            A <see cref="T:SautinSoft.Document.ContentPosition" /> instance which points to a
            location just after the inserted content.
            </returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\08. Manipulation\04. Content - Insert\Sample.cs" title="Creates a new document with some content using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\08. Manipulation\04. Content - Insert\Sample.vb" title="Creates a new document with some content using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.ContentPosition.Insert(SautinSoft.Document.ContentRange,SautinSoft.Document.ImportSession)">
      <summary>
            Inserts the content of the specified <see cref="T:SautinSoft.Document.ContentRange" /> 
            (from another <see cref="T:SautinSoft.Document.DocumentCore" /> instance) 
            at the current <see cref="T:SautinSoft.Document.ContentPosition" />.
            </summary>
      <param name="range">
            The <see cref="T:SautinSoft.Document.ContentRange" /> which content should be inserted 
            at the current <see cref="T:SautinSoft.Document.ContentPosition" />.
            </param>
      <param name="session">Import session.</param>
      <returns>
            A <see cref="T:SautinSoft.Document.ContentPosition" /> instance which points to a
            location just after the inserted content.
            </returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\08. Manipulation\04. Content - Insert\Sample.cs" title="Creates a new document with some content using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\08. Manipulation\04. Content - Insert\Sample.vb" title="Creates a new document with some content using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.ContentPosition.Insert(System.String,SautinSoft.Document.CharacterFormat,SautinSoft.Document.TxtLoadOptions)">
      <summary>
            Inserts the specified text with specific formatting at the current
            <see cref="T:SautinSoft.Document.ContentPosition" />.
            </summary>
      <param name="text">
            The text which should be inserted 
            at the current <see cref="T:SautinSoft.Document.ContentPosition" />.</param>
      <param name="format">
            The formatting of the text.</param>
      <param name="options">
            The options used to define settings for insert operation.</param>
      <returns>
            A <see cref="T:SautinSoft.Document.ContentPosition" /> instance which points to a
            location just after the inserted text.
            </returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\08. Manipulation\04. Content - Insert\Sample.cs" title="Creates a new document with some content using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\08. Manipulation\04. Content - Insert\Sample.vb" title="Creates a new document with some content using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.ContentPosition.Insert(System.String)">
      <summary>
            Inserts the specified text at the current <see cref="T:SautinSoft.Document.ContentPosition" />.
            </summary>
      <param name="text">
            The text which should be inserted 
            at the current <see cref="T:SautinSoft.Document.ContentPosition" />.</param>
      <returns>
            A <see cref="T:SautinSoft.Document.ContentPosition" /> instance which points to a
            location just after the inserted text.
            </returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\08. Manipulation\04. Content - Insert\Sample.cs" title="Creates a new document with some content using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\08. Manipulation\04. Content - Insert\Sample.vb" title="Creates a new document with some content using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.ContentPosition.Insert(System.String,SautinSoft.Document.CharacterFormat)">
      <summary>
            Inserts the specified text with specific formatting at the current
            <see cref="T:SautinSoft.Document.ContentPosition" />.
            </summary>
      <param name="text">
            The text which should be inserted 
            at the current <see cref="T:SautinSoft.Document.ContentPosition" />.</param>
      <param name="format">
            The formatting of the text.</param>
      <returns>
            A <see cref="T:SautinSoft.Document.ContentPosition" /> instance which points to a
            location just after the inserted text.
            </returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\08. Manipulation\04. Content - Insert\Sample.cs" title="Creates a new document with some content using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\08. Manipulation\04. Content - Insert\Sample.vb" title="Creates a new document with some content using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.ContentPosition.Insert(System.String,SautinSoft.Document.TxtLoadOptions)">
      <summary>
            Inserts the specified text at the current <see cref="T:SautinSoft.Document.ContentPosition" />.
            </summary>
      <param name="text">
            The text which should be inserted 
            at the current <see cref="T:SautinSoft.Document.ContentPosition" />.</param>
      <param name="options">
            The options used to define settings for insert operation.</param>
      <returns>
            A <see cref="T:SautinSoft.Document.ContentPosition" /> instance which points to a
            location just after the inserted text.
            </returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\08. Manipulation\04. Content - Insert\Sample.cs" title="Creates a new document with some content using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\08. Manipulation\04. Content - Insert\Sample.vb" title="Creates a new document with some content using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.ContentPosition.Insert(System.String,SautinSoft.Document.RtfLoadOptions)">
      <summary>
            Inserts the specified rich text at the current <see cref="T:SautinSoft.Document.ContentPosition" />.
            </summary>
      <param name="text">
            The rich text which should be inserted 
            at the current <see cref="T:SautinSoft.Document.ContentPosition" />.</param>
      <param name="options">
            The options used to define settings for insert operation.</param>
      <returns>
            A <see cref="T:SautinSoft.Document.ContentPosition" /> instance which points to a
            location just after the inserted rich text.
            </returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\08. Manipulation\04. Content - Insert\Sample.cs" title="Creates a new document with some content using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\08. Manipulation\04. Content - Insert\Sample.vb" title="Creates a new document with some content using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.ContentPosition.Insert(System.String,SautinSoft.Document.HtmlLoadOptions)">
      <summary>
            Inserts the specified html text at the current <see cref="T:SautinSoft.Document.ContentPosition" />.
            </summary>
      <param name="text">
            The html text which should be inserted 
            at the current <see cref="T:SautinSoft.Document.ContentPosition" />.</param>
      <param name="options">
            The options used to define settings for insert operation.</param>
      <returns>
            A <see cref="T:SautinSoft.Document.ContentPosition" /> instance which points to a
            location just after the inserted html text.
            </returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\08. Manipulation\04. Content - Insert\Sample.cs" title="Creates a new document with some content using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\08. Manipulation\04. Content - Insert\Sample.vb" title="Creates a new document with some content using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.ContentPosition.Equals(System.Object)">
      <summary>
            Determines whether the specified object is equal to this <see cref="T:SautinSoft.Document.ContentPosition" /> instance.
            </summary>
      <param name="obj">The object to compare with this <see cref="T:SautinSoft.Document.ContentPosition" /> instance.</param>
      <returns>
            true if the specified object is a <see cref="T:SautinSoft.Document.ContentPosition" /> and is equal 
            to this <see cref="T:SautinSoft.Document.ContentPosition" /> instance; otherwise, false.
            </returns>
    </member>
    <member name="T:SautinSoft.Document.DocumentSettings">
      <summary>
            Represents stored preferences which shall be used when processing the contents of the document.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.DocumentSettings.ZoomPercentage">
      <summary>
            Gets or sets the percentage (between 10 and 500) at which you want to view your document.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.DocumentSettings.ZoomType">
      <summary>
            Gets or sets a zoom value based on the size of the window.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.DocumentSettings.DefaultTabStop">
      <summary>
            Gets or sets the value which shall be used as the multiplier to generate automatic tab stops in this document.
            </summary>
      <remarks>
            Default value is 36 points (half an inch).
            </remarks>
    </member>
    <member name="P:SautinSoft.Document.DocumentSettings.HasFacingPages">
      <summary>
            When true, the document has different headers and footers for odd-numbered and
            even-numbered pages.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.DocumentSettings.UseIndentAsNumberingTabStop">
      <summary>
            When true, use hanging indent (if any) as tab stop for bullets and numbering. 
            </summary>
    </member>
    <member name="P:SautinSoft.Document.DocumentSettings.CharacterSpacingControl">
      <summary>
            Gets or sets the possible ways in which full-width characters can be compressed to remove 
            additional whitespace when the contents of this document are displayed.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.DocumentSettings.UseHtmlParagraphAutoSpacing">
      <summary>
            When true, use HTML paragraph auto spacing.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.DocumentSettings.SplitPageBreakAndParagraphMark">
      <summary>
            Gets or sets the value whether to split or not page break and paragraph mark.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.DocumentSettings.CompatibilityMode">
      <summary>
            Gets or sets the Microsoft Word compatibility mode. For Microsoft Word 2016, set this value to 15.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.DocumentSettings.MirrorMargins">
      <summary>
            When true, left and right margins defined in the page settings will be swapped on every second page.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.DocumentSettings.Endnote">
      <summary>
            Gets the endnote settings.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.DocumentSettings.EndnoteSeparator">
      <summary>
            Gets the endnote separator's blocks.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.DocumentSettings.EndnoteContinuationSeparator">
      <summary>
            Gets the endnote continuation separator's blocks.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.DocumentSettings.Footnote">
      <summary>
            Gets the footnote settings.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.DocumentSettings.FootnoteSeparator">
      <summary>
            Gets the footnote separator's blocks.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.DocumentSettings.FootnoteContinuationSeparator">
      <summary>
            Gets the footnote continuation separator's blocks.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.DocumentSettings.Variables">
      <summary>
            Gets a dictionary of document variables.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.CustomDocumentPropertiesDictionary">
      <summary>
            Represents a dictionary that contains <see cref="T:System.String" /> key and 
            <see cref="T:System.Object" /> value pairs.
            </summary>
      <remarks>
        <para>
          <see cref="T:System.String" /> values cannot be null or <see cref="F:System.String.Empty" />.
            </para>
        <para>
          <see cref="T:System.Object" /> values cannot be null and can be only one of the following types:
            <list type="bullet"><item><description><see cref="T:System.Boolean" /></description></item><item><description><see cref="T:System.DateTime" /></description></item><item><description><see cref="T:System.String" /></description></item><item><description><see cref="T:System.Double" /></description></item><item><description><see cref="T:System.Int32" /></description></item></list></para>
      </remarks>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\07. Document Properties\01. Built-in Document Properties\Sample.cs" title="Read built-in document properties (from .docx) and enumerate them in new PDF document as small report using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\07. Document Properties\01. Built-in Document Properties\Sample.vb" title="Read built-in document properties (from .docx) and enumerate them in new PDF document as small report using VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.DictionaryBase`2">
      <summary>
            Provides a base class for generic dictionary.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="P:SautinSoft.Document.DictionaryBase`2.Count">
      <summary>
            Gets the number of key/value pairs contained in the
            <see cref="T:SautinSoft.Document.DictionaryBase`2" />.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.DictionaryBase`2.Item(`0)">
      <summary>
            Gets or sets the value associated with the specified key.
            </summary>
      <param name="key">The key of the value to get or set.</param>
      <returns>The value associated with the specified key.</returns>
      <exception cref="T:System.ArgumentNullException">key or value is null.</exception>
    </member>
    <member name="P:SautinSoft.Document.DictionaryBase`2.Keys">
      <summary>
            Gets a collection containing the keys in the 
            <see cref="T:SautinSoft.Document.DictionaryBase`2" />.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.DictionaryBase`2.Values">
      <summary>
            Gets a collection containing the values in the 
            <see cref="T:SautinSoft.Document.DictionaryBase`2" />.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.DictionaryBase`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="M:SautinSoft.Document.DictionaryBase`2.Add(`0,`1)">
      <summary>
            Adds a element with the provided key and value to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <param name="key">The object to use as the key of the element to add.</param>
      <param name="value">The object to use as the value of the element to add.</param>
      <exception cref="T:System.ArgumentNullException">key or value is null.</exception>
      <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</exception>
    </member>
    <member name="M:SautinSoft.Document.DictionaryBase`2.Clear">
      <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</exception>
    </member>
    <member name="M:SautinSoft.Document.DictionaryBase`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains a specific value.
            </summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</param>
      <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.IDictionary`2" />; otherwise, false.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.DictionaryBase`2.ContainsKey(`0)">
      <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key.
            </summary>
      <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</param>
      <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the key; otherwise, false.
            </returns>
      <exception cref="T:System.ArgumentNullException">key is null.</exception>
    </member>
    <member name="M:SautinSoft.Document.DictionaryBase`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">array is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from arrayIndex to the end of the destination array.</exception>
    </member>
    <member name="M:SautinSoft.Document.DictionaryBase`2.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.DictionaryBase`2.Remove(`0)">
      <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
      <param name="key">The key of the element to remove.</param>
      <returns>
            true if the element is successfully removed; otherwise, false. This method also returns false if key was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">key is null.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</exception>
    </member>
    <member name="M:SautinSoft.Document.DictionaryBase`2.TryGetValue(`0,`1@)">
      <summary>
            Gets the value associated with the specified key.
            </summary>
      <param name="key">The key whose value to get.</param>
      <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
      <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key; otherwise, false.
            </returns>
      <exception cref="T:System.ArgumentNullException">key is null.</exception>
    </member>
    <member name="T:SautinSoft.Document.DocumentProperties">
      <summary>
            Contains a dictionaries of built-in and custom document properties.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\07. Document Properties\01. Built-in Document Properties\Sample.cs" title="Read built-in document properties (from .docx) and enumerate them in new PDF document as small report using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\07. Document Properties\01. Built-in Document Properties\Sample.vb" title="Read built-in document properties (from .docx) and enumerate them in new PDF document as small report using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.DocumentProperties.BuiltIn">
      <summary>
            Gets a dictionary of built-in document properties.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\07. Document Properties\01. Built-in Document Properties\Sample.cs" title="Read built-in document properties (from .docx) and enumerate them in new PDF document as small report using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\07. Document Properties\01. Built-in Document Properties\Sample.vb" title="Read built-in document properties (from .docx) and enumerate them in new PDF document as small report using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.DocumentProperties.Custom">
      <summary>
            Gets a dictionary of custom document properties.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\07. Document Properties\01. Built-in Document Properties\Sample.cs" title="Read built-in document properties (from .docx) and enumerate them in new PDF document as small report using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\07. Document Properties\01. Built-in Document Properties\Sample.vb" title="Read built-in document properties (from .docx) and enumerate them in new PDF document as small report using VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.HeaderFooterCollection">
      <summary>
            Represents a collection of <see cref="T:SautinSoft.Document.HeaderFooter" /> elements.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\02. Sections and Page Layout\02. Headers and Footers\01. Header and Footer\Sample.cs" title="How to add a header and footer in the document using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\02. Sections and Page Layout\02. Headers and Footers\01. Header and Footer\Sample.vb" title="How to add a header and footer in the document using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.HeaderFooterCollection.Item(SautinSoft.Document.HeaderFooterType)">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.HeaderFooter" /> with the specified type.
            Returns <see langword="null" /> if collection doesn't contain <see cref="T:SautinSoft.Document.HeaderFooter" />
            with the specified type.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.HeaderFooter">
      <summary>
            Represents a header or footer; allows to operate with headers and footers.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\02. Sections and Page Layout\02. Headers and Footers\01. Header and Footer\Sample.cs" title="How to add a header and footer in the document using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\02. Sections and Page Layout\02. Headers and Footers\01. Header and Footer\Sample.vb" title="How to add a header and footer in the document using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.HeaderFooter.ElementType">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.ElementType" /> of this element instance.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\02. Sections and Page Layout\02. Headers and Footers\01. Header and Footer\Sample.cs" title="How to add a header and footer in the document using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\02. Sections and Page Layout\02. Headers and Footers\01. Header and Footer\Sample.vb" title="How to add a header and footer in the document using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.HeaderFooter.ParentCollection">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.HeaderFooterCollection" /> that contains this
            <see cref="T:SautinSoft.Document.HeaderFooter" /> instance.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.HeaderFooter.Blocks">
      <summary>
            Gets the header / footer content.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\02. Sections and Page Layout\02. Headers and Footers\01. Header and Footer\Sample.cs" title="How to add a header and footer in the document using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\02. Sections and Page Layout\02. Headers and Footers\01. Header and Footer\Sample.vb" title="How to add a header and footer in the document using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.HeaderFooter.HeaderFooterType">
      <summary>
            Gets the type of the header / footer.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\02. Sections and Page Layout\02. Headers and Footers\05. Different Headers\Sample.cs" title="Create a document with different headers: on first page, default and in another section using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\02. Sections and Page Layout\02. Headers and Footers\05. Different Headers\Sample.vb" title="Create a document with different headers: on first page, default and in another section using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.HeaderFooter.IsHeader">
      <summary>
            Gets a value indicating whether this instance is header.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.HeaderFooter.Parent">
      <summary>
            Gets the parent <see cref="T:SautinSoft.Document.Section" /> of this 
            <see cref="T:SautinSoft.Document.HeaderFooter" /> instance.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.HeaderFooter.Clone(System.Boolean)">
      <summary>
            Clones this <see cref="T:SautinSoft.Document.HeaderFooter" /> instance.
            </summary>
      <param name="cloneDescendants">
            If set to <see langword="true" /> clone all descendants recursively; 
            otherwise clone only current <see cref="T:SautinSoft.Document.HeaderFooter" />.
            </param>
      <returns>
            Cloned <see cref="T:SautinSoft.Document.HeaderFooter" />.
            </returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\02. Sections and Page Layout\02. Headers and Footers\03. Edit Header and Footer\Sample.cs" title="How to edit Header and Footer in PDF file using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\02. Sections and Page Layout\02. Headers and Footers\03. Edit Header and Footer\Sample.vb" title="How to edit Header and Footer in PDF file using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.HeaderFooter.Clone(SautinSoft.Document.HeaderFooterType)">
      <summary>
            Clones this <see cref="T:SautinSoft.Document.HeaderFooter" /> instance and
            sets new <see cref="T:SautinSoft.Document.HeaderFooterType" />.
            </summary>
      <param name="newType">The new header/footer type.</param>
      <returns>
            Cloned <see cref="T:SautinSoft.Document.HeaderFooter" />.
            </returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\02. Sections and Page Layout\02. Headers and Footers\03. Edit Header and Footer\Sample.cs" title="How to edit Header and Footer in PDF file using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\02. Sections and Page Layout\02. Headers and Footers\03. Edit Header and Footer\Sample.vb" title="How to edit Header and Footer in PDF file using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.HeaderFooter.#ctor(SautinSoft.Document.DocumentCore,SautinSoft.Document.HeaderFooterType)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.HeaderFooter" /> class.
            </summary>
      <param name="document">The owner document.</param>
      <param name="headerFooterType">Type of the header / footer.</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\02. Sections and Page Layout\02. Headers and Footers\02. Add Header and Footer\Sample.cs" title="How to add a header and footer into PDF document using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\02. Sections and Page Layout\02. Headers and Footers\02. Add Header and Footer\Sample.vb" title="How to add a header and footer into PDF document using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.HeaderFooter.#ctor(SautinSoft.Document.DocumentCore,SautinSoft.Document.HeaderFooterType,SautinSoft.Document.Block[])">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.HeaderFooter" /> class.
            </summary>
      <param name="document">The owner document.</param>
      <param name="headerFooterType">Type of the header / footer.</param>
      <param name="items">The header / footer content.</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\02. Sections and Page Layout\02. Headers and Footers\02. Add Header and Footer\Sample.cs" title="How to add a header and footer into PDF document using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\02. Sections and Page Layout\02. Headers and Footers\02. Add Header and Footer\Sample.vb" title="How to add a header and footer into PDF document using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.HeaderFooter.#ctor(SautinSoft.Document.DocumentCore,SautinSoft.Document.HeaderFooterType,System.Collections.Generic.IEnumerable{SautinSoft.Document.Block})">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.HeaderFooter" /> class.
            </summary>
      <param name="document">The owner document.</param>
      <param name="headerFooterType">Type of the header / footer.</param>
      <param name="items">The header / footer content.</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\02. Sections and Page Layout\02. Headers and Footers\02. Add Header and Footer\Sample.cs" title="How to add a header and footer into PDF document using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\02. Sections and Page Layout\02. Headers and Footers\02. Add Header and Footer\Sample.vb" title="How to add a header and footer into PDF document using VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.TableOfEntries">
      <summary>
            Represents a Table of Entries field, such as Table of Contents, Table of Figures,
            Table of Authorities, Index or Bibliography.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\09. Advanced\02. Table of Contents - Simple TOC\Sample.cs" title="Create a document with table of content using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\09. Advanced\02. Table of Contents - Simple TOC\Sample.vb" title="Create a document with table of content using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.TableOfEntries.ElementType">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.ElementType" /> of this element instance.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.TableOfEntries.Entries">
      <summary>
            Gets the table's entries.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\09. Advanced\03. Table of Contents - Extended TOC\Sample.cs" title="Create a document with table of content using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\09. Advanced\03. Table of Contents - Extended TOC\Sample.vb" title="Create a document with table of content using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.TableOfEntries.FieldType">
      <summary>
            Gets the field type.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\09. Advanced\03. Table of Contents - Extended TOC\Sample.cs" title="Create a document with table of content using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\09. Advanced\03. Table of Contents - Extended TOC\Sample.vb" title="Create a document with table of content using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.TableOfEntries.InstructionText">
      <summary>
            Gets or sets the field's instruction text (switches).
            </summary>
    </member>
    <member name="P:SautinSoft.Document.TableOfEntries.IsDirty">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:SautinSoft.Document.TableOfEntries" /> 
            is invalid and, because of that, it should be updated.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.TableOfEntries.Update">
      <summary>
            Performs an update on <see cref="F:SautinSoft.Document.FieldType.TOC" /> (Table of Contents) field.
            </summary>
      <remarks>
        <para>
            The <see cref="F:SautinSoft.Document.FieldType.TOC" /> field collects entries for a table 
            of contents using heading levels, specified styles, or entries specified by 
            <see cref="F:SautinSoft.Document.FieldType.TC" /> (Table of Contents Entry) fields.
            </para>
        <para>
            If <see cref="P:SautinSoft.Document.TableOfEntries.InstructionText" /> is not specified 
            <see cref="M:SautinSoft.Document.TableOfEntries.Update" /> method will set a default set of switches: 
            <b>\o "1-3" \h \u \z</b>.
            </para>
        <para>
          <b>Supported TOC field switches:</b>
        </para>
        <para>
            \o "Headings"<br /> 
            Builds a table of contents from paragraphs formatted with 
            built-in heading styles. For example, { TOC \o "1-3" } lists only headings formatted 
            with the styles Heading 1 through Heading 3. If no heading range is specified,
            all heading levels used in the document are listed. Enclose the range numbers in 
            quotation marks.
            </para>
        <para>
            \u<br /> 
            Builds a table of contents from paragraphs formatted with all built-in heading styles (1-9).
            </para>
        <para>
            \f EntryIdentifier<br /> 
            Builds a table from TC fields. If EntryIdentifier is specified, the table is built 
            only from TC fields with the same identifier (typically a letter). For example, { TOC \f t }
            builds a table of contents from TC fields such as { TC "Entry Text" \f t }.
            </para>
        <para>
            \h<br /> 
            Inserts TOC entries as hyperlinks.
            </para>
        <para>
            \n Levels<br /> 
            Omits page numbers from the table of contents. Page numbers are omitted from all levels
            unless a range of entry levels is specified. For example, { TOC \n 3-4 } omits page numbers 
            from levels 3 and 4. Delete this switch to include page numbers.
            </para>
        <para>
            \l Levels<br /> 
            Builds a table of contents from TC fields that assign entries to one of the specified levels.
            For example, { TOC \l 1-4 } builds a table of contents from TC fields that assign entries to 
            levels 1-4. TC fields that assign entries to lower levels are skipped.
            </para>
        <para>
            \p "Separators"<br /> 
            Specifies the characters that separate an entry and its page number. For example, 
            the field { TOC \p "—" }, with an em dash, displays a result such as "Selecting Text—53."
            The default is a tab with leader dots. You can use up to five characters, which must be
            enclosed in quotation marks.
            </para>
        <para>
          <b>Supported TC field instructions:</b>
        </para>
        <para>
            "Text"<br /> 
            Text to appear in the table of contents for an entry.
            </para>
        <para>
          <b>Supported TC field switches:</b>
        </para>
        <para>
            \f Type<br /> 
            The type of items collected in a particular contents list. Use a unique Type identifier 
            (typically a letter from A-Z) for each type of list. For example, to build a list of
            illustrations, mark each illustration with a field such as { TC "Illustration 1" \f i }, 
            where "i" indicates only illustration entries. If no type is specified, the entry is listed
            in a table of contents.
            </para>
        <para>
            \l Level<br /> 
            The level of the TC entry. For example, the field { TC "Entering Data" \l 4 } marks
            a level-4 entry, and Microsoft Word applies the built-in style TOC 4 to that entry in
            the table of contents. If no level is specified, level 1 is assumed.
            </para>
        <para>
            \n<br /> 
            Omits the page number for the entry.
            </para>
        <para>
            For more information about TOC and TC fields, see 
            <see href="https://support.office.com/en-us/article/Field-codes-in-Word-b0536e6f-5a23-4408-b90f-e7fc24c75416">
            Field codes in Word
            </see></para>
      </remarks>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\09. Advanced\04. Table of Contents - Update TOC\Sample.cs" title="Update table of contents in word document using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\09. Advanced\04. Table of Contents - Update TOC\Sample.vb" title="Update table of contents in word document using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.TableOfEntries.Clone(System.Boolean)">
      <summary>
            Clones this element instance.
            </summary>
      <remarks>
        <para>This method serves as a copy constructor for elements. The cloned element
            has no parent, but belongs to the same document as the original element. </para>
        <para>If you want to insert this element into another document, then you should
            first import it into another document with 
            <see cref="M:SautinSoft.Document.DocumentCore.Import``1(``0,System.Boolean,System.Boolean)">Import&lt;T&gt;(T,System.Boolean,System.Boolean)</see>
            method and then insert the imported element.
            </para>
      </remarks>
      <param name="cloneDescendants">
        <see langword="True" /> to clone all descendants.</param>
      <returns>
            The cloned element.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.TableOfEntries.#ctor(SautinSoft.Document.DocumentCore,SautinSoft.Document.FieldType)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.TableOfEntries" /> class.
            </summary>
      <param name="document">The owner document.</param>
      <param name="fieldType">The field type.
             (supported are only <see cref="F:SautinSoft.Document.FieldType.Index" />, 
             <see cref="F:SautinSoft.Document.FieldType.TOC" />, 
             <see cref="F:SautinSoft.Document.FieldType.TOA" /> and 
             <see cref="F:SautinSoft.Document.FieldType.Bibliography" />).
             </param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\09. Advanced\02. Table of Contents - Simple TOC\Sample.cs" title="Create a document with table of content using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\09. Advanced\02. Table of Contents - Simple TOC\Sample.vb" title="Create a document with table of content using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.TableOfEntries.#ctor(SautinSoft.Document.DocumentCore,SautinSoft.Document.FieldType,System.String,SautinSoft.Document.Block[])">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.TableOfEntries" /> class.
            </summary>
      <param name="document">The owner document.</param>
      <param name="fieldType">The field type.
             (supported are only <see cref="F:SautinSoft.Document.FieldType.Index" />, 
             <see cref="F:SautinSoft.Document.FieldType.TOC" />, 
             <see cref="F:SautinSoft.Document.FieldType.TOA" /> and 
             <see cref="F:SautinSoft.Document.FieldType.Bibliography" />).
             </param>
      <param name="entries">The table's entries.</param>
      <param name="instructionText">The field's instruction text (switches).</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\09. Advanced\02. Table of Contents - Simple TOC\Sample.cs" title="Create a document with table of content using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\09. Advanced\02. Table of Contents - Simple TOC\Sample.vb" title="Create a document with table of content using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.TableOfEntries.#ctor(SautinSoft.Document.DocumentCore,SautinSoft.Document.FieldType,System.String,System.Collections.Generic.IEnumerable{SautinSoft.Document.Block})">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.TableOfEntries" /> class.
            </summary>
      <param name="document">The owner document.</param>
      <param name="fieldType">The field type.
             (supported are only <see cref="F:SautinSoft.Document.FieldType.Index" />, 
             <see cref="F:SautinSoft.Document.FieldType.TOC" />, 
             <see cref="F:SautinSoft.Document.FieldType.TOA" /> and 
             <see cref="F:SautinSoft.Document.FieldType.Bibliography" />).
             </param>
      <param name="entries">The table's entries.</param>
      <param name="instructionText">The field's instruction text (switches).</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\09. Advanced\02. Table of Contents - Simple TOC\Sample.cs" title="Create a document with table of content using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\09. Advanced\02. Table of Contents - Simple TOC\Sample.vb" title="Create a document with table of content using VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.PreservedInline">
      <summary>
            Represents an <see cref="T:SautinSoft.Document.Inline" /> element that is loaded from 
            a file and is not directly supported by SautinSoft.Document API.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.PreservedInline.ElementType">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.ElementType" /> of this element instance.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.PreservedInline.Clone(System.Boolean)">
      <summary>
            Clones this element instance.
            </summary>
      <remarks>
        <para>This method serves as a copy constructor for elements. The cloned element
            has no parent, but belongs to the same document as the original element. </para>
        <para>If you want to insert this element into another document, then you should
            first import it into another document with 
            <see cref="M:SautinSoft.Document.DocumentCore.Import``1(``0,System.Boolean,System.Boolean)">Import&lt;T&gt;(T,System.Boolean,System.Boolean)</see>
            method and then insert the imported element.
            </para>
      </remarks>
      <param name="cloneDescendants">
        <see langword="True" /> to clone all descendants.</param>
      <returns>
            The cloned element.
            </returns>
    </member>
    <member name="T:SautinSoft.Document.SpecialCharacter">
      <summary>
            Represents a character, such as break or tab, which shall be placed at the 
            current location in the document content.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\05. Text\10. SpecialCharacter element\Sample.cs" title="Working with special characters in a document. How delete all page breaks in DOCX using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\05. Text\10. SpecialCharacter element\Sample.vb" title="Working with special characters in a document. How delete all page breaks in DOCX using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.SpecialCharacter.ElementType">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.ElementType" /> of this element instance.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.SpecialCharacter.CharacterType">
      <summary>
            Gets the character type.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\05. Text\10. SpecialCharacter element\Sample.cs" title="Working with special characters in a document. How delete all page breaks in DOCX using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\05. Text\10. SpecialCharacter element\Sample.vb" title="Working with special characters in a document. How delete all page breaks in DOCX using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.SpecialCharacter.CharacterFormat">
      <summary>
            Gets or sets the character format.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\07. Character Formatting\Sample.cs" title="How set character formatting in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\07. Character Formatting\Sample.vb" title="How set character formatting in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.SpecialCharacter.Clone">
      <summary>
            Clones this element instance.
            </summary>
      <remarks>
        <para>This method serves as a copy constructor for elements. The cloned element
            has no parent, but belongs to the same document as the original element. </para>
        <para>If you want to insert this element into another document, then you should
            first import it into another document with 
            <see cref="M:SautinSoft.Document.DocumentCore.Import``1(``0,System.Boolean,System.Boolean)">Import&lt;T&gt;(T,System.Boolean,System.Boolean)</see>
            method and then insert the imported element.
            </para>
      </remarks>
      <returns>
            The cloned element.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.SpecialCharacter.#ctor(SautinSoft.Document.DocumentCore,SautinSoft.Document.SpecialCharacterType)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.SpecialCharacter" /> class.
            </summary>
      <param name="document">The owner document.</param>
      <param name="specialCharacterType">The character type.</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\05. Text\10. SpecialCharacter element\Sample.cs" title="Working with special characters in a document. How delete all page breaks in DOCX using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\05. Text\10. SpecialCharacter element\Sample.vb" title="Working with special characters in a document. How delete all page breaks in DOCX using VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.Hyperlink">
      <summary>
            Represents a hyperlink.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\05. Text\11. Hyperlinks\01. Add Hyperlinks\Sample.cs" title="How to add a hyperlink into a document in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\05. Text\11. Hyperlinks\01. Add Hyperlinks\Sample.vb" title="How to add a hyperlink into a document in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Hyperlink.ElementType">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.ElementType" /> of this element instance.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Hyperlink.Address">
      <summary>
            Gets or sets the hyperlink address.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\05. Text\11. Hyperlinks\01. Add Hyperlinks\Sample.cs" title="How to add a hyperlink into a document in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\05. Text\11. Hyperlinks\01. Add Hyperlinks\Sample.vb" title="How to add a hyperlink into a document in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Hyperlink.DisplayInlines">
      <summary>
            Gets the hyperlink display <see cref="T:SautinSoft.Document.Inline" />s.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\05. Text\11. Hyperlinks\02. Replace Hyperlinks\Sample.cs" title="How to replace hyperlinks by their text and preserve formatting in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\05. Text\11. Hyperlinks\02. Replace Hyperlinks\Sample.vb" title="How to replace hyperlinks by their text and preserve formatting in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Hyperlink.IsBookmarkLink">
      <summary>
            Gets or sets a value indicating whether this 
            <see cref="T:SautinSoft.Document.Hyperlink" /> instance is bookmark link.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Hyperlink.ScreenTip">
      <summary>
            Gets or sets the screen tip.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\05. Text\11. Hyperlinks\01. Add Hyperlinks\Sample.cs" title="How to add a hyperlink into a document in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\05. Text\11. Hyperlinks\01. Add Hyperlinks\Sample.vb" title="How to add a hyperlink into a document in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Hyperlink.TargetFrame">
      <summary>
            Gets or sets the target frame.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.Hyperlink.Clone(System.Boolean)">
      <summary>
            Clones this <see cref="T:SautinSoft.Document.Hyperlink" /> instance,
            and optionally clones it's display elements.
            </summary>
      <param name="cloneDisplay">
        <see langword="true" /> to clone hyperlink display elements; otherwise <see langword="false" />.
            </param>
      <returns>
            Cloned <see cref="T:SautinSoft.Document.Hyperlink" />.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Hyperlink.#ctor(SautinSoft.Document.DocumentCore,System.String,SautinSoft.Document.Inline[])">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Hyperlink" /> class.
            </summary>
      <param name="document">The owner document.</param>
      <param name="address">The address that identifies external resource such as URL, or bookmark name.</param>
      <param name="displayInlines">
            The <see cref="T:SautinSoft.Document.Inline" /> sequence that represents hyperlink display elements.
            </param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\05. Text\11. Hyperlinks\01. Add Hyperlinks\Sample.cs" title="How to add a hyperlink into a document in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\05. Text\11. Hyperlinks\01. Add Hyperlinks\Sample.vb" title="How to add a hyperlink into a document in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Hyperlink.#ctor(SautinSoft.Document.DocumentCore,System.String,System.Collections.Generic.IEnumerable{SautinSoft.Document.Inline})">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Hyperlink" /> class.
            </summary>
      <param name="document">The owner document.</param>
      <param name="address">The address that identifies external resource such as URL, or bookmark name.</param>
      <param name="displayInlines">
            The <see cref="T:SautinSoft.Document.Inline" /> sequence that represents hyperlink display elements.
            </param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\05. Text\11. Hyperlinks\01. Add Hyperlinks\Sample.cs" title="How to add a hyperlink into a document in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\05. Text\11. Hyperlinks\01. Add Hyperlinks\Sample.vb" title="How to add a hyperlink into a document in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Hyperlink.#ctor(SautinSoft.Document.DocumentCore,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Hyperlink" /> class.
            </summary>
      <param name="document">The owner document.</param>
      <param name="address">The address that identifies external resource such as URL, or bookmark name.</param>
      <param name="displayText">The hyperlink display text.</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\05. Text\11. Hyperlinks\01. Add Hyperlinks\Sample.cs" title="How to add a hyperlink into a document in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\05. Text\11. Hyperlinks\01. Add Hyperlinks\Sample.vb" title="How to add a hyperlink into a document in VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.FormTextData">
      <summary>
            Represents a form related data associated with the parent 
            <see cref="F:SautinSoft.Document.FieldType.FormText" /> field within the document.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\09. Advanced\05. Forms and Fields\Sample.cs" title="Generate document (PDF) with forms and fields in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\09. Advanced\05. Forms and Fields\Sample.vb" title="Generate document (PDF) with forms and fields in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.FormTextData.DefaultValue">
      <summary>
            Gets or sets the default string for the parent text box form field.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.FormTextData.MaximumLength">
      <summary>
            Gets or sets the maximum length of text which should be allowed within
            the parent text box form field before any formatting specified by the 
            <see cref="P:SautinSoft.Document.FormTextData.ValueFormat" /> property. 
            Default value is <see cref="F:System.Int32.MaxValue" /> (unlimited).
            </summary>
    </member>
    <member name="P:SautinSoft.Document.FormTextData.NumberOfLines">
      <summary>
            Gets or sets the number of displaying text lines within form field when parent document saved as PDF. Default: 1.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.FormTextData.TextType">
      <summary>
            Gets or sets the type of the contents of the current text box form field.
            Default value is <see cref="F:SautinSoft.Document.FormTextType.RegularText" />.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\09. Advanced\05. Forms and Fields\Sample.cs" title="Generate document (PDF) with forms and fields in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\09. Advanced\05. Forms and Fields\Sample.vb" title="Generate document (PDF) with forms and fields in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.FormTextData.ValueFormat">
      <summary>
            Gets or sets the field formatting which shall be applied to the contents of
            the parent form field whenever those contents are modified.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\09. Advanced\05. Forms and Fields\Sample.cs" title="Generate document (PDF) with forms and fields in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\09. Advanced\05. Forms and Fields\Sample.vb" title="Generate document (PDF) with forms and fields in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.FormTextData.Value">
      <summary>
            Gets or sets the current value for a text form field.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.FormTextData.Reset">
      <summary>
            Resets the <see cref="P:SautinSoft.Document.FormFieldData.Value" /> of this form field instance.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.FormDropDownData">
      <summary>
            Represents a form related data associated with the parent 
            <see cref="F:SautinSoft.Document.FieldType.FormDropDown" /> field within the document.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\09. Advanced\05. Forms and Fields\Sample.cs" title="Generate document (PDF) with forms and fields in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\09. Advanced\05. Forms and Fields\Sample.vb" title="Generate document (PDF) with forms and fields in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.FormDropDownData.DefaultItemIndex">
      <summary>
            Gets or sets the zero-based index of the default entry for the parent drop-down list form field.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.FormDropDownData.Items">
      <summary>
            Gets the list entry items within the parent drop-down list form field.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\09. Advanced\05. Forms and Fields\Sample.cs" title="Generate document (PDF) with forms and fields in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\09. Advanced\05. Forms and Fields\Sample.vb" title="Generate document (PDF) with forms and fields in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.FormDropDownData.SelectedItemIndex">
      <summary>
            Gets or sets the zero-based index of the currently selected entry for the 
            parent drop-down list form field or <see langword="null" /> if selected entry is not explicitly set.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\09. Advanced\05. Forms and Fields\Sample.cs" title="Generate document (PDF) with forms and fields in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\09. Advanced\05. Forms and Fields\Sample.vb" title="Generate document (PDF) with forms and fields in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.FormDropDownData.Value">
      <summary>
            Gets the currently selected entry for the parent drop-down list form
            field if selected entry is explicitly set; otherwise, <see langword="null" />.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\09. Advanced\05. Forms and Fields\Sample.cs" title="Generate document (PDF) with forms and fields in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\09. Advanced\05. Forms and Fields\Sample.vb" title="Generate document (PDF) with forms and fields in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.FormDropDownData.ValueOrDefault">
      <summary>
            Gets the currently selected entry for the parent drop-down list form 
            field if selected entry is explicitly set; otherwise, default entry.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.FormDropDownData.Reset">
      <summary>
            Resets the <see cref="P:SautinSoft.Document.FormFieldData.Value" /> of this form field instance.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.FormCheckBoxData">
      <summary>
            Represents a form related data associated with the parent 
            <see cref="F:SautinSoft.Document.FieldType.FormCheckBox" /> field within the document.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\09. Advanced\05. Forms and Fields\Sample.cs" title="Generate document (PDF) with forms and fields in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\09. Advanced\05. Forms and Fields\Sample.vb" title="Generate document (PDF) with forms and fields in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.FormCheckBoxData.DefaultValue">
      <summary>
            Gets or sets the default Check Box state for the parent Check Box form field. 
            Default value is <see langword="false" /> (Check Box is unchecked).
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\09. Advanced\05. Forms and Fields\Sample.cs" title="Generate document (PDF) with forms and fields in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\09. Advanced\05. Forms and Fields\Sample.vb" title="Generate document (PDF) with forms and fields in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.FormCheckBoxData.Size">
      <summary>
             Gets or sets the exact size for the parent Check Box form field in points. 
             If value is <see langword="null" />, then parent Check Box form field shall be sized 
             automatically using the point size which is applied via the style hierarchy.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.FormCheckBoxData.Value">
      <summary>
            Gets or sets the current state for a Check Box form field or <see langword="null" /> if state is
            not explicitly set.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\09. Advanced\05. Forms and Fields\Sample.cs" title="Generate document (PDF) with forms and fields in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\09. Advanced\05. Forms and Fields\Sample.vb" title="Generate document (PDF) with forms and fields in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.FormCheckBoxData.Reset">
      <summary>
            Resets the <see cref="P:SautinSoft.Document.FormFieldData.Value" /> of this form field instance.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.FormFieldData">
      <summary>
            Represents a form related data associated with the parent form field within the document.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\09. Advanced\05. Forms and Fields\Sample.cs" title="Generate document (PDF) with forms and fields in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\09. Advanced\05. Forms and Fields\Sample.vb" title="Generate document (PDF) with forms and fields in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.FormFieldData.CalculateOnExit">
      <summary>
            Gets or sets a value indicating whether the content of all fields within the document 
            shall be recalculated from their field codes when the content of the parent form field
            is modified.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.FormFieldData.Enabled">
      <summary>
            Gets or sets a value indicating whether the parent form field shall behave as though
            it is enabled or disabled when it is displayed in the document. 
            Default value is <see langword="true" />.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.FormFieldData.EntryMacro">
      <summary>
            Gets or sets the subroutine in a scripting language which should be executed when 
            the value of the parent form field is entered.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.FormFieldData.ExitMacro">
      <summary>
            Gets or sets the subroutine in a scripting language which should be executed when 
            the value of the parent form field is exited.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.FormFieldData.Field">
      <summary>
            Gets the parent form field.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\09. Advanced\05. Forms and Fields\Sample.cs" title="Generate document (PDF) with forms and fields in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\09. Advanced\05. Forms and Fields\Sample.vb" title="Generate document (PDF) with forms and fields in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.FormFieldData.HelpText">
      <summary>
            Gets or sets the optional help text which shall be associated with the parent form field.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.FormFieldData.IsHelpTextAutoEntry">
      <summary>
            Gets or sets a value indicating whether <see cref="P:SautinSoft.Document.FormFieldData.HelpText" />
            should be interpreted as the name of a glossary document entry whose contents contain 
            the help text.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.FormFieldData.IsStatusTextAutoEntry">
      <summary>
            Gets or sets a value indicating whether <see cref="P:SautinSoft.Document.FormFieldData.StatusText" />
            should be interpreted as the name of a glossary document entry whose contents contain 
            the status text.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.FormFieldData.Name">
      <summary>
            Gets or sets the name of the form field.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.FormFieldData.StatusText">
      <summary>
            Gets or sets the optional status text which shall be associated with the parent form field.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.FormFieldData.Value">
      <summary>
            Gets the value of this form field explicitly set by the user or <see langword="null" />,
            if value was not explicitly set.
            Type of the value depends on form field type as explained in remarks.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.FormFieldData.ValueOrDefault">
      <summary>
            Gets the value of this form field explicitly set by the user or default value, 
            if value was not explicitly set. 
            Type of the value depends on form field type as explained in remarks.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.FormFieldData.Reset">
      <summary>
            Resets the <see cref="P:SautinSoft.Document.FormFieldData.Value" /> of this form field instance.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.FormFieldData.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this 
            <see cref="T:SautinSoft.Document.FormFieldData" /> instance.
            </summary>
      <returns>
            The form field value as <see cref="T:System.String" /> object.
            </returns>
    </member>
    <member name="T:SautinSoft.Document.Field">
      <summary>
            Field can represent a placeholder (like a Date, Time, PageNum etc), form element (FormCheckBox, FormDropDown, FormText), MergeField (to do a MailMerge process) etc.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\09. Advanced\05. Forms and Fields\Sample.cs" title="Generate document (PDF) with forms and fields in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\09. Advanced\05. Forms and Fields\Sample.vb" title="Generate document (PDF) with forms and fields in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Field.ElementType">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.ElementType" /> of this element instance.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Field.CharacterFormat">
      <summary>
            Gets or sets the character format.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\02. Sections and Page Layout\04. Page Numbering\02. Edit page numbering\Sample.cs" title="How to edit Page Numbering in an existing DOCX document in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\02. Sections and Page Layout\04. Page Numbering\02. Edit page numbering\Sample.vb" title="How to edit Page Numbering in an existing DOCX document in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Field.FieldType">
      <summary>
            Gets the field type.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\02. Sections and Page Layout\04. Page Numbering\01. Add page numbering\Sample.cs" title="Creates a new document with page numbering 'Page N of M' using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\02. Sections and Page Layout\04. Page Numbering\01. Add page numbering\Sample.vb" title="Creates a new document with page numbering 'Page N of M' using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Field.FormData">
      <summary>
            Gets the form related data associated with the parent form field or 
            <see langword="null" /> if parent field is not form field.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\09. Advanced\05. Forms and Fields\Sample.cs" title=" Generate document (PDF) with forms and fields in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\09. Advanced\05. Forms and Fields\Sample.vb" title=" Generate document (PDF) with forms and fields in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Field.InstructionInlines">
      <summary>
            Gets the field instruction <see cref="T:SautinSoft.Document.Inline" />s.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Field.IsDirty">
      <summary>
            Gets or sets a value indicating whether the result of this field is invalid and, 
            because of that, it should be updated.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Field.ResultInlines">
      <summary>
            Gets the field result <see cref="T:SautinSoft.Document.Inline" />s.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\09. Advanced\05. Forms and Fields\Sample.cs" title=" Generate document (PDF) with forms and fields in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\09. Advanced\05. Forms and Fields\Sample.vb" title=" Generate document (PDF) with forms and fields in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Field.Clone(System.Boolean)">
      <summary>
            Clones this Field instance, and optionally clones it's result.
            </summary>
      <param name="cloneResult">true to clone field result; otherwise false.</param>
      <returns>
            Cloned field.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Field.GetInstructionText">
      <summary>
            Gets the field instruction text if <see cref="P:SautinSoft.Document.Field.InstructionInlines" /> 
            contains only <see cref="T:SautinSoft.Document.Run" />s, 
            <see cref="T:SautinSoft.Document.SpecialCharacter" />s and bookmarks; otherwise 
            <see cref="F:System.String.Empty" />.
            </summary>
      <returns>
            The field instruction text.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Field.#ctor(SautinSoft.Document.DocumentCore,SautinSoft.Document.FieldType)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Field" /> class.
            </summary>
      <param name="document">The owner document.</param>
      <param name="fieldType">The field type.</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\09. Advanced\05. Forms and Fields\Sample.cs" title=" Generate document (PDF) with forms and fields in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\09. Advanced\05. Forms and Fields\Sample.vb" title=" Generate document (PDF) with forms and fields in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Field.#ctor(SautinSoft.Document.DocumentCore,SautinSoft.Document.FieldType,SautinSoft.Document.Inline[])">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Field" /> class.
            </summary>
      <param name="document">The owner document.</param>
      <param name="fieldType">The field type.</param>
      <param name="instructionInlines">The <see cref="T:SautinSoft.Document.Inline" /> sequence 
            that represents field instruction.</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\09. Advanced\05. Forms and Fields\Sample.cs" title=" Generate document (PDF) with forms and fields in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\09. Advanced\05. Forms and Fields\Sample.vb" title=" Generate document (PDF) with forms and fields in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Field.#ctor(SautinSoft.Document.DocumentCore,SautinSoft.Document.FieldType,System.Collections.Generic.IEnumerable{SautinSoft.Document.Inline},SautinSoft.Document.Inline[])">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Field" /> class.
            </summary>
      <param name="document">The owner document.</param>
      <param name="fieldType">The field type.</param>
      <param name="instructionInlines">The <see cref="T:SautinSoft.Document.Inline" /> sequence that represents field instruction.</param>
      <param name="resultInlines">The <see cref="T:SautinSoft.Document.Inline" /> sequence that represents field result.</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\09. Advanced\05. Forms and Fields\Sample.cs" title=" Generate document (PDF) with forms and fields in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\09. Advanced\05. Forms and Fields\Sample.vb" title=" Generate document (PDF) with forms and fields in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Field.#ctor(SautinSoft.Document.DocumentCore,SautinSoft.Document.FieldType,System.Collections.Generic.IEnumerable{SautinSoft.Document.Inline},System.Collections.Generic.IEnumerable{SautinSoft.Document.Inline})">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Field" /> class.
            </summary>
      <param name="document">The owner document.</param>
      <param name="fieldType">The field type.</param>
      <param name="instructionInlines">The <see cref="T:SautinSoft.Document.Inline" /> sequence that represents field instruction.</param>
      <param name="resultInlines">The <see cref="T:SautinSoft.Document.Inline" /> sequence that represents field result.</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\09. Advanced\05. Forms and Fields\Sample.cs" title=" Generate document (PDF) with forms and fields in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\09. Advanced\05. Forms and Fields\Sample.vb" title=" Generate document (PDF) with forms and fields in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Field.#ctor(SautinSoft.Document.DocumentCore,SautinSoft.Document.FieldType,System.String,SautinSoft.Document.Inline[])">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Field" /> class.
            </summary>
      <param name="document">The owner document.</param>
      <param name="fieldType">The field type.</param>
      <param name="instructionText">The field instruction text.</param>
      <param name="resultInlines">The <see cref="T:SautinSoft.Document.Inline" /> sequence that represents field result.</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\09. Advanced\05. Forms and Fields\Sample.cs" title=" Generate document (PDF) with forms and fields in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\09. Advanced\05. Forms and Fields\Sample.vb" title=" Generate document (PDF) with forms and fields in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Field.#ctor(SautinSoft.Document.DocumentCore,SautinSoft.Document.FieldType,System.String,System.Collections.Generic.IEnumerable{SautinSoft.Document.Inline})">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Field" /> class.
            </summary>
      <param name="document">The owner document.</param>
      <param name="fieldType">The field type.</param>
      <param name="instructionText">The field instruction text.</param>
      <param name="resultInlines">The <see cref="T:SautinSoft.Document.Inline" /> sequence that represents field result.</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\09. Advanced\05. Forms and Fields\Sample.cs" title=" Generate document (PDF) with forms and fields in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\09. Advanced\05. Forms and Fields\Sample.vb" title=" Generate document (PDF) with forms and fields in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Field.#ctor(SautinSoft.Document.DocumentCore,SautinSoft.Document.FieldType,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Field" /> class.
            </summary>
      <param name="document">The owner document.</param>
      <param name="fieldType">The field type.</param>
      <param name="instructionText">The field instruction text.</param>
      <param name="resultText">The field result text.</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\09. Advanced\05. Forms and Fields\Sample.cs" title=" Generate document (PDF) with forms and fields in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\09. Advanced\05. Forms and Fields\Sample.vb" title=" Generate document (PDF) with forms and fields in VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.StyleCollection">
      <summary>
            Represents a collection of styles.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.StyleCollection.Count">
      <summary>
            Gets the number of styles contained in the <see cref="T:SautinSoft.Document.StyleCollection" />.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.StyleCollection.Item(System.Int32)">
      <summary>
            Gets the style at the specified index.
            </summary>
      <param name="index">The zero-based index of the style to get.</param>
      <returns>
            The <see cref="T:SautinSoft.Document.Style" /> at the specified index.
            </returns>
    </member>
    <member name="P:SautinSoft.Document.StyleCollection.Item(System.String)">
      <summary>
            Gets the style with the specified style name.
            </summary>
      <param name="styleName">Name of the style.</param>
      <returns>
            The <see cref="T:SautinSoft.Document.Style" /> at the specified name.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.StyleCollection.Add(SautinSoft.Document.Style)">
      <summary>
            Adds a <see cref="T:SautinSoft.Document.Style" /> instance to the 
            <see cref="T:SautinSoft.Document.StyleCollection" />.
            </summary>
      <param name="item">The <see cref="T:SautinSoft.Document.Style" /> instance.</param>
    </member>
    <member name="M:SautinSoft.Document.StyleCollection.Import(SautinSoft.Document.Style,SautinSoft.Document.ImportSession)">
      <summary>
            Imports (clones) the specified source style and adds into this
            <see cref="T:SautinSoft.Document.StyleCollection" />.
            </summary>
      <param name="sourceStyle">The source style.</param>
      <param name="session">Import session.</param>
      <returns>Imported (cloned) source style.</returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\14. Styles - Import\Sample.cs" title="How to import styles from a one document to another using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\14. Styles - Import\Sample.vb" title="How to import styles from a one document to another using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.StyleCollection.Import(SautinSoft.Document.Style)">
      <summary>
            Imports (clones) the specified source style and adds into this
            <see cref="T:SautinSoft.Document.StyleCollection" />.
            </summary>
      <param name="sourceStyle">The source style.</param>
      <returns>Imported (cloned) source style.</returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\14. Styles - Import\Sample.cs" title="How to import styles from a one document to another using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\14. Styles - Import\Sample.vb" title="How to import styles from a one document to another using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.StyleCollection.Contains(System.String)">
      <summary>
            Determines whether the <see cref="T:SautinSoft.Document.StyleCollection" /> contains
            a <see cref="T:SautinSoft.Document.Style" /> instance with specific name.
            </summary>
      <param name="styleName">Name of the <see cref="T:SautinSoft.Document.Style" /> to
            locate in the <see cref="T:SautinSoft.Document.StyleCollection" />.</param>
      <returns>
        <see langword="true" /> if <see cref="T:SautinSoft.Document.Style" /> instance with specific 
            name is found in the <see cref="T:SautinSoft.Document.StyleCollection" />; otherwise,
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.StyleCollection.Contains(SautinSoft.Document.Style)">
      <summary>
            Determines whether the <see cref="T:SautinSoft.Document.StyleCollection" /> contains
            a specific <see cref="T:SautinSoft.Document.Style" /> instance.
            </summary>
      <param name="item">
            The <see cref="T:SautinSoft.Document.Style" /> instance to locate in the
            <see cref="T:SautinSoft.Document.StyleCollection" />.</param>
      <returns>
        <see langword="true" /> if <i>item</i> is found in the 
            <see cref="T:SautinSoft.Document.StyleCollection" />; 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.StyleCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the 
            <see cref="T:SautinSoft.Document.StyleCollection" />.
            </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1">IEnumerator&lt;Style&gt;</see> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:SautinSoft.Document.StyleCollection.GetOrAdd(SautinSoft.Document.StyleTemplateType)">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.Style" /> that corresponds to given 
            <see cref="T:SautinSoft.Document.StyleTemplateType" />.
            </summary>
      <param name="templateType">The <see cref="T:SautinSoft.Document.StyleTemplateType" /> instance.</param>
      <returns>
        <see cref="T:SautinSoft.Document.Style" /> that corresponds
            to given <see cref="T:SautinSoft.Document.StyleTemplateType" />.
            </returns>
      <remarks>
            If <see cref="T:SautinSoft.Document.StyleCollection" /> doesn't contain correspondent style, 
            then new style will be added and returned.
            </remarks>
    </member>
    <member name="M:SautinSoft.Document.StyleCollection.IndexOf(SautinSoft.Document.Style)">
      <summary>
            Determines the index of a specific <see cref="T:SautinSoft.Document.Style" /> instance
            in the <see cref="T:SautinSoft.Document.StyleCollection" />.
            </summary>
      <param name="item">
            The <see cref="T:SautinSoft.Document.Style" /> instance to locate
            in the <see cref="T:SautinSoft.Document.StyleCollection" />.
            </param>
      <returns>
            The index of <i>item</i> if found in the collection; otherwise, -1.
            </returns>
    </member>
    <member name="T:SautinSoft.Document.TextColumnCollection">
      <summary>
            Represents a collection of text columns in a section.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\02. Sections and Page Layout\06. Text Columns\Sample.cs" title="How to work with text columns in a document using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\02. Sections and Page Layout\06. Text Columns\Sample.vb" title="How to work with text columns in a document using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.TextColumnCollection.EvenlySpaced">
      <summary>
            Gets or sets a value indicating whether all text columns have equal width and are evenly spaced.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\02. Sections and Page Layout\06. Text Columns\Sample.cs" title="How to work with text columns in a document using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\02. Sections and Page Layout\06. Text Columns\Sample.vb" title="How to work with text columns in a document using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.TextColumnCollection.LineBetween">
      <summary>
            Gets or sets a value indicating whether to show or not the line between two
            <see cref="T:SautinSoft.Document.TextColumn" />.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.TextColumnCollection.SpaceBetween">
      <summary>
            Gets or sets the amount of space between each column (in points).
            Set this property only if <see cref="P:SautinSoft.Document.TextColumnCollection.EvenlySpaced" /> 
            is <see langword="true" />.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.TextColumnCollection.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.TextColumnCollection" /> class.
            </summary>
      <param name="columnsCount">The number of text columns.</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\02. Sections and Page Layout\06. Text Columns\Sample.cs" title="How to work with text columns in a document using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\02. Sections and Page Layout\06. Text Columns\Sample.vb" title="How to work with text columns in a document using VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.TextColumn">
      <summary>
            Represents a text column.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\02. Sections and Page Layout\06. Text Columns\Sample.cs" title="How to work with text columns in a document using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\02. Sections and Page Layout\06. Text Columns\Sample.vb" title="How to work with text columns in a document using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.TextColumn.SpaceAfter">
      <summary>
            Gets or sets the space between two columns (in points).
            Set this property only if <see cref="P:SautinSoft.Document.TextColumnCollection.EvenlySpaced" /> 
            is <see langword="false" />.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.TextColumn.Width">
      <summary>
            Gets or sets the width of the column (in points).
            Set this property only if <see cref="P:SautinSoft.Document.TextColumnCollection.EvenlySpaced" /> 
            is <see langword="false" />.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\02. Sections and Page Layout\06. Text Columns\Sample.cs" title="How to work with text columns in a document using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\02. Sections and Page Layout\06. Text Columns\Sample.vb" title="How to work with text columns in a document using VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.PageMargins">
      <summary>
            Represents page margins.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\02. Sections and Page Layout\03. Page Setup\Sample.cs" title="How to adjust a document page properties in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\02. Sections and Page Layout\03. Page Setup\Sample.vb" title="How to adjust a document page properties in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.PageMargins.Bottom">
      <summary>
            Gets or sets the bottom margin (in points).
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\02. Sections and Page Layout\03. Page Setup\Sample.cs" title="How to adjust a document page properties in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\02. Sections and Page Layout\03. Page Setup\Sample.vb" title="How to adjust a document page properties in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.PageMargins.Footer">
      <summary>
            Gets or sets the footer margin (in points).
            </summary>
    </member>
    <member name="P:SautinSoft.Document.PageMargins.Gutter">
      <summary>
            Gets or sets the gutter margin (in points).
            </summary>
    </member>
    <member name="P:SautinSoft.Document.PageMargins.Header">
      <summary>
            Gets or sets the header margin (in points).
            </summary>
    </member>
    <member name="P:SautinSoft.Document.PageMargins.Left">
      <summary>
            Gets or sets the left margin (in points).
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\02. Sections and Page Layout\03. Page Setup\Sample.cs" title="How to adjust a document page properties in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\02. Sections and Page Layout\03. Page Setup\Sample.vb" title="How to adjust a document page properties in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.PageMargins.Right">
      <summary>
            Gets or sets the right margin (in points).
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\02. Sections and Page Layout\03. Page Setup\Sample.cs" title="How to adjust a document page properties in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\02. Sections and Page Layout\03. Page Setup\Sample.vb" title="How to adjust a document page properties in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.PageMargins.Top">
      <summary>
            Gets or sets the top margin (in points).
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\02. Sections and Page Layout\03. Page Setup\Sample.cs" title="How to adjust a document page properties in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\02. Sections and Page Layout\03. Page Setup\Sample.vb" title="How to adjust a document page properties in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.PageMargins.Clone">
      <summary>
            Clones this <see cref="T:SautinSoft.Document.PageMargins" /> instance.
            </summary>
      <returns>
            Cloned <see cref="T:SautinSoft.Document.PageMargins" />.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.PageMargins.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.PageMargins" /> class.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\02. Sections and Page Layout\03. Page Setup\Sample.cs" title="How to adjust a document page properties in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\02. Sections and Page Layout\03. Page Setup\Sample.vb" title="How to adjust a document page properties in VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.PageSetup">
      <summary>
            Represents the page setup properties: paper type, orientation, margins and so forth.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\02. Sections and Page Layout\03. Page Setup\Sample.cs" title="How to adjust a document page properties in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\02. Sections and Page Layout\03. Page Setup\Sample.vb" title="How to adjust a document page properties in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.PageSetup.LineNumberDistanceFromText">
      <summary>
            Gets or sets the line number distance from text (in points).
            </summary>
    </member>
    <member name="P:SautinSoft.Document.PageSetup.LineNumberRestartSetting">
      <summary>
            Gets or sets the line number restart setting
            </summary>
    </member>
    <member name="P:SautinSoft.Document.PageSetup.LineStartingNumber">
      <summary>
            Gets or sets the line starting number.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.PageSetup.LineNumberIncrement">
      <summary>
            Gets or sets the line number increments to be displayed.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.PageSetup.Orientation">
      <summary>
            Gets or sets the page orientation.
            </summary>
      <remarks>
            Changing of <see cref="T:SautinSoft.Document.Orientation" /> property swaps values of 
            <see cref="P:SautinSoft.Document.PageSetup.PageWidth" /> and 
            <see cref="P:SautinSoft.Document.PageSetup.PageHeight" /> properties.
            </remarks>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\02. Sections and Page Layout\03. Page Setup\Sample.cs" title="How to adjust a document page properties in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\02. Sections and Page Layout\03. Page Setup\Sample.vb" title="How to adjust a document page properties in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.PageSetup.PageColor">
      <summary>
            Gets or sets the background color for all pages of the parent section.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.PageSetup.PageHeight">
      <summary>
            Gets or sets the height of the page (in points).
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\02. Sections and Page Layout\03. Page Setup\Sample.cs" title="How to adjust a document page properties in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\02. Sections and Page Layout\03. Page Setup\Sample.vb" title="How to adjust a document page properties in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.PageSetup.PageMargins">
      <summary>
            Gets or sets the page margins.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\02. Sections and Page Layout\03. Page Setup\Sample.cs" title="How to adjust a document page properties in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\02. Sections and Page Layout\03. Page Setup\Sample.vb" title="How to adjust a document page properties in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.PageSetup.PageNumberStyle">
      <summary>
            Gets or sets the number style for the page number.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.PageSetup.PageStartingNumber">
      <summary>
            Gets or sets the number that appears on the first page of the section.
            </summary>
      <remarks>
            If this value is omitted, numbering will continue from the highest page number
            in the previous section.
            </remarks>
    </member>
    <member name="P:SautinSoft.Document.PageSetup.TitlePage">
      <summary>
            Gets or sets a value indicating whether the parent section of the document shall have a 
            different header and footer for its first page.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\02. Sections and Page Layout\02. Headers and Footers\05. Different Headers\Sample.cs" title="Create a document with different headers: on first page, default and in another section using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\02. Sections and Page Layout\02. Headers and Footers\05. Different Headers\Sample.vb" title="Create a document with different headers: on first page, default and in another section using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.PageSetup.PageWidth">
      <summary>
            Gets or sets the width of the page (in points).
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\02. Sections and Page Layout\03. Page Setup\Sample.cs" title="How to adjust a document page properties in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\02. Sections and Page Layout\03. Page Setup\Sample.vb" title="How to adjust a document page properties in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.PageSetup.PaperType">
      <summary>
            Gets or sets the type of the paper for the page.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\02. Sections and Page Layout\03. Page Setup\Sample.cs" title="How to adjust a document page properties in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\02. Sections and Page Layout\03. Page Setup\Sample.vb" title="How to adjust a document page properties in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.PageSetup.SectionStart">
      <summary>
            Gets or sets the type of section start.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.PageSetup.TextColumns">
      <summary>
            Gets or sets the text columns.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\02. Sections and Page Layout\06. Text Columns\Sample.cs" title="How to work with text columns in a document using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\02. Sections and Page Layout\06. Text Columns\Sample.vb" title="How to work with text columns in a document using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.PageSetup.Borders">
      <summary>
            Gets collection of borders of the page.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.PageSetup.Clone">
      <summary>
            Clones this <see cref="T:SautinSoft.Document.PageSetup" /> instance.
            </summary>
      <returns>
            Cloned <see cref="T:SautinSoft.Document.PageSetup" />.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.PageSetup.ClearFormatting">
      <summary>
            Clears the formatting.
            </summary>
      <remarks>
            This method will reset all properties to their default values.
            </remarks>
    </member>
    <member name="M:SautinSoft.Document.PageSetup.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.PageSetup" /> class.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\02. Sections and Page Layout\03. Page Setup\Sample.cs" title="How to adjust a document page properties in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\02. Sections and Page Layout\03. Page Setup\Sample.vb" title="How to adjust a document page properties in VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.ListLevelFormat">
      <summary>
            Represents formatting definition which specifies the appearance and behavior of a list level.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\04. Lists - Add simple List\Sample.cs" title="How to create a simple list in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\04. Lists - Add simple List\Sample.vb" title="How to create a simple list in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.ListLevelFormat.Level">
      <summary>
            Gets the list level number (0 to 8).
            </summary>
    </member>
    <member name="P:SautinSoft.Document.ListLevelFormat.CharacterFormat">
      <summary>
            Gets or sets character formatting used for the list label.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.ListLevelFormat.ParagraphFormat">
      <summary>
            Gets or sets paragraph formatting used for the list level.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.ListLevelFormat.Alignment">
      <summary>
            Gets or sets the justification of the actual number of the list item.
            </summary>
      <remarks>
            The list label is justified relative to the 
            <see cref="P:SautinSoft.Document.ListLevelFormat.NumberPosition" /> property.
            </remarks>
    </member>
    <member name="P:SautinSoft.Document.ListLevelFormat.IsLegal">
      <summary>
            When true, the level turns all inherited numbers to Arabic,
            false if it preserves their number style.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.ListLevelFormat.NumberFormat">
      <summary>
            Returns or sets the number format for the list level.
            </summary>
      <remarks>
        <para>
            All text in this property's value shall be taken as literal text to be repeated 
            in each instance of this list level, except for any use of the percent symbol (%) 
            followed by a number, which shall be used to indicate the one-based index of the 
            number to be used at this level. Any number of a level higher than this level shall be ignored.
            </para>
        <para>
            When the % syntax is used, the number shall be incremented for each subsequent paragraph
            of that level(sequential or not), until the restart level is seen between two subsequent 
            paragraphs of this level.
            </para>
        <para>
            Default value is <see cref="F:System.String.Empty" />.
            </para>
      </remarks>
    </member>
    <member name="P:SautinSoft.Document.ListLevelFormat.NumberPosition">
      <summary>
            Gets or sets the position (in points) of the number or bullet for the list level.
            </summary>
      <remarks>
        <see cref="P:SautinSoft.Document.ListLevelFormat.NumberPosition" /> corresponds to 
            <see cref="P:SautinSoft.Document.ParagraphFormat.LeftIndentation" /> plus 
            <see cref="P:SautinSoft.Document.ParagraphFormat.SpecialIndentation" /> of the paragraph.
            </remarks>
    </member>
    <member name="P:SautinSoft.Document.ListLevelFormat.NumberStyle">
      <summary>
            Gets or sets the number style for this list level.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.ListLevelFormat.RestartAfterLevel">
      <summary>
            Gets or sets the list level that must appear before the specified list level
            restarts numbering.
            </summary>
      <remarks>
            The value of 0 means the numbering will continue.
            </remarks>
    </member>
    <member name="P:SautinSoft.Document.ListLevelFormat.StartAt">
      <summary>
            Gets or sets the starting number for this list level.
            </summary>
      <remarks>
            Default value is 1.
            </remarks>
    </member>
    <member name="P:SautinSoft.Document.ListLevelFormat.TextPosition">
      <summary>
            Gets or sets the position (in points) for the second line of wrapping text for the list level.
            </summary>
      <remarks>
        <see cref="P:SautinSoft.Document.ListLevelFormat.TextPosition" /> corresponds to 
            <see cref="P:SautinSoft.Document.ParagraphFormat.LeftIndentation" /> of the paragraph.
            </remarks>
    </member>
    <member name="P:SautinSoft.Document.ListLevelFormat.TrailingCharacter">
      <summary>
            Gets or sets the character inserted after the number for the list level.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.ListLevelFormat.IsOld">
      <summary>
            When true, the level was converted from Word 6.0 or Word 95.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.ListLevelFormat.ClearFormatting">
      <summary>
            Clears the formatting.
            </summary>
      <remarks>
            This method will clear all directly set formatting values.
            When retrieving formatting value, they can still come from other sources.
            </remarks>
    </member>
    <member name="M:SautinSoft.Document.ListLevelFormat.Equals(System.Object)">
      <summary>
            Determines whether the specified object is equal to this
            <see cref="T:SautinSoft.Document.ListLevelFormat" /> instance.
            </summary>
      <param name="obj">The object to compare with this 
            <see cref="T:SautinSoft.Document.ListLevelFormat" /> instance.</param>
      <returns>
            true if the specified object is a <see cref="T:SautinSoft.Document.ListLevelFormat" /> and is equal 
            to this <see cref="T:SautinSoft.Document.ListLevelFormat" /> instance; otherwise, false.
            </returns>
    </member>
    <member name="T:SautinSoft.Document.ListLevelFormatCollection">
      <summary>
            Represents a read-only collection of list level formatting.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.ListLevelFormatCollection.Item(System.Int32)">
      <summary>
            Gets <see cref="T:SautinSoft.Document.ListLevelFormat" />.
            </summary>
      <param name="index">The zero-based index of the <see cref="T:SautinSoft.Document.ListLevelFormat" />.</param>
      <returns>The <see cref="T:SautinSoft.Document.ListLevelFormat" />.</returns>
    </member>
    <member name="T:SautinSoft.Document.ListStyle">
      <summary>
            Represents a list style.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\04. Lists - Add simple List\Sample.cs" title="How to create a simple list in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\04. Lists - Add simple List\Sample.vb" title="How to create a simple list in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.ListStyle.BaseStyle">
      <summary>
            Gets or sets the style on which this style is based.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.ListStyle.StyleType">
      <summary>
            Gets the type of the style.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.ListStyle.ListLevelFormats">
      <summary>
            Gets the formatting for each list style level.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.ListStyle.Equals(System.Object)">
      <summary>
            Determines whether the specified object is equal to this
            <see cref="T:SautinSoft.Document.ListStyle" /> instance.
            </summary>
      <param name="obj">The object to compare with this 
            <see cref="T:SautinSoft.Document.ListStyle" /> instance.</param>
      <returns>
            true if the specified object is a <see cref="T:SautinSoft.Document.ListStyle" /> and is equal 
            to this <see cref="T:SautinSoft.Document.ListStyle" /> instance; otherwise, false.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.ListStyle.#ctor(System.String,SautinSoft.Document.ListTemplateType)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.ListStyle" /> class.
            </summary>
      <param name="name">The style name.</param>
      <param name="type">Specifies the template from which this list style will be initialized.</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\04. Lists - Add simple List\Sample.cs" title="How to create a simple list in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\04. Lists - Add simple List\Sample.vb" title="How to create a simple list in VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.ListFormat">
      <summary>
            Represents list format which shall be applied to the contents of the parent paragraph.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\05. Lists - Add multilevel List\Sample.cs" title="How to create multilevel ordered and unordered lists in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\05. Lists - Add multilevel List\Sample.vb" title="How to create multilevel ordered and unordered lists in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.ListFormat.IsList">
      <summary>
            Gets a value indicating whether this <see cref="T:SautinSoft.Document.ListFormat" />
            defines the list.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.ListFormat.ListLevelNumber">
      <summary>
            Gets or sets the list level number (0 to 8) for the paragraph.
            </summary>
      <remarks>
        <para>In Word documents, lists may consist of 1 or 9 levels, numbered 0 to 8.</para>
        <para>Has effect only when the <see cref="P:SautinSoft.Document.ListFormat.Style" />
            property is set to reference a valid list style.</para>
      </remarks>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\05. Lists - Add multilevel List\Sample.cs" title="How to create multilevel ordered and unordered lists in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\05. Lists - Add multilevel List\Sample.vb" title="How to create multilevel ordered and unordered lists in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.ListFormat.ListLevelFormat">
      <summary>
            Gets the list level formatting and any formatting overrides applied to the current paragraph.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\05. Lists - Add multilevel List\Sample.cs" title="How to create multilevel ordered and unordered lists in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\05. Lists - Add multilevel List\Sample.vb" title="How to create multilevel ordered and unordered lists in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.ListFormat.Style">
      <summary>
            Gets or sets the <see cref="T:SautinSoft.Document.ListStyle" />.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\05. Lists - Add multilevel List\Sample.cs" title="How to create multilevel ordered and unordered lists in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\05. Lists - Add multilevel List\Sample.vb" title="How to create multilevel ordered and unordered lists in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.ListFormat.ClearFormatting">
      <summary>
            Clears the formatting.
            </summary>
      <remarks>
            This method will clear all directly set formatting values.
            When retrieving formatting value, they can still come from other sources,
            as explained in <see cref="!:" />.
            </remarks>
    </member>
    <member name="M:SautinSoft.Document.ListFormat.Equals(System.Object)">
      <summary>
            Determines whether the specified object is equal to this
            <see cref="T:SautinSoft.Document.ListFormat" /> instance.
            </summary>
      <param name="obj">The object to compare with this 
            <see cref="T:SautinSoft.Document.ListFormat" /> instance.</param>
      <returns>
            true if the specified object is a <see cref="T:SautinSoft.Document.ListFormat" /> and is equal 
            to this <see cref="T:SautinSoft.Document.ListFormat" /> instance; otherwise, false.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.ListFormat.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.ListFormat" /> class.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\04. Lists - Add simple List\Sample.cs" title="How to create a simple list in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\04. Lists - Add simple List\Sample.vb" title="How to create a simple list in VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.TabStopCollection">
      <summary>
            Represents a collection of <see cref="T:SautinSoft.Document.TabStop" />s.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.TabStopCollection.Add(SautinSoft.Document.TabStop)">
      <summary>
            Adds tab stop to the collection.
            </summary>
      <param name="item">A tab stop to add.</param>
    </member>
    <member name="M:SautinSoft.Document.TabStopCollection.Clear">
      <summary>
            Removes all tab stops.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.TabStopCollection.ToArray">
      <summary>
            Copies all tab stops to a new array.
            </summary>
      <returns>
            An array containing copies of all tabs stops.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.TabStopCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1">IEnumerator&lt;TabStop&gt;</see> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="T:SautinSoft.Document.ParagraphStyle">
      <summary>
            Represents a paragraph style.
            </summary>
      <remarks>
            Styles provide a way to format your document in a consistent way so when you 
            change your formatting options on a style, all document elements referencing that
            style will be changed.
            </remarks>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\12. Styles - Inheritance\Sample.cs" title="Shows how the Styles Inheritance does work using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\12. Styles - Inheritance\Sample.vb" title="Shows how the Styles Inheritance does work using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.ParagraphStyle.BaseStyle">
      <summary>
            Gets or sets the style on which this style is based.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.ParagraphStyle.CharacterFormat">
      <summary>
            Gets or sets the character format.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\12. Styles - Inheritance\Sample.cs" title="Shows how the Styles Inheritance does work using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\12. Styles - Inheritance\Sample.vb" title="Shows how the Styles Inheritance does work using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.ParagraphStyle.ParagraphFormat">
      <summary>
            Gets or sets the paragraph format.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\12. Styles - Inheritance\Sample.cs" title="Shows how the Styles Inheritance does work using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\12. Styles - Inheritance\Sample.vb" title="Shows how the Styles Inheritance does work using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.ParagraphStyle.ListFormat">
      <summary>
            Gets or sets the list format.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.ParagraphStyle.StyleType">
      <summary>
            Gets the type of the style.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.ParagraphStyle.Equals(System.Object)">
      <summary>
            Determines whether the specified object is equal to this
            <see cref="T:SautinSoft.Document.ParagraphStyle" /> instance.
            </summary>
      <param name="obj">The object to compare with this 
            <see cref="T:SautinSoft.Document.ParagraphStyle" /> instance.</param>
      <returns>
            true if the specified object is a <see cref="T:SautinSoft.Document.ParagraphStyle" /> and is equal 
            to this <see cref="T:SautinSoft.Document.ParagraphStyle" /> instance; otherwise, false.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.ParagraphStyle.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.ParagraphStyle" /> class.
            </summary>
      <param name="name">The paragraph style name.</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\12. Styles - Inheritance\Sample.cs" title="Shows how the Styles Inheritance does work using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\12. Styles - Inheritance\Sample.vb" title="Shows how the Styles Inheritance does work using VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.Style">
      <summary>
            Represents a base class for all styles.
            </summary>
      <remarks>
            All document styles are contained in a <see cref="P:SautinSoft.Document.DocumentCore.Styles" /> 
            collection.
            </remarks>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\11. Styles\Sample.cs" title="This sample shows how to work with styles in DocumentCore using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\11. Styles\Sample.vb" title="This sample shows how to work with styles in DocumentCore using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Style.BaseStyle">
      <summary>
            Gets or sets the style on which this style is based.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Style.Name">
      <summary>
            Gets or sets the name of the style.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Style.IsDefault">
      <summary>
            When true, this style is the default for this style type.
            </summary>
      <remarks>
            This property is used in conjunction with the <see cref="P:SautinSoft.Document.Style.StyleType" />
            to determine that this style is applied to a format that do not explicitly refers to the style.
            </remarks>
    </member>
    <member name="P:SautinSoft.Document.Style.Document">
      <summary>
            Gets the owner document.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Style.StyleType">
      <summary>
            Gets the type of the style.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.Style.CreateStyle(SautinSoft.Document.StyleTemplateType,SautinSoft.Document.DocumentCore)">
      <summary>
            Creates one of the predefined styles.
            </summary>
      <param name="templateType">Type that determines predefined style.</param>
      <param name="document">The owner document.</param>
      <returns>
            Predefined style.
            </returns>
    </member>
    <member name="T:SautinSoft.Document.MultipleBorders">
      <summary>
            Represents a set of borders.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.MultipleBorders.Item(SautinSoft.Document.SingleBorderType)">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.SingleBorder" /> for the 
            specified <see cref="T:SautinSoft.Document.SingleBorderType" />.
            </summary>
      <param name="borderType">
            Type of the border.
            </param>
      <returns>
            The <see cref="T:SautinSoft.Document.SingleBorder" />.
            </returns>
    </member>
    <member name="P:SautinSoft.Document.MultipleBorders.SupportedBorderTypes">
      <summary>
            Gets the supported border types.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.MultipleBorders.Add(SautinSoft.Document.MultipleBorderTypes,SautinSoft.Document.BorderStyle,SautinSoft.Document.Color,System.Double,System.Double)">
      <summary>
            Sets the specified borders.
            </summary>
      <param name="borderTypes">The border types to set.</param>
      <param name="borderStyle">The border style.</param>
      <param name="borderColor">The border color.</param>
      <param name="borderWidth">The border width in points.</param>
      <param name="borderSpacing">The border spacing in points.</param>
    </member>
    <member name="M:SautinSoft.Document.MultipleBorders.Add(SautinSoft.Document.MultipleBorderTypes,SautinSoft.Document.BorderStyle,SautinSoft.Document.Color,System.Double)">
      <summary>
            Sets the specified borders.
            </summary>
      <param name="borderTypes">The border types to set.</param>
      <param name="borderStyle">The border style.</param>
      <param name="borderColor">The border color.</param>
      <param name="borderWidth">The border width in points.</param>
    </member>
    <member name="M:SautinSoft.Document.MultipleBorders.ClearBorders">
      <summary>
            Clears all borders.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.MultipleBorders.ClearBorders(SautinSoft.Document.MultipleBorderTypes)">
      <summary>
            Clears the specified borders.
            </summary>
      <param name="borderTypes">
            The border types to clear.
            </param>
    </member>
    <member name="M:SautinSoft.Document.MultipleBorders.SetBorders(SautinSoft.Document.MultipleBorderTypes,SautinSoft.Document.BorderStyle,SautinSoft.Document.Color,System.Double,System.Double)">
      <summary>
            Sets the specified borders.
            </summary>
      <param name="borderTypes">The border types to set.</param>
      <param name="borderStyle">The border style.</param>
      <param name="borderColor">The border color.</param>
      <param name="borderWidth">The border width in points.</param>
      <param name="borderSpacing">The border spacing in points.</param>
    </member>
    <member name="M:SautinSoft.Document.MultipleBorders.SetBorders(SautinSoft.Document.MultipleBorderTypes,SautinSoft.Document.BorderStyle,SautinSoft.Document.Color,System.Double)">
      <summary>
            Sets the specified borders.
            </summary>
      <param name="borderTypes">The border types to set.</param>
      <param name="borderStyle">The border style.</param>
      <param name="borderColor">The border color.</param>
      <param name="borderWidth">The border width in points.</param>
    </member>
    <member name="M:SautinSoft.Document.MultipleBorders.ToSingleBorderTypes(SautinSoft.Document.MultipleBorderTypes)">
      <summary>
            Converts a <see cref="T:SautinSoft.Document.MultipleBorderTypes" /> flags enumeration 
            to a sequence of <see cref="T:SautinSoft.Document.SingleBorderType" /> enumeration.
            </summary>
      <param name="borderTypes">A <see cref="T:SautinSoft.Document.MultipleBorderTypes" /> flags enumeration.</param>
      <returns>
            A sequence of <see cref="T:SautinSoft.Document.SingleBorderType" /> enumeration.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.MultipleBorders.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through all <see cref="T:SautinSoft.Document.SingleBorder" />s 
            supported in this <see cref="T:SautinSoft.Document.MultipleBorders" /> instance.
            </summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="T:SautinSoft.Document.Color">
      <summary>
            Represents a color.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\07. Character Formatting\Sample.cs" title="How set character formatting in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\07. Character Formatting\Sample.vb" title="How set character formatting in VB.Net">
        </code>
      </example>
    </member>
    <member name="F:SautinSoft.Document.Color.Black">
      <summary>
            Represents a black color (RGB = 0x000000).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Color.Blue">
      <summary>
            Represents a blue color (RGB = 0x0000FF).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Color.Brown">
      <summary>
            Represents a brown color (RGB = 0xA52A2A).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Color.Cyan">
      <summary>
            Represents a cyan color (RGB = 0x00FFFF).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Color.DarkBlue">
      <summary>
            Represents a dark blue color (RGB = 0x000080).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Color.DarkCyan">
      <summary>
            Represents a dark cyan color (RGB = 0x008080).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Color.DarkGray">
      <summary>
            Represents a dark gray color (RGB = 0x808080).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Color.DarkGreen">
      <summary>
            Represents a dark green color (RGB = 0x008000).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Color.DarkMagenta">
      <summary>
            Represents a dark magenta color (RGB = 0x800080).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Color.DarkRed">
      <summary>
            Represents a dark red color (RGB = 0x800000).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Color.DarkYellow">
      <summary>
            Represents a dark yellow color(RGB = 0x808000).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Color.Gray">
      <summary>
            Represents a gray color (RGB = 0x808080).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Color.Green">
      <summary>
            Represents a green color (RGB = 0x00FF00).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Color.LightGray">
      <summary>
            Represents a light gray color (RGB = 0xC0C0C0).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Color.Magenta">
      <summary>
            Represents a magenta color (RGB = 0xFF00FF).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Color.Orange">
      <summary>
            Represents an orange color (RGB = 0xFFA500).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Color.Pink">
      <summary>
            Represents a pink color (RGB = 0xFFC0CB).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Color.Purple">
      <summary>
            Represents a purple color (RGB = 0x800080).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Color.Red">
      <summary>
            Represents a red color (RGB = 0xFF0000).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Color.White">
      <summary>
            Represents a white color (RGB = 0xFFFFFF).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Color.Yellow">
      <summary>
            Represents a yellow color(RGB = 0xFFFF00).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Color.Empty">
      <summary>
            Represents an empty color.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Color.Auto">
      <summary>
            Represents an auto color.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Color.A">
      <summary>
            Gets the alpha component of this <c>Color</c> instance.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Color.R">
      <summary>
            Gets the red component of this <c>Color</c> instance.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Color.G">
      <summary>
            Gets the green component of this <c>Color</c> instance.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Color.B">
      <summary>
            Gets the blue component of this <c>Color</c> instance.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Color.IsEmpty">
      <summary>
            Gets a value indicating whether this <c>Color</c> instance is empty.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Color.IsAuto">
      <summary>
            Gets a value indicating whether this <c>Color</c> instance is auto.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.Color.op_Equality(SautinSoft.Document.Color,SautinSoft.Document.Color)">
      <summary>
            Determines whether <i>first</i> and <i>second</i> <see cref="T:SautinSoft.Document.Color" /> are equal.
            </summary>
      <param name="first">The first color.</param>
      <param name="second">The second color.</param>
      <returns>
            true if <i>first</i> and <i>second</i> colors are equal; otherwise, false.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Color.op_Inequality(SautinSoft.Document.Color,SautinSoft.Document.Color)">
      <summary>
            Determines whether <i>first</i> and <i>second</i> <see cref="T:SautinSoft.Document.Color" /> not equal.
            </summary>
      <param name="first">The first color.</param>
      <param name="second">The second color.</param>
      <returns>
            true if <i>first</i> and <i>second</i> colors are not equal; otherwise, false.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Color.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this 
            <see cref="T:SautinSoft.Document.Color" /> instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this color instance.</param>
      <returns>
            true if the specified <see cref="T:System.Object" /> is a <see cref="T:SautinSoft.Document.Color" /> 
            and is equal to this <see cref="T:SautinSoft.Document.Color" /> instance; otherwise, false.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Color.Equals(SautinSoft.Document.Color)">
      <summary>
            Determines whether the <i>other</i><see cref="T:SautinSoft.Document.Color" /> is equal
            to this <see cref="T:SautinSoft.Document.Color" /> instance.
            </summary>
      <param name="other">The other color to compare with this color instance.</param>
      <returns>
            true if the <i>other</i><see cref="T:SautinSoft.Document.Color" /> is equal to this 
            <see cref="T:SautinSoft.Document.Color" /> instance; otherwise, false.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Color.GetHashCode">
      <summary>
            Gets a hash code for this <see cref="T:SautinSoft.Document.Color" /> instance.
            </summary>
      <returns>
            An integer value that specifies a hash value for this 
            <see cref="T:SautinSoft.Document.Color" /> instance.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Color.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Color" /> struct.
            </summary>
      <param name="argb">
            The integer that represents the color in the format [AA,RR,GG,BB] 
            where AA is the byte that represents the alpha component,
            RR is the byte that represents the red component, 
            GG is the byte that represents the green component and 
            BB is the byte that represents the blue component.
            </param>
    </member>
    <member name="M:SautinSoft.Document.Color.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Color" /> struct.
            </summary>
      <param name="rgbInHex">Represents the color in heximal format: "#RRGGBB". For example, "#ffddcc". Alpha component is set to "FF".</param>
    </member>
    <member name="M:SautinSoft.Document.Color.#ctor(System.Byte,System.Byte,System.Byte)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Color" /> struct.
            </summary>
      <param name="red">The red component.</param>
      <param name="green">The green component.</param>
      <param name="blue">The blue component.</param>
    </member>
    <member name="M:SautinSoft.Document.Color.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Color" /> struct.
            </summary>
      <param name="alpha">The alpha component.</param>
      <param name="red">The red component.</param>
      <param name="green">The green component.</param>
      <param name="blue">The blue component.</param>
    </member>
    <member name="T:SautinSoft.Document.HorizontalPosition">
      <summary>
            Represents a horizontal positioning.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.HorizontalPosition.PositionType">
      <summary>
            Gets the horizontal position type which can either be absolute or relative.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.HorizontalPosition.RelativeTo">
      <summary>
            Gets the base location of this horizontal position.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.HorizontalPosition.Value">
      <summary>
            Gets the horizontal position absolute value in points if 
            <see cref="P:SautinSoft.Document.HorizontalPosition.PositionType" /> is 
            <see cref="F:SautinSoft.Document.HorizontalPositionType.Absolute" />, 
            otherwise value is not applicable.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.HorizontalPosition.Equals(SautinSoft.Document.HorizontalPosition)">
      <summary>
            Determines whether the <i>other</i><see cref="T:SautinSoft.Document.HorizontalPosition" /> is
            equal to this <see cref="T:SautinSoft.Document.HorizontalPosition" /> instance.
            </summary>
      <param name="other">The other horizontal position to compare with this horizontal position instance.</param>
      <returns>
            true if the <i>other</i><see cref="T:SautinSoft.Document.HorizontalPosition" /> is equal 
            to this <see cref="T:SautinSoft.Document.HorizontalPosition" /> instance; otherwise, false.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.HorizontalPosition.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this
            <see cref="T:SautinSoft.Document.HorizontalPosition" /> instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this horizontal position instance.</param>
      <returns>
            true if the specified <see cref="T:System.Object" /> is a <see cref="T:SautinSoft.Document.HorizontalPosition" /> 
            and is equal to this <see cref="T:SautinSoft.Document.HorizontalPosition" /> instance; otherwise, false.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.HorizontalPosition.GetHashCode">
      <summary>
            Returns a hash code for this <see cref="T:SautinSoft.Document.HorizontalPosition" /> instance.
            </summary>
      <returns>
            An integer value that specifies a hash value for this <see cref="T:SautinSoft.Document.HorizontalPosition" /> instance.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.HorizontalPosition.op_Equality(SautinSoft.Document.HorizontalPosition,SautinSoft.Document.HorizontalPosition)">
      <summary>
            Determines whether <i>first</i> and <i>second</i> <see cref="T:SautinSoft.Document.HorizontalPosition" />s are equal.
            </summary>
      <param name="first">The first horizontal position.</param>
      <param name="second">The second horizontal position.</param>
      <returns>
            true if <i>first</i> and <i>second</i> horizontal positions are equal; otherwise, false.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.HorizontalPosition.op_Inequality(SautinSoft.Document.HorizontalPosition,SautinSoft.Document.HorizontalPosition)">
      <summary>
            Determines whether <i>first</i> and <i>second</i> <see cref="T:SautinSoft.Document.HorizontalPosition" />s are not equal.
            </summary>
      <param name="first">The first horizontal position.</param>
      <param name="second">The second horizontal position.</param>
      <returns>
            true if <i>first</i> and <i>second</i> horizontal positions are not equal; otherwise, false.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.HorizontalPosition.#ctor(SautinSoft.Document.HorizontalPositionType,SautinSoft.Document.HorizontalPositionAnchor)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.HorizontalPosition" /> struct with specified alignment.
            </summary>
      <param name="alignment">The alignment relative to <see cref="T:SautinSoft.Document.HorizontalPositionAnchor" /> specified by <i>relativeTo</i> parameter.</param>
      <param name="relativeTo">The location from which <i>alignment</i> parameter is relative to.</param>
    </member>
    <member name="M:SautinSoft.Document.HorizontalPosition.#ctor(System.Double,SautinSoft.Document.LengthUnit,SautinSoft.Document.HorizontalPositionAnchor)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.HorizontalPosition" /> struct with specified absolute position.
            </summary>
      <param name="absolutePosition">The absolute position in units specified by <i>unit</i> parameter in direction to the right of location specified by <i>rightOf</i> parameter.</param>
      <param name="unit">The measurement unit for absolute position value.</param>
      <param name="rightOf">The location from which absolute position is offset from. 
            If <i>absolutePosition</i> parameter is positive, offset is to the right of 
            <see cref="T:SautinSoft.Document.HorizontalPositionAnchor" /> specified by <i>rightOf</i> parameter, 
            otherwise offset is to the left.</param>
    </member>
    <member name="T:SautinSoft.Document.VerticalPosition">
      <summary>
            Represents a vertical positioning.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.VerticalPosition.PositionType">
      <summary>
            Gets the vertical position type which can either be absolute or relative.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.VerticalPosition.RelativeTo">
      <summary>
            Gets the base location of this vertical position.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.VerticalPosition.Value">
      <summary>
            Gets the vertical position absolute value in points if <see cref="P:SautinSoft.Document.VerticalPosition.PositionType" /> 
            is <see cref="F:SautinSoft.Document.VerticalPositionType.Absolute" />, 
            otherwise value is not applicable.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.VerticalPosition.Equals(SautinSoft.Document.VerticalPosition)">
      <summary>
            Determines whether the <i>other</i><see cref="T:SautinSoft.Document.VerticalPosition" /> is 
            equal to this <see cref="T:SautinSoft.Document.VerticalPosition" /> instance.
            </summary>
      <param name="other">The other vertical position to compare with this vertical position instance.</param>
      <returns>
            true if the <i>other</i><see cref="T:SautinSoft.Document.VerticalPosition" /> is equal 
            to this <see cref="T:SautinSoft.Document.VerticalPosition" /> instance; otherwise, false.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.VerticalPosition.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this 
            <see cref="T:SautinSoft.Document.VerticalPosition" /> instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this vertical position instance.</param>
      <returns>
            true if the specified <see cref="T:System.Object" /> is a 
            <see cref="T:SautinSoft.Document.VerticalPosition" /> and is equal to this 
            <see cref="T:SautinSoft.Document.VerticalPosition" /> instance; otherwise, false.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.VerticalPosition.GetHashCode">
      <summary>
            Returns a hash code for this <see cref="T:SautinSoft.Document.VerticalPosition" /> instance.
            </summary>
      <returns>
            An integer value that specifies a hash value for 
            this <see cref="T:SautinSoft.Document.VerticalPosition" /> instance.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.VerticalPosition.op_Equality(SautinSoft.Document.VerticalPosition,SautinSoft.Document.VerticalPosition)">
      <summary>
            Determines whether <i>first</i> and <i>second</i> <see cref="T:SautinSoft.Document.VerticalPosition" />s are equal.
            </summary>
      <param name="first">The first vertical position.</param>
      <param name="second">The second vertical position.</param>
      <returns>
            true if <i>first</i> and <i>second</i> vertical positions are equal; otherwise, false.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.VerticalPosition.op_Inequality(SautinSoft.Document.VerticalPosition,SautinSoft.Document.VerticalPosition)">
      <summary>
            Determines whether <i>first</i> and <i>second</i> <see cref="T:SautinSoft.Document.VerticalPosition" />s are not equal.
            </summary>
      <param name="first">The first vertical position.</param>
      <param name="second">The second vertical position.</param>
      <returns>
            true if first and second vertical positions are not equal; otherwise, false.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.VerticalPosition.#ctor(SautinSoft.Document.VerticalPositionType,SautinSoft.Document.VerticalPositionAnchor)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.VerticalPosition" /> struct with specified alignment.
            </summary>
      <param name="alignment">The alignment relative to <see cref="T:SautinSoft.Document.VerticalPositionAnchor" /> 
            specified by <i>relativeTo</i> parameter.</param>
      <param name="relativeTo">The location from which <i>alignment</i> parameter is relative to.</param>
    </member>
    <member name="M:SautinSoft.Document.VerticalPosition.#ctor(System.Double,SautinSoft.Document.LengthUnit,SautinSoft.Document.VerticalPositionAnchor)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.VerticalPosition" /> struct with specified absolute position.
            </summary>
      <param name="absolutePosition">The absolute position in units specified by <i>unit</i> parameter in direction below of the location specified by <i>below</i> parameter.</param>
      <param name="unit">The measurement unit for absolute position value.</param>
      <param name="below">The location from which absolute position is offset from.
            If <i>absolutePosition</i> parameter is positive, offset is below of 
            <see cref="T:SautinSoft.Document.VerticalPositionAnchor" /> specified by <i>below</i> parameter, 
            otherwise offset is above.</param>
    </member>
    <member name="T:SautinSoft.Document.SingleBorder">
      <summary>
            Represents a single border around a document element.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.SingleBorder.Style">
      <summary>
            Gets the border style.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.SingleBorder.Color">
      <summary>
            Gets the border color.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.SingleBorder.Width">
      <summary>
            Gets the border width in points.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.SingleBorder.Spacing">
      <summary>
            Gets the border spacing in points.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.SingleBorder.None">
      <summary>
            Value that represents that there is no border.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.SingleBorder.op_Equality(SautinSoft.Document.SingleBorder,SautinSoft.Document.SingleBorder)">
      <summary>
            Determines whether <i>first</i> and <i>second</i> <see cref="T:SautinSoft.Document.SingleBorder" />s
            are equal.
            </summary>
      <param name="first">The first border.</param>
      <param name="second">The second border.</param>
      <returns>
            true if <i>first</i> and <i>second</i> borders are equal; otherwise, false.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.SingleBorder.op_Inequality(SautinSoft.Document.SingleBorder,SautinSoft.Document.SingleBorder)">
      <summary>
            Determines whether <i>first</i> and <i>second</i> <see cref="T:SautinSoft.Document.SingleBorder" />s
            are not equal.
            </summary>
      <param name="first">The first border.</param>
      <param name="second">The second border.</param>
      <returns>
            true if <i>first</i> and <i>second</i> borders are not equal; otherwise, false.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.SingleBorder.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this 
            <see cref="T:SautinSoft.Document.SingleBorder" /> instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this border instance.</param>
      <returns>
            true if the specified <see cref="T:System.Object" /> is a 
            <see cref="T:SautinSoft.Document.SingleBorder" /> and is equal to this 
            <see cref="T:SautinSoft.Document.SingleBorder" /> instance; otherwise, false.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.SingleBorder.Equals(SautinSoft.Document.SingleBorder)">
      <summary>
            Determines whether the <i>other</i><see cref="T:SautinSoft.Document.SingleBorder" /> 
            is equal to this <see cref="T:SautinSoft.Document.SingleBorder" /> instance.
            </summary>
      <param name="other">The other border to compare with this border instance.</param>
      <returns>
            true if the <i>other</i><see cref="T:SautinSoft.Document.SingleBorder" /> is equal 
            to this <see cref="T:SautinSoft.Document.SingleBorder" /> instance; otherwise, false.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.SingleBorder.GetHashCode">
      <summary>
            Returns a hash code for this <see cref="T:SautinSoft.Document.SingleBorder" /> instance.
            </summary>
      <returns>
            An integer value that specifies a hash value for this 
            <see cref="T:SautinSoft.Document.SingleBorder" /> instance.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.SingleBorder.#ctor(SautinSoft.Document.BorderStyle,SautinSoft.Document.Color,System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.SingleBorder" /> struct.
            </summary>
      <param name="style">The border style.</param>
      <param name="color">The border color.</param>
      <param name="width">The border width in points.</param>
      <param name="spacing">The border spacing in points.</param>
    </member>
    <member name="M:SautinSoft.Document.SingleBorder.#ctor(SautinSoft.Document.BorderStyle,SautinSoft.Document.Color,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.SingleBorder" /> struct.
            </summary>
      <param name="style">The border style.</param>
      <param name="color">The border color.</param>
      <param name="width">The border width in points.</param>
    </member>
    <member name="T:SautinSoft.Document.Padding">
      <summary>
            Represents the space between the element border and the element content.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Padding.Left">
      <summary>
            Gets the left padding in points.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Padding.Right">
      <summary>
            Gets the right padding in points.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Padding.Top">
      <summary>
            Gets the top padding in points.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Padding.Bottom">
      <summary>
            Gets the bottom padding in points.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Padding.Nil">
      <summary>
            Represents inherited padding.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Padding.None">
      <summary>
            Represents no padding or zero padding.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.Padding.op_Equality(SautinSoft.Document.Padding,SautinSoft.Document.Padding)">
      <summary>
            Determines whether <i>first</i> and <i>second</i> <see cref="T:SautinSoft.Document.Padding" />s 
            are equal.
            </summary>
      <param name="first">The first padding.</param>
      <param name="second">The second padding.</param>
      <returns>
            true if <i>first</i> and <i>second</i> paddings are equal; otherwise, false.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Padding.op_Inequality(SautinSoft.Document.Padding,SautinSoft.Document.Padding)">
      <summary>
            Determines whether <i>first</i> and <i>second</i> <see cref="T:SautinSoft.Document.Padding" />s 
            are not equal.
            </summary>
      <param name="first">The first padding.</param>
      <param name="second">The second padding.</param>
      <returns>
            true if <i>first</i> and <i>second</i> paddings are not equal; otherwise, false.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Padding.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this 
            <see cref="T:SautinSoft.Document.Padding" /> instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this padding instance</param>
      <returns>
            true if the specified <see cref="T:System.Object" /> is a <see cref="T:SautinSoft.Document.Padding" /> 
            and is equal to this <see cref="T:SautinSoft.Document.Padding" /> instance; otherwise, false.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Padding.Equals(SautinSoft.Document.Padding)">
      <summary>
            Determines whether the <i>other</i><see cref="T:SautinSoft.Document.Padding" /> is equal 
            to this <see cref="T:SautinSoft.Document.Padding" /> instance.
            </summary>
      <param name="other">The other padding to compare with this padding instance.</param>
      <returns>
            true if the other <see cref="T:SautinSoft.Document.Padding" /> is equal to this 
            <see cref="T:SautinSoft.Document.Padding" /> instance; otherwise, false.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Padding.GetHashCode">
      <summary>
            Returns a hash code for this <see cref="T:SautinSoft.Document.Padding" /> instance.
            </summary>
      <returns>
            An integer value that specifies a hash value for 
            this <see cref="T:SautinSoft.Document.Padding" /> instance.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Padding.#ctor(System.Nullable{System.Double})">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Padding" /> 
            struct with specified left/top/right/bottom padding.
            </summary>
      <param name="leftTopRightBottom">The left/top/right/bottom padding or 
            <b>null</b> if it value should be inherited.</param>
    </member>
    <member name="M:SautinSoft.Document.Padding.#ctor(System.Double,SautinSoft.Document.LengthUnit)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Padding" /> struct with specified 
            left/top/right/bottom padding in specified measurement unit.
            </summary>
      <param name="leftTopRightBottom">The left/top/right/bottom padding</param>
      <param name="unit">The measurement unit used to specify padding.</param>
    </member>
    <member name="M:SautinSoft.Document.Padding.#ctor(System.Double,System.Double,SautinSoft.Document.LengthUnit)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Padding" /> struct with specified 
            left/right and top/bottom padding in specified measurement unit.
            </summary>
      <param name="leftRight">The left/right padding.</param>
      <param name="topBottom">The top/bottom padding.</param>
      <param name="unit">The measurement unit used to specify padding.</param>
    </member>
    <member name="M:SautinSoft.Document.Padding.#ctor(System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double})">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Padding" /> 
            struct with specified left, top, right and bottom padding.
            </summary>
      <param name="left">The left padding or <b>null</b> if it value should be inherited.</param>
      <param name="top">The top padding or <b>null</b> if it value should be inherited.</param>
      <param name="right">The right padding or <b>null</b> if it value should be inherited.</param>
      <param name="bottom">The bottom padding or <b>null</b> if it value should be inherited.</param>
    </member>
    <member name="M:SautinSoft.Document.Padding.#ctor(System.Double,System.Double,System.Double,System.Double,SautinSoft.Document.LengthUnit)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Padding" /> 
            struct with specified left, top, right and bottom padding in specified measurement unit.
            </summary>
      <param name="left">The left padding.</param>
      <param name="top">The top padding.</param>
      <param name="right">The right padding.</param>
      <param name="bottom">The bottom padding.</param>
      <param name="unit">The measurement unit used to specify padding.</param>
    </member>
    <member name="T:SautinSoft.Document.TabStop">
      <summary>
            Represents a single custom tab stop.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.TabStop.Alignment">
      <summary>
            Gets the alignment of text at this tab stop.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.TabStop.Leader">
      <summary>
            Gets the type of the leader line displayed under the tab character.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.TabStop.Position">
      <summary>
            Gets the position of the tab stop in points.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.TabStop.Equals(SautinSoft.Document.TabStop)">
      <summary>
            Determines whether the <i>other</i><see cref="T:SautinSoft.Document.TabStop" /> is 
            equal to this <see cref="T:SautinSoft.Document.TabStop" /> instance.
            </summary>
      <param name="other">The other tab stop to compare with this tab stop instance.</param>
      <returns>
            true if the <i>other</i><see cref="T:SautinSoft.Document.TabStop" /> is equal 
            to this <see cref="T:SautinSoft.Document.TabStop" /> instance; otherwise, false.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.TabStop.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this 
            <see cref="T:SautinSoft.Document.TabStop" /> instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this tab stop instance.</param>
      <returns>
            true if the specified <see cref="T:System.Object" /> is a <see cref="T:SautinSoft.Document.TabStop" /> 
            and is equal to this <see cref="T:SautinSoft.Document.TabStop" /> instance; otherwise, false.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.TabStop.GetHashCode">
      <summary>
            Returns a hash code for this <see cref="T:SautinSoft.Document.TabStop" /> instance.
            </summary>
      <returns>
            An integer value that specifies a hash value for this <see cref="T:SautinSoft.Document.TabStop" /> 
            instance.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.TabStop.op_Equality(SautinSoft.Document.TabStop,SautinSoft.Document.TabStop)">
      <summary>
            Determines whether <i>first</i> and <i>second</i> <see cref="T:SautinSoft.Document.TabStop" />s 
            are equal.
            </summary>
      <param name="first">The first tab stop.</param>
      <param name="second">The second tab stop.</param>
      <returns>
            true if <i>first</i> and <i>second</i> tab stops are equal; otherwise, false.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.TabStop.op_Inequality(SautinSoft.Document.TabStop,SautinSoft.Document.TabStop)">
      <summary>
            Determines whether <i>first</i> and <i>second</i> <see cref="T:SautinSoft.Document.TabStop" />s 
            are not equal.
            </summary>
      <param name="first">The first tab stop.</param>
      <param name="second">The second tab stop.</param>
      <returns>
            true if <i>first</i> and <i>second</i> tab stops are not equal; otherwise, false.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.TabStop.#ctor(System.Double,SautinSoft.Document.TabStopAlignment)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.TabStop" /> struct.
            </summary>
      <param name="position">The tab stop position.</param>
      <param name="alignment">The tab stop alignment.</param>
    </member>
    <member name="M:SautinSoft.Document.TabStop.#ctor(System.Double,SautinSoft.Document.TabStopAlignment,SautinSoft.Document.TabCharacterLeader)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.TabStop" /> struct.
            </summary>
      <param name="position">The tab stop position.</param>
      <param name="alignment">The tab stop alignment.</param>
      <param name="leader">The tab stop leader.</param>
    </member>
    <member name="T:SautinSoft.Document.Section">
      <summary>
            Represents a single section in a document.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\02. Sections and Page Layout\01. Sections\Sample.cs" title="Creates a document with different sections using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\02. Sections and Page Layout\01. Sections\Sample.vb" title="Creates a document with different sections using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Section.ElementType">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.ElementType" /> of this element instance.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Section.ParentCollection">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.SectionCollection" /> that contains this
            <see cref="T:SautinSoft.Document.Section" /> instance.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Section.Blocks">
      <summary>
            Gets the section's blocks.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\04. Paragraph\03. Insert paragraph\Sample.cs" title="Inserts a new paragraph into an existing PDF document in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\04. Paragraph\03. Insert paragraph\Sample.vb" title="Inserts a new paragraph into an existing PDF document in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Section.PageSetup">
      <summary>
            Gets or sets the page setup.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\02. Sections and Page Layout\03. Page Setup\Sample.cs" title="How to adjust a document page properties in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\02. Sections and Page Layout\03. Page Setup\Sample.vb" title="How to adjust a document page properties in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Section.EndnoteSettings">
      <summary>
            Gets the endnote settings.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Section.FootnoteSettings">
      <summary>
            Gets the footnote settings.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Section.HeadersFooters">
      <summary>
            Gets the section's headers / footers.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\02. Sections and Page Layout\02. Headers and Footers\01. Header and Footer\Sample.cs" title="How to add a header and footer in the document using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\02. Sections and Page Layout\02. Headers and Footers\01. Header and Footer\Sample.vb" title="How to add a header and footer in the document using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Section.Clone(System.Boolean)">
      <summary>
            Clones this element instance.
            </summary>
      <remarks>
        <para>This method serves as a copy constructor for elements. The cloned element
            has no parent, but belongs to the same document as the original element. </para>
        <para>If you want to insert this element into another document, then you should
            first import it into another document with 
            <see cref="M:SautinSoft.Document.DocumentCore.Import``1(``0,System.Boolean,System.Boolean)">Import&lt;T&gt;(T,System.Boolean,System.Boolean)</see>
            method and then insert the imported element.
            </para>
      </remarks>
      <param name="cloneDescendants">
        <see langword="True" /> to clone all descendants.</param>
      <returns>
            The cloned element.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.Section.#ctor(SautinSoft.Document.DocumentCore)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Section" /> class.
            </summary>
      <param name="document">The owner document.</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\02. Sections and Page Layout\01. Sections\Sample.cs" title="Creates a document with different sections using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\02. Sections and Page Layout\01. Sections\Sample.vb" title="Creates a document with different sections using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Section.#ctor(SautinSoft.Document.DocumentCore,SautinSoft.Document.Block[])">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Section" /> class.
            </summary>
      <param name="document">The owner document.</param>
      <param name="items">The section content.</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\02. Sections and Page Layout\01. Sections\Sample.cs" title="Creates a document with different sections using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\02. Sections and Page Layout\01. Sections\Sample.vb" title="Creates a document with different sections using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Section.#ctor(SautinSoft.Document.DocumentCore,System.Collections.Generic.IEnumerable{SautinSoft.Document.Block})">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Section" /> class.
            </summary>
      <param name="document">The owner document.</param>
      <param name="items">The section content.</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\02. Sections and Page Layout\01. Sections\Sample.cs" title="Creates a document with different sections using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\02. Sections and Page Layout\01. Sections\Sample.vb" title="Creates a document with different sections using VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.SectionCollection">
      <summary>
            Represents a collection of <see cref="T:SautinSoft.Document.Section" /> elements.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\02. Sections and Page Layout\01. Sections\Sample.cs" title="Creates a document with different sections using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\02. Sections and Page Layout\01. Sections\Sample.vb" title="Creates a document with different sections using VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.ElementType">
      <summary>
            Represents an element type enumeration.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\04. Paragraph\04. Find paragraph\Sample.cs" title="Find all paragraphs aligned by center in DOCX document and mark it by yellow in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\04. Paragraph\04. Find paragraph\Sample.vb" title="Find all paragraphs aligned by center in DOCX document and mark it by yellow in VB.Net">
        </code>
      </example>
    </member>
    <member name="F:SautinSoft.Document.ElementType.Document">
      <summary>
            Element is the <see cref="T:SautinSoft.Document.DocumentCore">DocumentCore</see> instance.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.ElementType.Section">
      <summary>
            Element is the <see cref="T:SautinSoft.Document.Section">Section</see> instance.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.ElementType.HeaderFooter">
      <summary>
            Element is the <see cref="T:SautinSoft.Document.HeaderFooter">HeaderFooter</see> instance.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.ElementType.Paragraph">
      <summary>
            Element is the <see cref="T:SautinSoft.Document.Paragraph">Paragraph</see> instance.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.ElementType.TableOfEntries">
      <summary>
            Element is the <see cref="T:SautinSoft.Document.TableOfEntries">TableOfEntries</see> instance.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.ElementType.Table">
      <summary>
            Element is the <see cref="T:SautinSoft.Document.Tables.Table">Table</see> instance.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.ElementType.TableRow">
      <summary>
            Element is the <see cref="T:SautinSoft.Document.Tables.TableRow">TableRow</see> instance.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.ElementType.TableCell">
      <summary>
            Element is the <see cref="T:SautinSoft.Document.Tables.TableCell">TableCell</see> instance.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.ElementType.BookmarkStart">
      <summary>
            Element is the <see cref="T:SautinSoft.Document.BookmarkStart">BookmarkStart</see> instance.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.ElementType.BookmarkEnd">
      <summary>
            Element is the <see cref="T:SautinSoft.Document.BookmarkEnd">BookmarkEnd</see> instance.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.ElementType.Field">
      <summary>
            Element is the <see cref="T:SautinSoft.Document.Field">Field</see> instance.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.ElementType.Hyperlink">
      <summary>
            Element is the <see cref="T:SautinSoft.Document.Hyperlink">Hyperlink</see> instance.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.ElementType.Run">
      <summary>
            Element is the <see cref="T:SautinSoft.Document.Run">Run</see> instance.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.ElementType.SpecialCharacter">
      <summary>
            Element is the <see cref="T:SautinSoft.Document.SpecialCharacter">SpecialCharacter</see> instance.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.ElementType.Shape">
      <summary>
            Element is the <see cref="T:SautinSoft.Document.Drawing.Shape">Shape</see> instance.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.ElementType.ShapeGroup">
      <summary>
            Element is the <see cref="T:SautinSoft.Document.Drawing.ShapeGroup">ShapeGroup</see> instance.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.ElementType.Picture">
      <summary>
            Element is the <see cref="T:SautinSoft.Document.Drawing.Picture">Picture</see> instance.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.ElementType.PreservedInline">
      <summary>
            Element is the <see cref="T:SautinSoft.Document.PreservedInline">PreservedInline</see> instance.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.ElementType.Note">
      <summary>
            Element is the <see cref="T:SautinSoft.Document.Note">Note</see> instance.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.ElementType.BlockContentControl">
      <summary>
            Element is the <see cref="T:SautinSoft.Document.CustomMarkups.BlockContentControl">BlockContentControl</see> element.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.ElementType.InlineContentControl">
      <summary>
            Element is the <see cref="T:SautinSoft.Document.CustomMarkups.InlineContentControl">BlockContentControl</see> element.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.HorizontalAlignment">
      <summary>
            Horizontal alignment.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.HorizontalAlignment.Left">
      <summary>
            Left alignment.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.HorizontalAlignment.Center">
      <summary>
            Centered alignment.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.HorizontalAlignment.Right">
      <summary>
            Right alignment.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.HorizontalAlignment.Justify">
      <summary>
            Justified alignment.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.MultipleBorderTypes">
      <summary>
            Represents multiple border types.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.MultipleBorderTypes.None">
      <summary>
            No border.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.MultipleBorderTypes.Left">
      <summary>
            Left border.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.MultipleBorderTypes.Top">
      <summary>
             Top border.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.MultipleBorderTypes.Right">
      <summary>
            Right border.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.MultipleBorderTypes.Bottom">
      <summary>
            Bottom border.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.MultipleBorderTypes.InsideHorizontal">
      <summary>
            Inside horizontal border.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.MultipleBorderTypes.InsideVertical">
      <summary>
            Inside vertical border.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.MultipleBorderTypes.DiagonalDown">
      <summary>
            Diagonal down border (from top-left to bottom-right).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.MultipleBorderTypes.DiagonalUp">
      <summary>
            Diagonal up border (from bottom-left to top-right).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.MultipleBorderTypes.Outside">
      <summary>
            Outside borders (left, top, right and bottom borders).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.MultipleBorderTypes.Inside">
      <summary>
            Inside borders (inside horizontal and inside vertical borders).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.MultipleBorderTypes.Diagonal">
      <summary>
            Diagonal borders (diagonal up and diagonal down borders).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.MultipleBorderTypes.All">
      <summary>
            All borders (outside, inside and diagonal borders).
            </summary>
    </member>
    <member name="T:SautinSoft.Document.SingleBorderType">
      <summary>
            Represents single border type.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.SingleBorderType.Left">
      <summary>
            Left border.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.SingleBorderType.Top">
      <summary>
            Top border.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.SingleBorderType.Right">
      <summary>
            Right border.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.SingleBorderType.Bottom">
      <summary>
            Bottom border.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.SingleBorderType.InsideHorizontal">
      <summary>
            Inside horizontal border.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.SingleBorderType.InsideVertical">
      <summary>
            Inside vertical border.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.SingleBorderType.DiagonalDown">
      <summary>
            Diagonal down border (from top-left to bottom-right).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.SingleBorderType.DiagonalUp">
      <summary>
            Diagonal up border (from bottom-left to top-right).
            </summary>
    </member>
    <member name="T:SautinSoft.Document.BorderStyle">
      <summary>
            Specifies line style for a border.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.BorderStyle.Nil">
      <summary>
            No border specified.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.BorderStyle.None">
      <summary>
            No border.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.BorderStyle.Dotted">
      <summary>
            Dotted line border.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.BorderStyle.Dashed">
      <summary>
            Dashed line border.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.BorderStyle.Single">
      <summary>
            Single line border.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.BorderStyle.Thick">
      <summary>
            Thick line border.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.BorderStyle.Double">
      <summary>
            Double line border.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.BorderStyle.DotDash">
      <summary>
             Dot - dash line border.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.BorderStyle.DotDotDash">
      <summary>
            Dot - dot - dash line border.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.BorderStyle.Triple">
      <summary>
            Triple line border.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.BorderStyle.ThinThickSmallGap">
      <summary>
            Thin - thick small gap line border.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.BorderStyle.ThickThinSmallGap">
      <summary>
            Thick - thin small gap line border.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.BorderStyle.ThinThickThinSmallGap">
      <summary>
            Thin - thick - thin small gap line border.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.BorderStyle.ThinThickMediumGap">
      <summary>
            Thin - thick medium gap line border.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.BorderStyle.ThickThinMediumGap">
      <summary>
            Thick - thin medium gap line border.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.BorderStyle.ThinThickThinMediumGap">
      <summary>
            Thin - thick - thin medium gap line border.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.BorderStyle.ThinThickLargeGap">
      <summary>
            Thin - thick large gap line border.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.BorderStyle.ThickThinLargeGap">
      <summary>
            Thick - thin large gap line border.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.BorderStyle.ThinThickThinLargeGap">
      <summary>
            Thin - thick - thin large gap line border.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.BorderStyle.Wave">
      <summary>
            Wave line border.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.BorderStyle.DoubleWave">
      <summary>
            Double wave line border.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.BorderStyle.DashSmallGap">
      <summary>
            Dashed line border.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.BorderStyle.DashDotStroked">
      <summary>
            Dash - dot strokes line border.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.BorderStyle.Emboss3D">
      <summary>
            3D embossed line border.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.BorderStyle.Engrave3D">
      <summary>
            3D engraved line border.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.BorderStyle.Outset">
      <summary>
            Outset line border.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.BorderStyle.Inset">
      <summary>
            Inset line border.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.StyleType">
      <summary>
            Represents a style type enumeration.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleType.Paragraph">
      <summary>
            Paragraph style.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleType.Character">
      <summary>
            Character style.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleType.List">
      <summary>
            List style.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleType.Table">
      <summary>
            Table style.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.StyleTemplateType">
      <summary>
            Type that determines predefined style.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.DefaultParagraphFont">
      <summary>
        <b>'DefaultParagraphFont'</b> <see cref="T:SautinSoft.Document.CharacterStyle" />.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.Strong">
      <summary>
        <b>'Strong'</b> <see cref="T:SautinSoft.Document.CharacterStyle" />.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.Emphasis">
      <summary>
        <b>'Emphasis'</b> <see cref="T:SautinSoft.Document.CharacterStyle" />.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.SubtleEmphasis">
      <summary>
        <b>'SubtleEmphasis'</b> <see cref="T:SautinSoft.Document.CharacterStyle" />.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.IntenseEmphasis">
      <summary>
        <b>'IntenseEmphasis'</b> <see cref="T:SautinSoft.Document.CharacterStyle" />.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.SubtleReference">
      <summary>
        <b>'SubtleReference'</b> <see cref="T:SautinSoft.Document.CharacterStyle" />.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.IntenseReference">
      <summary>
        <b>'IntenseReference'</b> <see cref="T:SautinSoft.Document.CharacterStyle" />.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.BookTitle">
      <summary>
        <b>'BookTitle'</b> <see cref="T:SautinSoft.Document.CharacterStyle" />.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.Normal">
      <summary>
        <b>'Normal'</b> <see cref="T:SautinSoft.Document.ParagraphStyle" />.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.Heading1">
      <summary>
        <b>'Heading 1'</b> <see cref="T:SautinSoft.Document.ParagraphStyle" />.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.Heading2">
      <summary>
        <b>'Heading 2'</b> <see cref="T:SautinSoft.Document.ParagraphStyle" />.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.Heading3">
      <summary>
        <b>'Heading 3'</b> <see cref="T:SautinSoft.Document.ParagraphStyle" />.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.Heading4">
      <summary>
        <b>'Heading 4'</b> <see cref="T:SautinSoft.Document.ParagraphStyle" />.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.Heading5">
      <summary>
        <b>'Heading 5'</b> <see cref="T:SautinSoft.Document.ParagraphStyle" />.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.Heading6">
      <summary>
        <b>'Heading 6'</b> <see cref="T:SautinSoft.Document.ParagraphStyle" />.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.Heading7">
      <summary>
        <b>'Heading 7'</b> <see cref="T:SautinSoft.Document.ParagraphStyle" />.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.Heading8">
      <summary>
        <b>'Heading 8'</b> <see cref="T:SautinSoft.Document.ParagraphStyle" />.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.Heading9">
      <summary>
        <b>'Heading 9'</b> <see cref="T:SautinSoft.Document.ParagraphStyle" />.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.Title">
      <summary>
        <b>'Title'</b> <see cref="T:SautinSoft.Document.ParagraphStyle" />.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.Subtitle">
      <summary>
        <b>'Subtitle'</b> <see cref="T:SautinSoft.Document.ParagraphStyle" />.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.NoSpacing">
      <summary>
        <b>'NoSpacing'</b> <see cref="T:SautinSoft.Document.ParagraphStyle" />.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.Quote">
      <summary>
        <b>'Quote'</b> <see cref="T:SautinSoft.Document.ParagraphStyle" />.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.IntenseQuote">
      <summary>
        <b>'IntenseQuote'</b> <see cref="T:SautinSoft.Document.ParagraphStyle" />.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.ListParagraph">
      <summary>
        <b>'ListParagraph'</b> <see cref="T:SautinSoft.Document.ParagraphStyle" />.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.TableNormal">
      <summary>
        <b>'Normal Table'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.TableGrid">
      <summary>
        <b>'Table Grid'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.LightShading">
      <summary>
        <b>'Light Shading'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.LightShadingAccent1">
      <summary>
        <b>'Light Shading Accent 1'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.LightShadingAccent2">
      <summary>
        <b>'Light Shading Accent 2'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.LightShadingAccent3">
      <summary>
        <b>'Light Shading Accent 3'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.LightShadingAccent4">
      <summary>
        <b>'Light Shading Accent 4'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.LightShadingAccent5">
      <summary>
        <b>'Light Shading Accent 5'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.LightShadingAccent6">
      <summary>
        <b>'Light Shading Accent 6'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.LightList">
      <summary>
        <b>'Light List'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.LightListAccent1">
      <summary>
        <b>'Light List Accent 1'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.LightListAccent2">
      <summary>
        <b>'Light List Accent 2'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.LightListAccent3">
      <summary>
        <b>'Light List Accent 3'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.LightListAccent4">
      <summary>
        <b>'Light List Accent 4'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.LightListAccent5">
      <summary>
        <b>'Light List Accent 5'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.LightListAccent6">
      <summary>
        <b>'Light List Accent 6'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.LightGrid">
      <summary>
        <b>'Light Grid'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.LightGridAccent1">
      <summary>
        <b>'Light Grid Accent 1'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.LightGridAccent2">
      <summary>
        <b>'Light Grid Accent 2'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.LightGridAccent3">
      <summary>
        <b>'Light Grid Accent 3'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.LightGridAccent4">
      <summary>
        <b>'Light Grid Accent 4'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.LightGridAccent5">
      <summary>
        <b>'Light Grid Accent 5'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.LightGridAccent6">
      <summary>
        <b>'Light Grid Accent 6'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.MediumShading1">
      <summary>
        <b>'Medium Shading 1'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.MediumShading1Accent1">
      <summary>
        <b>'Medium Shading 1 Accent 1'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.MediumShading1Accent2">
      <summary>
        <b>'Medium Shading 1 Accent 2'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.MediumShading1Accent3">
      <summary>
        <b>'Medium Shading 1 Accent 3'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.MediumShading1Accent4">
      <summary>
        <b>'Medium Shading 1 Accent 4'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.MediumShading1Accent5">
      <summary>
        <b>'Medium Shading 1 Accent 5'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.MediumShading1Accent6">
      <summary>
        <b>'Medium Shading 1 Accent 6'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.MediumShading2">
      <summary>
        <b>'Medium Shading 2'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.MediumShading2Accent1">
      <summary>
        <b>'Medium Shading 2 Accent 1'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.MediumShading2Accent2">
      <summary>
        <b>'Medium Shading 2 Accent 2'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.MediumShading2Accent3">
      <summary>
        <b>'Medium Shading 2 Accent 3'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.MediumShading2Accent4">
      <summary>
        <b>'Medium Shading 2 Accent 4'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.MediumShading2Accent5">
      <summary>
        <b>'Medium Shading 2 Accent 5'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.MediumShading2Accent6">
      <summary>
        <b>'Medium Shading 2 Accent 6'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.MediumList1">
      <summary>
        <b>'Medium List 1'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.MediumList1Accent1">
      <summary>
        <b>'Medium List 1 Accent 1'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.MediumList1Accent2">
      <summary>
        <b>'Medium List 1 Accent 2'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.MediumList1Accent3">
      <summary>
        <b>'Medium List 1 Accent 3'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.MediumList1Accent4">
      <summary>
        <b>'Medium List 1 Accent 4'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.MediumList1Accent5">
      <summary>
        <b>'Medium List 1 Accent 5'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.MediumList1Accent6">
      <summary>
        <b>'Medium List 1 Accent 6'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.MediumList2">
      <summary>
        <b>'Medium List 2'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.MediumList2Accent1">
      <summary>
        <b>'Medium List 2 Accent 1'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.MediumList2Accent2">
      <summary>
        <b>'Medium List 2 Accent 2'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.MediumList2Accent3">
      <summary>
        <b>'Medium List 2 Accent 3'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.MediumList2Accent4">
      <summary>
        <b>'Medium List 2 Accent 4'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.MediumList2Accent5">
      <summary>
        <b>'Medium List 2 Accent 5'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.MediumList2Accent6">
      <summary>
        <b>'Medium List 2 Accent 6'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.MediumGrid1">
      <summary>
        <b>'Medium Grid 1'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.MediumGrid1Accent1">
      <summary>
        <b>'Medium Grid 1 Accent 1'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.MediumGrid1Accent2">
      <summary>
        <b>'Medium Grid 1 Accent 2'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.MediumGrid1Accent3">
      <summary>
        <b>'Medium Grid 1 Accent 3'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.MediumGrid1Accent4">
      <summary>
        <b>'Medium Grid 1 Accent 4'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.MediumGrid1Accent5">
      <summary>
        <b>'Medium Grid 1 Accent 5'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.MediumGrid1Accent6">
      <summary>
        <b>'Medium Grid 1 Accent 6'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.MediumGrid2">
      <summary>
        <b>'Medium Grid 2'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.MediumGrid2Accent1">
      <summary>
        <b>'Medium Grid 2 Accent 1'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.MediumGrid2Accent2">
      <summary>
        <b>'Medium Grid 2 Accent 2'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.MediumGrid2Accent3">
      <summary>
        <b>'Medium Grid 2 Accent 3'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.MediumGrid2Accent4">
      <summary>
        <b>'Medium Grid 2 Accent 4'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.MediumGrid2Accent5">
      <summary>
        <b>'Medium Grid 2 Accent 5'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.MediumGrid2Accent6">
      <summary>
        <b>'Medium Grid 2 Accent 6'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.MediumGrid3">
      <summary>
        <b>'Medium Grid 3'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.MediumGrid3Accent1">
      <summary>
        <b>'Medium Grid 3 Accent 1'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.MediumGrid3Accent2">
      <summary>
        <b>'Medium Grid 3 Accent 2'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.MediumGrid3Accent3">
      <summary>
        <b>'Medium Grid 3 Accent 3'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.MediumGrid3Accent4">
      <summary>
        <b>'Medium Grid 3 Accent 4'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.MediumGrid3Accent5">
      <summary>
        <b>'Medium Grid 3 Accent 5'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.MediumGrid3Accent6">
      <summary>
        <b>'Medium Grid 3 Accent 6'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.DarkList">
      <summary>
        <b>'Dark List'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.DarkListAccent1">
      <summary>
        <b>'Dark List Accent 1'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.DarkListAccent2">
      <summary>
        <b>'Dark List Accent 2'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.DarkListAccent3">
      <summary>
        <b>'Dark List Accent 3'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.DarkListAccent4">
      <summary>
        <b>'Dark List Accent 4'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.DarkListAccent5">
      <summary>
        <b>'Dark List Accent 5'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.DarkListAccent6">
      <summary>
        <b>'Dark List Accent 6'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.ColorfulShading">
      <summary>
        <b>'Colorful Shading'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.ColorfulShadingAccent1">
      <summary>
        <b>'Colorful Shading Accent 1'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.ColorfulShadingAccent2">
      <summary>
        <b>'Colorful Shading Accent 2'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.ColorfulShadingAccent3">
      <summary>
        <b>'Colorful Shading Accent 3'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.ColorfulShadingAccent4">
      <summary>
        <b>'Colorful Shading Accent 4'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.ColorfulShadingAccent5">
      <summary>
        <b>'Colorful Shading Accent 5'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.ColorfulShadingAccent6">
      <summary>
        <b>'Colorful Shading Accent 6'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.ColorfulList">
      <summary>
        <b>'Colorful List'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.ColorfulListAccent1">
      <summary>
        <b>'Colorful List Accent 1'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.ColorfulListAccent2">
      <summary>
        <b>'Colorful List Accent 2'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.ColorfulListAccent3">
      <summary>
        <b>'Colorful List Accent 3'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.ColorfulListAccent4">
      <summary>
        <b>'Colorful List Accent 4'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.ColorfulListAccent5">
      <summary>
        <b>'Colorful List Accent 5'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.ColorfulListAccent6">
      <summary>
        <b>'Colorful List Accent 6'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.ColorfulGrid">
      <summary>
        <b>'Colorful Grid'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.ColorfulGridAccent1">
      <summary>
        <b>'Colorful Grid Accent 1'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.ColorfulGridAccent2">
      <summary>
        <b>'Colorful Grid Accent 2'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.ColorfulGridAccent3">
      <summary>
        <b>'Colorful Grid Accent 3'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.ColorfulGridAccent4">
      <summary>
        <b>'Colorful Grid Accent 4'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.ColorfulGridAccent5">
      <summary>
        <b>'Colorful Grid Accent 5'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.StyleTemplateType.ColorfulGridAccent6">
      <summary>
        <b>'Colorful Grid Accent 6'</b> <see cref="T:SautinSoft.Document.Tables.TableStyle" /> (MS WORD 2010).
            </summary>
    </member>
    <member name="T:SautinSoft.Document.LengthUnit">
      <summary>
            Represents the measurement unit for measuring length or distance.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.LengthUnit.Point">
      <summary>
            Point (1 inch is equal as 72 points).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.LengthUnit.Pixel">
      <summary>
            Pixel (1 inch is equal as 96 pixels).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.LengthUnit.Inch">
      <summary>
            Inch (1 inch is equal as 72 points).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.LengthUnit.Millimeter">
      <summary>
            Millimeter (10 millimeters are equal as 1¸centimeter).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.LengthUnit.Centimeter">
      <summary>
            Centimeter (1 inch is around 2.54 centimeters).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.LengthUnit.Pica">
      <summary>
            Pica (1 pica is equal as 12 points).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.LengthUnit.Twip">
      <summary>
            Twip (twentieth of a point, 1 point is equal as 20 twips).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.LengthUnit.Emu">
      <summary>
            English Metric Unit (1 point is equal as 12,700 EMUs).
            </summary>
    </member>
    <member name="T:SautinSoft.Document.UnderlineType">
      <summary>
            Represents type of the underline applied to a text.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.UnderlineType.None">
      <summary>
            Specifies no underline.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.UnderlineType.Single">
      <summary>
            Specifies an underline consisting of a single line.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.UnderlineType.Double">
      <summary>
            Specifies an underline consisting of two lines.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.UnderlineType.Dotted">
      <summary>
            Specifies an underline consisting of a series of dots.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.UnderlineType.Dashed">
      <summary>
            Specifies an underline consisting of a dashed line.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.UnderlineType.DotDash">
      <summary>
            Specifies an underline consisting of a series of dot - dash.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.UnderlineType.DotDotDash">
      <summary>
            Specifies an underline consisting of a series of dot - dot - dash. 
            </summary>
    </member>
    <member name="F:SautinSoft.Document.UnderlineType.Wave">
      <summary>
            Specifies an underline consisting of a single wavy line.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.UnderlineType.DoubleWave">
      <summary>
            Specifies an underline consisting of a pair of wavy lines.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.UnderlineType.UnderlineNonSpaceCharactersOnly">
      <summary>
            Specifies an underline consisting of a single line beneath all non-space characters in the text.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.LineSpacingRule">
      <summary>
            Specifies line spacing values for a paragraph.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.LineSpacingRule.AtLeast">
      <summary>
            The line spacing can be greater than or equal to, but never less than, 
            the value specified in the <see cref="P:SautinSoft.Document.ParagraphFormat.LineSpacing" /> property.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.LineSpacingRule.Exactly">
      <summary>
            The line spacing never changes from the value specified in the <see cref="P:SautinSoft.Document.ParagraphFormat.LineSpacing" /> property, 
            even if a larger font is used within the paragraph.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.LineSpacingRule.Multiple">
      <summary>
             The line spacing is specified in the <see cref="P:SautinSoft.Document.ParagraphFormat.LineSpacing" /> 
             property as the number of lines. 
            </summary>
    </member>
    <member name="T:SautinSoft.Document.OutlineLevel">
      <summary>
            Specifies the outline level of a paragraph in the document.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.OutlineLevel.BodyText">
      <summary>
            The paragraph is at the level of the main text.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.OutlineLevel.Level1">
      <summary>
            The paragraph is at the outline level 1 (topmost level).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.OutlineLevel.Level2">
      <summary>
            The paragraph is at the outline level 2.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.OutlineLevel.Level3">
      <summary>
            The paragraph is at the outline level 3.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.OutlineLevel.Level4">
      <summary>
            The paragraph is at the outline level 4.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.OutlineLevel.Level5">
      <summary>
            The paragraph is at the outline level 5.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.OutlineLevel.Level6">
      <summary>
            The paragraph is at the outline level 6.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.OutlineLevel.Level7">
      <summary>
            The paragraph is at the outline level 7.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.OutlineLevel.Level8">
      <summary>
            The paragraph is at the outline level 8.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.OutlineLevel.Level9">
      <summary>
            The paragraph is at the outline level 9.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.TabStopAlignment">
      <summary>
            Specifies the alignment/type of a tab stop.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.TabStopAlignment.None">
      <summary>
            Clears any tab stop in this position.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.TabStopAlignment.Left">
      <summary>
            Left-aligns the text after the tab stop.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.TabStopAlignment.Center">
      <summary>
            Centers the text around the tab stop.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.TabStopAlignment.Right">
      <summary>
            Right-aligns the text at the tab stop.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.TabStopAlignment.Decimal">
      <summary>
            Aligns the text at the decimal dot.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.TabStopAlignment.Bar">
      <summary>
            Draws a vertical bar at the tab stop position.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.TabStopAlignment.List">
      <summary>
            The tab is a delimiter between the number/bullet and text in a list item.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.TabCharacterLeader">
      <summary>
            Specifies the type of the leader line displayed under the tab character.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.TabCharacterLeader.None">
      <summary>
            Specifies that there shall be no leader character.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.TabCharacterLeader.Dot">
      <summary>
            Specifies that the leader character shall be a dot.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.TabCharacterLeader.Hyphen">
      <summary>
            Specifies that the leader character shall be a hyphen.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.TabCharacterLeader.Underscore">
      <summary>
            Specifies that the leader character shall be an underscore.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.AbsolutePositionTabAlignment">
      <summary>
            Specifies the alignment of an absolutely positioned tab character.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.AbsolutePositionTabAlignment.Left">
      <summary>
            Specifies that the positional tab should be left aligned.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.AbsolutePositionTabAlignment.Center">
      <summary>
            Specifies that the positional tab should be center aligned.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.AbsolutePositionTabAlignment.Right">
      <summary>
            Specifies that the positional tab should be right aligned.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.AbsolutePositionTabAnchor">
      <summary>
            Specifies the possible extents which can be used to calculate the absolute positioning 
            of the positional tab character.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.AbsolutePositionTabAnchor.Indent">
      <summary>
            Specifies that the absolute positioning of the tab shall be relative to the indents. 
            </summary>
    </member>
    <member name="F:SautinSoft.Document.AbsolutePositionTabAnchor.Margin">
      <summary>
            Specifies that the absolute positioning of the tab shall be relative to the margins.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.VerticalAlignment">
      <summary>
            Specifies vertical justification of text inside of the parent element.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.VerticalAlignment.Top">
      <summary>
            Text is aligned at the top of the parent element.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.VerticalAlignment.Center">
      <summary>
            Text is aligned in the middle of the parent element.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.VerticalAlignment.Bottom">
      <summary>
            Text is aligned at the bottom of the parent element.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.ListTemplateType">
      <summary>
            Specifies one of the predefined list formats available in Microsoft Word.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.ListTemplateType.Bullet">
      <summary>
            Bullet for a first level is disc.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.ListTemplateType.BulletCircle">
      <summary>
            Bullet for a first level is circle.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.ListTemplateType.BulletSquare">
      <summary>
            Bullet for a first level is square.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.ListTemplateType.BulletDiamonds">
      <summary>
            Bullet for a first level is diamond.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.ListTemplateType.BulletArrow">
      <summary>
            Bullet for a first level is arrow.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.ListTemplateType.BulletCheckmark">
      <summary>
            Bullet for a first level is checkmark.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.ListTemplateType.LowerLetterWithBracket">
      <summary>
            The number of the first level is "a)".
            </summary>
    </member>
    <member name="F:SautinSoft.Document.ListTemplateType.NumberWithDot">
      <summary>
            The number of the first level is "1.".
            </summary>
    </member>
    <member name="F:SautinSoft.Document.ListTemplateType.NumberWithBracket">
      <summary>
            The number of the first level is "1)".
            </summary>
    </member>
    <member name="F:SautinSoft.Document.ListTemplateType.UpperRomanNumberWithDot">
      <summary>
            The number of the first level is "I.".
            </summary>
    </member>
    <member name="F:SautinSoft.Document.ListTemplateType.UpperLetterWithDot">
      <summary>
            The number of the first level is "A.".
            </summary>
    </member>
    <member name="F:SautinSoft.Document.ListTemplateType.LowerLetterWithDot">
      <summary>
            The number of the first level is "a.".
            </summary>
    </member>
    <member name="F:SautinSoft.Document.ListTemplateType.LowerRomanNumberWithDot">
      <summary>
            The number of the first level is "i.".
            </summary>
    </member>
    <member name="T:SautinSoft.Document.NumberStyle">
      <summary>
            Represents the number style.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.NumberStyle.Decimal">
      <summary>
            Decimal number.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.NumberStyle.UpperRoman">
      <summary>
            Upper Roman number.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.NumberStyle.LowerRoman">
      <summary>
            Lower Roman number.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.NumberStyle.UpperLetter">
      <summary>
            Upper letter.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.NumberStyle.LowerLetter">
      <summary>
            Lower letter.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.NumberStyle.Ordinal">
      <summary>
            Ordinal.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.NumberStyle.CardinalText">
      <summary>
            Cardinal text.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.NumberStyle.OrdinalText">
      <summary>
            Ordinal text.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.NumberStyle.DecimalZero">
      <summary>
            Specifies that the sequence shall consist of Arabic numbering with a zero
            added to numbers one through nine.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.NumberStyle.Chicago">
      <summary>
            Chicago Manual of Style (*, † ...)
            </summary>
    </member>
    <member name="F:SautinSoft.Document.NumberStyle.Bullet">
      <summary>
            Bullet.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.NumberStyle.None">
      <summary>
            None.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.ListTrailingCharacter">
      <summary>
            Specifies trailing character that will be inserted after the number.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.ListTrailingCharacter.Tab">
      <summary>
            Tab.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.ListTrailingCharacter.Space">
      <summary>
            Space.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.ListTrailingCharacter.Nothing">
      <summary>
            Nothing.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.LineNumberRestartSetting">
      <summary>
            Represents line number restart setting.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.LineNumberRestartSetting.None">
      <summary>
            Don't show line numbers.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.LineNumberRestartSetting.Continuous">
      <summary>
            Continue line numbering from previous section
            </summary>
    </member>
    <member name="F:SautinSoft.Document.LineNumberRestartSetting.NewPage">
      <summary>
            Restart line numbering for each page.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.LineNumberRestartSetting.NewSection">
      <summary>
            Restart line numbering for each section.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.Orientation">
      <summary>
            Specifies page orientation.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Orientation.Portrait">
      <summary>
            Portrait page orientation (narrow and tall).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.Orientation.Landscape">
      <summary>
            Landscape page orientation (wide and short).
            </summary>
    </member>
    <member name="T:SautinSoft.Document.PaperType">
      <summary>
            Specifies paper size.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PaperType.A0">
      <summary>
            841 x 1189 mm.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PaperType.A1">
      <summary>
            594 x 841 mm.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PaperType.A2">
      <summary>
            420 x 594 mm.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PaperType.A3">
      <summary>
            297 x 420 mm.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PaperType.A4">
      <summary>
            210 x 297 mm.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PaperType.A5">
      <summary>
            148 x 210 mm.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PaperType.A6">
      <summary>
            105 x 148 mm.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PaperType.A7">
      <summary>
            74 x 105 mm.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PaperType.B0">
      <summary>
            1000 x 1414 mm.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PaperType.B1">
      <summary>
            707 x 1000 mm.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PaperType.B2">
      <summary>
            500 x 707 mm.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PaperType.B3">
      <summary>
            353 x 500 mm.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PaperType.B4">
      <summary>
            250 x 353 mm.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PaperType.B5">
      <summary>
            176 x 250 mm.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PaperType.B6">
      <summary>
            125 x 176 mm.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PaperType.B7">
      <summary>
            88 x 125 mm.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PaperType.C0">
      <summary>
            917 x 1297 mm.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PaperType.C1">
      <summary>
            648 x 917 mm.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PaperType.C2">
      <summary>
            458 x 648 mm.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PaperType.C3">
      <summary>
            324 x 458 mm.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PaperType.C4">
      <summary>
            229 x 324 mm.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PaperType.C5">
      <summary>
            162 x 229 mm.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PaperType.C6">
      <summary>
            114 x 162 mm.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PaperType.C7">
      <summary>
            81 x 114 mm.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PaperType.Letter">
      <summary>
            216 x 279 mm.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PaperType.Legal">
      <summary>
            216 x 356 mm.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PaperType.LedgerTabloid">
      <summary>
            279 x 432 mm.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PaperType.Executive">
      <summary>
            190 x 254 mm.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PaperType.Paper11x17">
      <summary>
            279 x 432 mm.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PaperType.EnvelopeDL">
      <summary>
            110 x 220 mm.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PaperType.EnvelopeC5">
      <summary>
            162 x 229 mm.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PaperType.EnvelopeC6">
      <summary>
            114 x 162 mm.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.SectionStart">
      <summary>
            Specifies type of break at the beginning of the section.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.SectionStart.NewPage">
      <summary>
            The section starts from a new page.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.SectionStart.NewColumn">
      <summary>
            The section starts from a new column.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.SectionStart.Continuous">
      <summary>
            The new section starts on the same page as the previous section.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.SectionStart.EvenPage">
      <summary>
            The section starts on a new even page.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.SectionStart.OddPage">
      <summary>
            The section starts on a new odd page.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.FieldType">
      <summary>
            Specifies Microsoft Word field types.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.FormTextType">
      <summary>
            Specifies the type of a text form field.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.FormTextType.RegularText">
      <summary>
            The text form field can contain any text.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.FormTextType.Number">
      <summary>
            The text form field can contain only numbers.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.FormTextType.Date">
      <summary>
            The text form field can contain only a valid date value.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.FormTextType.CurrentDate">
      <summary>
            The text form field value is the current date when the field is updated.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.FormTextType.CurrentTime">
      <summary>
            The text form field value is the current time when the field is updated.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.FormTextType.Calculation">
      <summary>
            The text form field value is calculated from the expression specified
            in the <see cref="P:SautinSoft.Document.FormTextData.DefaultValue" /> property.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.SpecialCharacterType">
      <summary>
            Represents the special character type.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.SpecialCharacterType.LineBreak">
      <summary>
            Specifies that the document content shall restart on the next line.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.SpecialCharacterType.PageBreak">
      <summary>
            Specifies that the document content shall restart on the next page.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.SpecialCharacterType.ColumnBreak">
      <summary>
            Specifies that the document content shall restart on the next column available 
            on the current page.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.SpecialCharacterType.Tab">
      <summary>
            Specifies that the position of the current line of text will advance to the next
            <see cref="T:SautinSoft.Document.TabStop" /> location which is further along than the
            starting location of the tab or to nearest multiple of the default tab stop width.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.SpecialCharacterType.AbsoluteTab">
      <summary>
            Specifies that the position of the current line of text will advance to 
            the position specified by
            <see cref="P:SautinSoft.Document.AbsolutePositionTabCharacter.Alignment" /> and
            <see cref="P:SautinSoft.Document.AbsolutePositionTabCharacter.RelativeTo" /> properties.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.SpecialCharacterType.NoteMark">
      <summary>
            Specifies that the current position holds the reference to footnote or endnote element.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.SpecialCharacterType.NoteSeparator">
      <summary>
            Specifies the location of footnote or endnote area separator.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.SpecialCharacterType.NoteContinuationSeparator">
      <summary>
            Specifies the location of footnote or endnote area continuation separator.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.HeaderFooterType">
      <summary>
            Specifies the type of the <see cref="T:SautinSoft.Document.HeaderFooter" />.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.HeaderFooterType.HeaderDefault">
      <summary>
            Default header.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\02. Sections and Page Layout\02. Headers and Footers\05. Different Headers\Sample.cs" title="Create a document with different headers: on first page, default and in another section using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\02. Sections and Page Layout\02. Headers and Footers\05. Different Headers\Sample.vb" title="Create a document with different headers: on first page, default and in another section using VB.Net">
        </code>
      </example>
    </member>
    <member name="F:SautinSoft.Document.HeaderFooterType.HeaderEven">
      <summary>
            Header for even pages.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.HeaderFooterType.HeaderFirst">
      <summary>
            Header for the first page in section.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\02. Sections and Page Layout\02. Headers and Footers\05. Different Headers\Sample.cs" title="Create a document with different headers: on first page, default and in another section using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\02. Sections and Page Layout\02. Headers and Footers\05. Different Headers\Sample.vb" title="Create a document with different headers: on first page, default and in another section using VB.Net">
        </code>
      </example>
    </member>
    <member name="F:SautinSoft.Document.HeaderFooterType.FooterDefault">
      <summary>
            Default footer.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.HeaderFooterType.FooterEven">
      <summary>
            Footer for even pages.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.HeaderFooterType.FooterFirst">
      <summary>
            Footer for the first page in section.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\02. Sections and Page Layout\02. Headers and Footers\05. Different Headers\Sample.cs" title="Create a document with different headers: on first page, default and in another section using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\02. Sections and Page Layout\02. Headers and Footers\05. Different Headers\Sample.vb" title="Create a document with different headers: on first page, default and in another section using VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.BuiltInDocumentProperty">
      <summary>
            Represents an available built-in document properties.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.BuiltInDocumentProperty.Title">
      <summary>
            Title of the document.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.BuiltInDocumentProperty.Author">
      <summary>
            Name of the document's author.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.BuiltInDocumentProperty.Subject">
      <summary>
            Subject of the document.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.BuiltInDocumentProperty.Comments">
      <summary>
            Document comments.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.BuiltInDocumentProperty.DateContentCreated">
      <summary>
            UTC time of creation of the document.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.BuiltInDocumentProperty.DateLastSaved">
      <summary>
            UTC time on which the document was last modified/saved.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.BuiltInDocumentProperty.Category">
      <summary>
            Category of the document.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.BuiltInDocumentProperty.Status">
      <summary>
            Status of the document.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.BuiltInDocumentProperty.Keywords">
      <summary>
            Document keywords.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.BuiltInDocumentProperty.LastSavedBy">
      <summary>
            Name of the last author.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.BuiltInDocumentProperty.Manager">
      <summary>
            Manager.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.BuiltInDocumentProperty.Company">
      <summary>
            Company.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.BuiltInDocumentProperty.HyperlinkBase">
      <summary>
            Base hyperlink.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.BuiltInDocumentProperty.Pages">
      <summary>
            Total number of pages.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.BuiltInDocumentProperty.Words">
      <summary>
            Total number of words.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.BuiltInDocumentProperty.Characters">
      <summary>
            Total number of characters except spaces.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.BuiltInDocumentProperty.CharactersWithSpaces">
      <summary>
            Total number of characters with spaces.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.BuiltInDocumentProperty.Lines">
      <summary>
            Total number of lines.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.BuiltInDocumentProperty.Paragraphs">
      <summary>
            Total number of paragraphs.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.ZoomType">
      <summary>
            Represent a possible values for how large or small the document 
            appears on the screen in Microsoft Word.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.ZoomType.None">
      <summary>
            Indicates to use the explicit zoom percentage.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.ZoomType.FullPage">
      <summary>
            Zoom percentage is automatically recalculated to fit one full page.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.ZoomType.BestFit">
      <summary>
            Zoom percentage is automatically recalculated to fit page width.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.ZoomType.TextFit">
      <summary>
            Zoom percentage is automatically recalculated to fit text.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.CharacterSpacingControl">
      <summary>
            Specifies the possible ways in which full-width characters can be compressed to remove 
            additional whitespace.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.CharacterSpacingControl.DoNotCompress">
      <summary>
            Specifies that characters shall not have whitespace compression applied to them.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.CharacterSpacingControl.CompressPunctuation">
      <summary>
            Specifies that only whitespace characters shall have
            whitespace compression applied to them. 
            </summary>
    </member>
    <member name="F:SautinSoft.Document.CharacterSpacingControl.CompressPunctuationAndJapaneseKana">
      <summary>
            Specifies that whitespace and Japanese kana
            characters shall have whitespace compression applied to them.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.DocxFormat">
      <summary>
            An enumeration of Microsoft Word file formats.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.DocxFormat.Docx">
      <summary>
            Word Document.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.DocxFormat.Docm">
      <summary>
            Word Macro-Enabled Document. 
            </summary>
    </member>
    <member name="F:SautinSoft.Document.DocxFormat.Dotx">
      <summary>
            Word Template.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.DocxFormat.Dotm">
      <summary>
            Word Macro-Enabled Template.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.TextDirection">
      <summary>
            Represents a direction of the text flow for the parent element.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.TextDirection.LeftToRight">
      <summary>
            The text in the parent element shall flow from left to right horizontally.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.TextDirection.TopToBottom">
      <summary>
            The text in the parent element shall flow from top to bottom vertically.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.TextDirection.BottomToTop">
      <summary>
            The text in the parent element shall flow from bottom to top vertically.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.HorizontalPositionType">
      <summary>
            Represents a set of possible relative horizontal positions for the parent floating element.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.HorizontalPositionType.Absolute">
      <summary>
            Specifies that the parent object should have absolute horizontal positioning
            with respect to the anchor settings.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.HorizontalPositionType.Left">
      <summary>
            Specifies that the parent object shall be left aligned with respect to the anchor settings.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.HorizontalPositionType.Center">
      <summary>
            Specifies that the parent object shall be centered with respect to the anchor settings.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.HorizontalPositionType.Right">
      <summary>
            Specifies that the parent object shall be right aligned with respect to the anchor settings.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.HorizontalPositionType.Inside">
      <summary>
            Specifies that the parent object shall be inside of the anchor object.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.HorizontalPositionType.Outside">
      <summary>
            Specifies that the parent object shall be outside of the anchor object.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.HorizontalPositionAnchor">
      <summary>
            Represents a horizontal position to which the parent object has been anchored in the document.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.HorizontalPositionAnchor.Margin">
      <summary>
            Specifies that the parent object shall be horizontally anchored to the text margins.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.HorizontalPositionAnchor.Page">
      <summary>
            Specifies that the parent object shall be horizontally anchored to the page edge.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.HorizontalPositionAnchor.Column">
      <summary>
            Specifies that the parent object shall be horizontally anchored to the text extents.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.HorizontalPositionAnchor.Character">
      <summary>
            Specifies that the horizontal positioning shall be relative to the position 
            of the anchor within its text.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.HorizontalPositionAnchor.LeftMargin">
      <summary>
            Specifies that the horizontal positioning shall be relative to the left margin of the page.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.HorizontalPositionAnchor.RightMargin">
      <summary>
            Specifies that the horizontal positioning shall be relative to the right margin of the page.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.HorizontalPositionAnchor.InsideMargin">
      <summary>
            Specifies that the horizontal positioning shall be relative to the inside margin 
            of the current page (the left margin on odd pages, right on even pages).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.HorizontalPositionAnchor.OutsideMargin">
      <summary>
            Specifies that the horizontal positioning shall be relative to the outside margin
            of the current page (the right margin on odd pages, left on even pages).
            </summary>
    </member>
    <member name="T:SautinSoft.Document.VerticalPositionType">
      <summary>
            Represents a set of possible relative vertical positions for the parent floating element.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.VerticalPositionType.Absolute">
      <summary>
            Specifies that the parent object should have absolute vertical positioning with respect to the anchor settings.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.VerticalPositionType.Top">
      <summary>
            Specifies that the parent object shall be vertically aligned to the top edge of the anchor object.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.VerticalPositionType.Center">
      <summary>
            Specifies that the parent object shall be vertically centered with respect to the anchor object.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.VerticalPositionType.Bottom">
      <summary>
            Specifies that the parent object shall be vertically aligned to the bottom edge of the anchor object.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.VerticalPositionType.Inside">
      <summary>
            Specifies that the parent object shall be vertically aligned to the edge of the anchor object, and positioned inside that object.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.VerticalPositionType.Outside">
      <summary>
            Specifies that the parent object shall be vertically aligned to the edge of the anchor object, and positioned outside that object.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.VerticalPositionAnchor">
      <summary>
            Represents a vertical position to which the parent object has been anchored in the document.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.VerticalPositionAnchor.Margin">
      <summary>
            Specifies that the parent object shall be vertically anchored to the text margins.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.VerticalPositionAnchor.Page">
      <summary>
            Specifies that the parent object shall be vertically anchored to the page edge.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.VerticalPositionAnchor.Paragraph">
      <summary>
            Specifies that the parent object shall be vertically anchored to the text extents.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.VerticalPositionAnchor.Line">
      <summary>
            Specifies that the vertical positioning shall be relative to the line containing the anchor character.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.VerticalPositionAnchor.TopMargin">
      <summary>
            Specifies that the vertical positioning shall be relative to the top margin of the current page.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.VerticalPositionAnchor.BottomMargin">
      <summary>
            Specifies that the vertical positioning shall be relative to the bottom margin of the current page.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.VerticalPositionAnchor.InsideMargin">
      <summary>
            Specifies that the vertical positioning shall be relative to the inside margin of the current page.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.VerticalPositionAnchor.OutsideMargin">
      <summary>
            Specifies that the vertical positioning shall be relative to the outside margin of the current page.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.PdfConversionMode">
      <summary>
            An enumeration of the PDF document conversion modes.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PdfConversionMode.Flowing">
      <summary>
            The most useful and common type of document for editing.
            The resulting document looks as if it was typed by human.
            </summary>
      <remarks>
            The document's layout created without using text boxes. 
            This is very convenient for editing and a resulting document looks as typed by a human.
            </remarks>
    </member>
    <member name="F:SautinSoft.Document.PdfConversionMode.Continuous">
      <summary>
            A golden mean between <see cref="F:SautinSoft.Document.PdfConversionMode.Flowing" /> and 
            <see cref="F:SautinSoft.Document.PdfConversionMode.Exact" /> modes.
            </summary>
      <remarks>
            The document's layout created by using text boxes grouped in blocks.
            </remarks>
    </member>
    <member name="F:SautinSoft.Document.PdfConversionMode.Exact">
      <summary>
            The most precise and fastest mode. The resulting document looks exact as PDF pixel by pixel.
            </summary>
      <remarks>
            The document's layout created by using text boxes, this gives a monumental accuracy for
            PDF conversion. Because all text in PDF documents builded by coordinates and using text
            boxes allows to build resulting document in the same way.
            </remarks>
    </member>
    <member name="T:SautinSoft.Document.StyleImportingMode">
      <summary>
            Specifies how style formatting is merged when importing content between different documents.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\08. Manipulation\10. Element - Import with UseDestinationStyles\Sample.cs" title="Import an Element with Styles from another document. Mode: UseDestinationStyles using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\08. Manipulation\10. Element - Import with UseDestinationStyles\Sample.vb" title="Import an Element with Styles from another document. Mode: UseDestinationStyles using VB.Net">
        </code>
      </example>
    </member>
    <member name="F:SautinSoft.Document.StyleImportingMode.UseDestinationStyles">
      <summary>
            Use the destination document styles with the same name, otherwise copy new styles. This is the default option.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\08. Manipulation\10. Element - Import with UseDestinationStyles\Sample.cs" title="Import an Element with Styles from another document. Mode: UseDestinationStyles using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\08. Manipulation\10. Element - Import with UseDestinationStyles\Sample.vb" title="Import an Element with Styles from another document. Mode: UseDestinationStyles using VB.Net">
        </code>
      </example>
    </member>
    <member name="F:SautinSoft.Document.StyleImportingMode.KeepSourceFormatting">
      <summary>
            Copy all required styles to the destination document, generate unique style names if needed.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\08. Manipulation\12. Element - Import with KeepSourceFormatting\Sample.cs" title="Import an Element with Styles from another document. Mode: KeepSourceFormatting using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\08. Manipulation\12. Element - Import with KeepSourceFormatting\Sample.vb" title="Import an Element with Styles from another document. Mode: KeepSourceFormatting using VB.Net">
        </code>
      </example>
    </member>
    <member name="F:SautinSoft.Document.StyleImportingMode.KeepDifferentStyles">
      <summary>
            Only copy styles that are different from those in the source document.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\08. Manipulation\11. Element - Import with KeepDifferentStyles\Sample.cs" title="Import an Element with Styles from another document. Mode: KeepDifferentStyles using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\08. Manipulation\11. Element - Import with KeepDifferentStyles\Sample.vb" title="Import an Element with Styles from another document. Mode: KeepDifferentStyles using VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.EditingRestrictionType">
      <summary>
            Represents a possible set of editing restrictions which may be enforced on a given document.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.EditingRestrictionType.None">
      <summary>
            Specifies that no editing restrictions have been applied to the document.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.EditingRestrictionType.TrackedChanges">
      <summary>
            Specifies that the edits made to this document shall be tracked as revisions.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.EditingRestrictionType.Comments">
      <summary>
            Specifies that the edits made to this document shall be restricted to the 
            insertion and deletion of comments within the document.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.EditingRestrictionType.FillingForms">
      <summary>
            Specifies that the edits made to this document shall be restricted to editing of form fields.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.EditingRestrictionType.NoChanges">
      <summary>
            Specifies that the document is read-only (no edits shall be allowed).
            </summary>
    </member>
    <member name="T:SautinSoft.Document.PdfCompliance">
      <summary>
            Specifies the PDF standards compliance level.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PdfCompliance.PDF_12">
      <summary>
            The output file will comply with the PDF 1.2 standard.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PdfCompliance.PDF_13">
      <summary>
            The output file will comply with the PDF 1.3 standard.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PdfCompliance.PDF_14">
      <summary>
            The output file will comply with the PDF 1.4 standard.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PdfCompliance.PDF_15">
      <summary>
            The output file will comply with the PDF 1.5 standard.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PdfCompliance.PDF_16">
      <summary>
            The output file will comply with the PDF 1.6 standard.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PdfCompliance.PDF_17">
      <summary>
            The output file will comply with the PDF 1.7 standard.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PdfCompliance.PDF_A1a">
      <summary>
            The output file will comply with the PDF/A-1a 
            (see <a href="http://en.wikipedia.org/wiki/PDF/A" target="_blank">http://en.wikipedia.org/wiki/PDF/A</a>)
            standard.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PdfCompliance.PDF_A1b">
      <summary>
            The output file will comply with the PDF/A-1b
            (see <a href="http://en.wikipedia.org/wiki/PDF/A" target="_blank">http://en.wikipedia.org/wiki/PDF/A</a>)
            standard.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PdfCompliance.PDF_A2a">
      <summary>
            The output file will comply with the PDF/A-2a 
            (see <a href="http://en.wikipedia.org/wiki/PDF/A" target="_blank">http://en.wikipedia.org/wiki/PDF/A</a>)
            standard.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PdfCompliance.PDF_A2b">
      <summary>
            The output file will comply with the PDF/A-2b
            (see <a href="http://en.wikipedia.org/wiki/PDF/A" target="_blank">http://en.wikipedia.org/wiki/PDF/A</a>)
            standard.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PdfCompliance.PDF_A2u">
      <summary>
            The output file will comply with the PDF/A-2u
            (see <a href="http://en.wikipedia.org/wiki/PDF/A" target="_blank">http://en.wikipedia.org/wiki/PDF/A</a>)
            standard.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PdfCompliance.PDF_A3a">
      <summary>
            The output file will comply with the PDF/A-3a 
            (see <a href="http://en.wikipedia.org/wiki/PDF/A" target="_blank">http://en.wikipedia.org/wiki/PDF/A</a>)
            standard.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PdfCompliance.PDF_A3b">
      <summary>
            The output file will comply with the PDF/A-3b
            (see <a href="http://en.wikipedia.org/wiki/PDF/A" target="_blank">http://en.wikipedia.org/wiki/PDF/A</a>)
            standard.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PdfCompliance.PDF_A3u">
      <summary>
            The output file will comply with the PDF/A-3u
            (see <a href="http://en.wikipedia.org/wiki/PDF/A" target="_blank">http://en.wikipedia.org/wiki/PDF/A</a>)
            standard.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.CssExportMode">
      <summary>
            Specifies how CSS (Cascading Style Sheet) styles are exported to HTML.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.CssExportMode.Ignore">
      <summary>
            Ignore any styling information when generating a HTML.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.CssExportMode.Inline">
      <summary>
            CSS styles are written inline (as a value of the style attribute on every element).
            </summary>
    </member>
    <member name="F:SautinSoft.Document.CssExportMode.Embedded">
      <summary>
            CSS styles are written separately from the content in a style sheet embedded in the HTML file.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.CssExportMode.External">
      <summary>
            CSS styles are written separately from the content in a style sheet in an external file. 
            The HTML file links the style sheet.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.HtmlListExportMode">
      <summary>
            Specifies how list labels are exported to HTML and MHTML.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.HtmlListExportMode.Auto">
      <summary>
            Outputs list labels in auto mode. Uses HTML native elements when possible.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.HtmlListExportMode.AsInlineText">
      <summary>
            Outputs all list labels as inline text.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.HtmlListExportMode.ByHtmlTags">
      <summary>
            Outputs all list labels as HTML native elements.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.HtmlHeadersFootersExportMode">
      <summary>
            Specifies how headers and footers are exported to HTML and MHTML.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.HtmlHeadersFootersExportMode.None">
      <summary>
            Headers and footers are not exported.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.HtmlHeadersFootersExportMode.PerSection">
      <summary>
            Primary headers and footers are exported at the beginning and the end of each section.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.HtmlHeadersFootersExportMode.FirstSectionHeaderLastSectionFooter">
      <summary>
            Primary header of the first section is exported at the beginning of the document and
            primary footer is at the end.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.HtmlHeadersFootersExportMode.FirstPageHeaderFooterPerSection">
      <summary>
            First page header and footer are exported at the beginning and the end of each section.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.HtmlVersion">
      <summary>
            Indicates the version of HTML is used when saving the document to Html and Mhtml formats.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.HtmlVersion.Xhtml">
      <summary>
            Saves the document in compliance with the XHTML 1.0 Transitional standard.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.HtmlVersion.Html5">
      <summary>
            Saves the document in compliance with the HTML 5 standard.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.HtmlVersion.Html401">
      <summary>
            Saves the document in compliance with the HTML 4.01 standard.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.HtmlVersion.Html32">
      <summary>
            Saves the document in compliance with the HTML 3.2 standard.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.HtmlSplitCriteria">
      <summary>
            Specifies how the document is split into parts when saving to Html format.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.HtmlSplitCriteria.None">
      <summary>
            The document is not split.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.HtmlSplitCriteria.PageBreak">
      <summary>
            The document is split into parts at explicit page breaks.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.HtmlSplitCriteria.ColumnBreak">
      <summary>
            The document is split into parts at column breaks. 
            </summary>
    </member>
    <member name="F:SautinSoft.Document.HtmlSplitCriteria.SectionBreak">
      <summary>
            The document is split into parts at a section break of any type.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.HtmlSplitCriteria.HeadingParagraph">
      <summary>
            The document is split into parts at a paragraph formatted using a heading style
            <b>Heading 1</b>, <b>Heading 2</b> etc. 
            </summary>
    </member>
    <member name="T:SautinSoft.Document.PdfPermissions">
      <summary>
            Specifies the operations that are allowed to a user on an encrypted PDF document.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PdfPermissions.DisallowAll">
      <summary>
            Disallows all operations on the PDF document. This is the default value.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PdfPermissions.AllowAll">
      <summary>
            Allows all operations on the PDF document.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PdfPermissions.ContentCopy">
      <summary>
            Allows copying or otherwise extracting text and graphics from the document, 
            including extraction for accessibility purposes.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PdfPermissions.ContentCopyForAccessibility">
      <summary>
            Allows extract text and graphics in support of accessibility to disabled users 
            or for other purposes. When using RC4 40-bit encryption, this option is ignored
            and accessibility is allowed whenever <b>ContentCopy</b> is set.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PdfPermissions.ModifyContents">
      <summary>
            Allows modifying the document’s contents.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PdfPermissions.ModifyAnnotations">
      <summary>
            Allows adding or modifying text annotations. When using RC4 40-bit encryption, 
            this option also allows filling in form fields.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PdfPermissions.FillIn">
      <summary>
            Allows filling in forms and signing the document. When using RC4 40-bit encryption,
            this option is ignored and filling in form is allowed whenever <b>ModifyAnnotations</b> is set.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PdfPermissions.DocumentAssembly">
      <summary>
            Allows assembling the document: inserting, rotating, or deleting pages and creating 
            navigation elements such as bookmarks or thumbnail images. When using RC4 40-bit encryption,
            this option is ignored and document assembly is allowed when <b>ModifyContents</b> is set.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PdfPermissions.Printing">
      <summary>
            Allows printing the document.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PdfPermissions.HighResolutionPrinting">
      <summary>
            Allows printing the document to the highest resolution possible.
            When using RC4 40-bit encryption, this option is ignored and high resolution 
            printing is allowed when <b>Printing</b> is set.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.PdfEncryptionAlgorithm">
      <summary>
            Specifies the encryption algorithm to use for encrypting a PDF document.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PdfEncryptionAlgorithm.RC4_40">
      <summary>
            RC4 encryption, key length of 40 bits.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.PdfEncryptionAlgorithm.RC4_128">
      <summary>
            RC4 encryption, key length of 128 bits.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.NoteType">
      <summary>
            Represents <see cref="T:SautinSoft.Document.Note">Note</see> type.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.NoteType.Footnote">
      <summary>
            Footnote.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.NoteType.Endnote">
      <summary>
            Endnote.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.NoteLocation">
      <summary>
            Represents the <see cref="T:SautinSoft.Document.Note">Note</see> rendering location.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.NoteLocation.BottomOfPage">
      <summary>
            Bottom of page.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.NoteLocation.BelowText">
      <summary>
            Below text or content.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.NoteLocation.EndOfDocument">
      <summary>
            End of document.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.NoteLocation.EndOfSection">
      <summary>
            End of section.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.NoteNumbering">
      <summary>
            Represents the <see cref="T:SautinSoft.Document.Note">Note</see> numbering mode.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.NoteNumbering.Continuous">
      <summary>
            Continuous.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.NoteNumbering.RestartEachSection">
      <summary>
            Resets numbering on each section to start at the number specified in the 
            <see cref="P:SautinSoft.Document.NoteSettings.StartAt">StartAt</see>.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.NoteNumbering.RestartEachPage">
      <summary>
            Resets numbering on each page to start at the number specified in the 
            <see cref="P:SautinSoft.Document.NoteSettings.StartAt">StartAt</see>.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.HeightRule">
      <summary>
            Specifies the rule for determining the height of an object.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.HeightRule.Auto">
      <summary>
            The height will grow automatically to accommodate all text inside an object.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.HeightRule.AtLeast">
      <summary>
            The height will be at least the specified height in points. It will grow, 
            if needed, to accommodate all text inside an object.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.HeightRule.Exact">
      <summary>
            The height is specified exactly in points. Please note that if the text cannot fit
            inside the object of this height, it will appear truncated.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.DropCapPosition">
      <summary>
            Specifies the position for a drop cap text.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.DropCapPosition.None">
      <summary>
            Specifies that this text frame is not a drop cap textframe. 
            </summary>
    </member>
    <member name="F:SautinSoft.Document.DropCapPosition.Normal">
      <summary>
            The drop cap is positioned inside the text margin on the anchor paragraph.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.DropCapPosition.Margin">
      <summary>
            The drop cap is positioned outside the text margin on the anchor paragraph.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.OCRMode">
      <summary>
            Specifies in which cases OCR will be performed, during load PDF document.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.OCRMode.Disabled">
      <summary>
            OCR is disabled.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.OCRMode.Auto">
      <summary>
            OCR will be performed if the image is large enough and over just one image per page.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.OCRMode.Enabled">
      <summary>
            OCR will be performed over all images per page.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.RevisionType">
      <summary>
            Specifies the type of change being tracked in <see cref="T:SautinSoft.Document.Revision">Revision</see>.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.RevisionType.Insertion">
      <summary>
            New content was inserted in the document.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.RevisionType.Deletion">
      <summary>
            Content was removed from the document.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.RevisionType.MovedFrom">
      <summary>
            Content was moved (deleted) in the document.
            </summary>
    </member>
    <member name="F:SautinSoft.Document.RevisionType.MovedTo">
      <summary>
            Content was moved (inserted) in the document.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.ParagraphFormat">
      <summary>
            Represents a set of paragraph formatting properties which shall be applied to
            the contents of the parent paragraph.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\02. Paragraph Formatting\Sample.cs" title="This sample shows how to specify a paragraph formatting in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\02. Paragraph Formatting\Sample.vb" title="This sample shows how to specify a paragraph formatting in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.ParagraphFormat.Style">
      <summary>
            Gets or sets the paragraph style.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\11. Styles\Sample.cs" title="This sample shows how to work with styles in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\11. Styles\Sample.vb" title="This sample shows how to work with styles in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.ParagraphFormat.Borders">
      <summary>
            Gets collection of borders of the paragraph.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.ParagraphFormat.Tabs">
      <summary>
            Gets collection of custom tab stops.
            </summary>
      <remarks>
            This collection specifies a sequence of custom <see cref="T:SautinSoft.Document.TabStop" />s
            which shall be used for any 
            <see cref="T:SautinSoft.Document.SpecialCharacter" /> elements that have 
            <see cref="P:SautinSoft.Document.SpecialCharacter.CharacterType" /> equal to 
            <see cref="F:SautinSoft.Document.SpecialCharacterType.Tab" />.
            </remarks>
    </member>
    <member name="P:SautinSoft.Document.ParagraphFormat.Alignment">
      <summary>
            Gets or sets the text alignment for the paragraph.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\02. Paragraph Formatting\Sample.cs" title="This sample shows how to specify a paragraph formatting in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\02. Paragraph Formatting\Sample.vb" title="This sample shows how to specify a paragraph formatting in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.ParagraphFormat.BackgroundColor">
      <summary>
            Gets or sets the paragraph background color.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\02. Paragraph Formatting\Sample.cs" title="This sample shows how to specify a paragraph formatting in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\02. Paragraph Formatting\Sample.vb" title="This sample shows how to specify a paragraph formatting in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.ParagraphFormat.KeepLinesTogether">
      <summary>
            When true, all lines for this paragraph are maintained on a single page whenever possible.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.ParagraphFormat.KeepWithNext">
      <summary>
            When true, the paragraph is on the same page as the following paragraph whenever possible.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.ParagraphFormat.LeftIndentation">
      <summary>
            Gets or sets the value (in points) that represents the left indent for paragraph.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.ParagraphFormat.LineSpacing">
      <summary>
            Gets or sets the line spacing for the paragraph depending of <see cref="P:SautinSoft.Document.ParagraphFormat.LineSpacingRule" />.
            </summary>
      <remarks>
        <para>When <see cref="P:SautinSoft.Document.ParagraphFormat.LineSpacingRule" /> property is set to 
            <see cref="F:SautinSoft.Document.LineSpacingRule.AtLeast" />, 
            the line spacing can be greater than or equal to, but never less than the specified value.</para>
        <para>When <see cref="P:SautinSoft.Document.ParagraphFormat.LineSpacingRule" /> property is set to 
            <see cref="F:SautinSoft.Document.LineSpacingRule.Exactly" />, 
            the line spacing never changes from the specified value, 
            even if a larger font is used within the paragraph.</para>
      </remarks>
    </member>
    <member name="P:SautinSoft.Document.ParagraphFormat.LineSpacingRule">
      <summary>
            Gets or sets the line spacing rule for the paragraph.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.ParagraphFormat.MirrorIndents">
      <summary>
            Gets or sets whether the paragraph indents should be interpreted as mirrored indents.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.ParagraphFormat.NoSpaceBetweenParagraphsOfSameStyle">
      <summary>
            When true, <see cref="P:SautinSoft.Document.ParagraphFormat.SpaceBefore" /> and
            <see cref="P:SautinSoft.Document.ParagraphFormat.SpaceAfter" /> will be ignored 
            between the paragraphs of the same style.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.ParagraphFormat.OutlineLevel">
      <summary>
            Gets or sets the outline level of the paragraph.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.ParagraphFormat.PageBreakBefore">
      <summary>
            When true, this paragraph is rendered on the start of a new page in the document.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.ParagraphFormat.RightIndentation">
      <summary>
            Gets or sets the value (in points) that represents the right indent for paragraph.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.ParagraphFormat.RightToLeft">
      <summary>
            Gets or sets whether this is a right-to-left paragraph.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.ParagraphFormat.SpaceAfter">
      <summary>
            Gets or sets the amount of spacing (in points) after the paragraph.
            </summary>
      <remarks>
            Has no effect when <see cref="P:SautinSoft.Document.ParagraphFormat.AfterAutospacing" /> is true.
            </remarks>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\02. Paragraph Formatting\Sample.cs" title="This sample shows how to specify a paragraph formatting in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\02. Paragraph Formatting\Sample.vb" title="This sample shows how to specify a paragraph formatting in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.ParagraphFormat.AfterAutospacing">
      <summary>
            When true, the amount of spacing after the paragraph is set automatically.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.ParagraphFormat.SpaceBefore">
      <summary>
            Gets or sets the amount of spacing (in points) before the paragraph.
            </summary>
      <remarks>
            Has no effect when <see cref="P:SautinSoft.Document.ParagraphFormat.BeforeAutospacing" /> is true.
            </remarks>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\02. Paragraph Formatting\Sample.cs" title="This sample shows how to specify a paragraph formatting in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\02. Paragraph Formatting\Sample.vb" title="This sample shows how to specify a paragraph formatting in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.ParagraphFormat.BeforeAutospacing">
      <summary>
            When true, the amount of spacing before the paragraph is set automatically.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.ParagraphFormat.SpecialIndentation">
      <summary>
            Gets or sets the value (in points) for a first line or hanging indent.
            Use a positive value to set a first-line indent, and use a negative value 
            to set a hanging indent.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.ParagraphFormat.WidowControl">
      <summary>
            When true, this will prevent a single line of the paragraph from being displayed on
            a separate page from the remaining content.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.ParagraphFormat.Clone">
      <summary>
            Clones this <see cref="T:SautinSoft.Document.ParagraphFormat" /> instance.
            </summary>
      <returns>
            Cloned <see cref="T:SautinSoft.Document.ParagraphFormat" /> .
            </returns>
    </member>
    <member name="M:SautinSoft.Document.ParagraphFormat.ClearFormatting">
      <summary>
            Clears the formatting.
            </summary>
      <remarks>
            This method will clear all directly set formatting values.
            When retrieving formatting value, they can still come from other sources.
            </remarks>
    </member>
    <member name="M:SautinSoft.Document.ParagraphFormat.Equals(System.Object)">
      <summary>
            Determines whether the specified object is equal to this
            <see cref="T:SautinSoft.Document.ParagraphFormat" /> instance.
            </summary>
      <param name="obj">The object to compare with this 
            <see cref="T:SautinSoft.Document.ParagraphFormat" /> instance.</param>
      <returns>
            true if the specified object is a <see cref="T:SautinSoft.Document.ParagraphFormat" /> and is equal 
            to this <see cref="T:SautinSoft.Document.ParagraphFormat" /> instance; otherwise, false.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.ParagraphFormat.#ctor">
      <summary>
            Initializes a new instance of <see cref="T:SautinSoft.Document.ParagraphFormat" /> class.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\02. Paragraph Formatting\Sample.cs" title="This sample shows how to specify a paragraph formatting in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\02. Paragraph Formatting\Sample.vb" title="This sample shows how to specify a paragraph formatting in VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.Format">
      <summary>
            Represents a base class for all formatting.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Format.Document">
      <summary>
            Gets the owner document.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.Format.ClearFormatting">
      <summary>
            Clears the formatting.
            </summary>
      <remarks>
            This method will clear all directly set formatting values.
            </remarks>
    </member>
    <member name="T:SautinSoft.Document.InlineCollection">
      <summary>
            Represents a collection of <see cref="T:SautinSoft.Document.Inline" /> derived elements.
            </summary>
      <remarks>
        <para>
            Although <see cref="T:SautinSoft.Document.InlineCollection" /> is a strongly typed collection of a 
            <see cref="T:SautinSoft.Document.Inline" /> derived elements, not all <see cref="T:SautinSoft.Document.Inline" /> 
            derived elements are supported in every <see cref="T:SautinSoft.Document.InlineCollection" />.
            </para>
        <para>
            For example, <see cref="P:SautinSoft.Document.Paragraph.Inlines" /> and 
            <see cref="P:SautinSoft.Document.Field.ResultInlines" /> support all <see cref="T:SautinSoft.Document.Inline" />
            derived elements, and <see cref="P:SautinSoft.Document.Hyperlink.DisplayInlines" /> doesn't support
            <see cref="T:SautinSoft.Document.Hyperlink" /> element.
            </para>
        <para>
            Supported element types can be retrieved through
            <see cref="P:SautinSoft.Document.ElementCollection.SupportedElementTypes" /> property.
            </para>
      </remarks>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\04. Paragraph\05. Merge paragraph\Sample.cs" title="Merge all paragraphs into a single in an existing PDF document in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\04. Paragraph\05. Merge paragraph\Sample.vb" title="Merge all paragraphs into a single in an existing PDF document in VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.Inline">
      <summary>
            Represents a base class for all inline elements.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\05. Text\01. Add Text\Sample.cs" title="How to create a simple document with text in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\05. Text\01. Add Text\Sample.vb" title="How to create a simple document with text in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Inline.Clone(System.Boolean)">
      <summary>
            Clones this element instance.
            </summary>
      <remarks>
        <para>This method serves as a copy constructor for elements. The cloned element
            has no parent, but belongs to the same document as the original element. </para>
        <para>If you want to insert this element into another document, then you should
            first import it into another document with 
            <see cref="M:SautinSoft.Document.DocumentCore.Import``1(``0,System.Boolean,System.Boolean)">Import&lt;T&gt;(T,System.Boolean,System.Boolean)</see>
            method and then insert the imported element.
            </para>
      </remarks>
      <param name="cloneDescendants">
        <see langword="True" /> to clone all descendants.</param>
      <returns>
            The cloned element.
            </returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\04. Paragraph\05. Merge paragraph\Sample.cs" title="Merge all paragraphs into a single in an existing PDF document in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\04. Paragraph\05. Merge paragraph\Sample.vb" title="Merge all paragraphs into a single in an existing PDF document in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Inline.ParentCollection">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.InlineCollection" /> that contains this
            <see cref="T:SautinSoft.Document.Inline" /> instance.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Inline.IsDeleteRevision">
      <summary>
            Returns true if this inline was deleted in Microsoft Word while change tracking was enabled.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Inline.IsInsertRevision">
      <summary>
            Returns true if this inline was inserted in Microsoft Word while change tracking was enabled.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Inline.IsMoveFromRevision">
      <summary>
            Returns true if this inline was moved (deleted) in Microsoft Word while change tracking was enabled.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Inline.IsMoveToRevision">
      <summary>
            Returns true if this inline was moved (inserted) in Microsoft Word while change tracking was enabled.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.Paragraph">
      <summary>
            Represents a paragraph of content in the document.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\04. Paragraph\01. Paragraph\Sample.cs" title="Creates a new document with a one paragraph in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\04. Paragraph\01. Paragraph\Sample.vb" title="Creates a new document with a one paragraph in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Paragraph.ElementType">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.ElementType" /> of this element instance.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Paragraph.Inlines">
      <summary>
            Gets the paragraph's inlines.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\05. Text\01. Add Text\Sample.cs" title="How to create a simple document with text in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\05. Text\01. Add Text\Sample.vb" title="How to create a simple document with text in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Paragraph.ParagraphFormat">
      <summary>
            Gets or sets the paragraph format.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\02. Paragraph Formatting\Sample.cs" title="How to specify a paragraph formatting in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\02. Paragraph Formatting\Sample.vb" title="How to specify a paragraph formatting in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Paragraph.CharacterFormatForParagraphMark">
      <summary>
            Gets or sets the character format for the paragraph mark.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Paragraph.ListFormat">
      <summary>
            Gets or sets the list format.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\04. Lists - Add simple List\Sample.cs" title="How to create a simple document with ordered and unordered lists in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\04. Lists - Add simple List\Sample.vb" title="How to create a simple document with ordered and unordered lists in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Paragraph.ListItem">
      <summary>
            Gets the list item or <b>null</b> if paragraph doesn't have list item.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\04. Lists - Add simple List\Sample.cs" title="How to create a simple document with ordered and unordered lists in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\04. Lists - Add simple List\Sample.vb" title="How to create a simple document with ordered and unordered lists in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Paragraph.FrameFormat">
      <summary>
            Gets the text frame format.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Paragraph.IsDeleteRevision">
      <summary>
            Returns true if this paragraph was deleted in Microsoft Word while change tracking was enabled.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Paragraph.IsInsertRevision">
      <summary>
            Returns true if this paragraph was inserted in Microsoft Word while change tracking was enabled.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Paragraph.IsMoveFromRevision">
      <summary>
            Returns true if this paragraph was moved (deleted) in Microsoft Word while change tracking was enabled.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Paragraph.IsMoveToRevision">
      <summary>
            Returns true if this paragraph was moved (inserted) in Microsoft Word while change tracking was enabled.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.Paragraph.Clone(System.Boolean)">
      <summary>
            Clones this element instance.
            </summary>
      <remarks>
        <para>This method serves as a copy constructor for elements. The cloned element
            has no parent, but belongs to the same document as the original element. </para>
        <para>If you want to insert this element into another document, then you should
            first import it into another document with 
            <see cref="M:SautinSoft.Document.DocumentCore.Import``1(``0,System.Boolean,System.Boolean)">Import&lt;T&gt;(T,System.Boolean,System.Boolean)</see>
            method and then insert the imported element.
            </para>
      </remarks>
      <param name="cloneDescendants">
        <see langword="True" /> to clone all descendants.</param>
      <returns>
            The cloned element.
            </returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\08. Manipulation\08. Element - Cloning\Sample.cs" title="How to clone a paragraph in DOCX document in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\08. Manipulation\08. Element - Cloning\Sample.vb" title="How to clone a paragraph in DOCX document in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Paragraph.#ctor(SautinSoft.Document.DocumentCore)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Paragraph" />.
            </summary>
      <param name="document">The owner document.</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\04. Paragraph\01. Paragraph\Sample.cs" title="Creates a new document with a one paragraph in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\04. Paragraph\01. Paragraph\Sample.vb" title="Creates a new document with a one paragraph in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Paragraph.#ctor(SautinSoft.Document.DocumentCore,SautinSoft.Document.Inline[])">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Paragraph" />.
            </summary>
      <param name="document">The owner document.</param>
      <param name="items">The paragraph content.</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\02. Paragraph Formatting\Sample.cs" title="This sample shows how to specify a paragraph formatting in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\02. Paragraph Formatting\Sample.vb" title="This sample shows how to specify a paragraph formatting in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Paragraph.#ctor(SautinSoft.Document.DocumentCore,System.Collections.Generic.IEnumerable{SautinSoft.Document.Inline})">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Paragraph" />.
            </summary>
      <param name="document">The owner document.</param>
      <param name="items">The paragraph content.</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\02. Paragraph Formatting\Sample.cs" title="This sample shows how to specify a paragraph formatting in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\02. Paragraph Formatting\Sample.vb" title="This sample shows how to specify a paragraph formatting in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Paragraph.#ctor(SautinSoft.Document.DocumentCore,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.Paragraph" />.
            </summary>
      <param name="document">The owner document.</param>
      <param name="text">The paragraph text.</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\02. Paragraph Formatting\Sample.cs" title="This sample shows how to specify a paragraph formatting in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\02. Paragraph Formatting\Sample.vb" title="This sample shows how to specify a paragraph formatting in VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.ContentRange">
      <summary>
            Represents an area in document bounded by two <see cref="T:SautinSoft.Document.ContentPosition" />s.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\08. Manipulation\02. Manipulation with Content\Sample.cs" title="Adds two paragraphs by different ways: using ContentRange and as Element in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\08. Manipulation\02. Manipulation with Content\Sample.vb" title="Adds two paragraphs by different ways: using ContentRange and as Element in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.ContentRange.Start">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.ContentPosition" /> that marks the beginning 
            of the current <see cref="T:SautinSoft.Document.ContentRange" />.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\08. Manipulation\04. Content - Insert\Sample.cs" title="Creates a new document with some content using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\08. Manipulation\04. Content - Insert\Sample.vb" title="Creates a new document with some content using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.ContentRange.End">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.ContentPosition" /> that marks the end
            of the current <see cref="T:SautinSoft.Document.ContentRange" />.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\08. Manipulation\04. Content - Insert\Sample.cs" title="Creates a new document with some content using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\08. Manipulation\04. Content - Insert\Sample.vb" title="Creates a new document with some content using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.ContentRange.FormFieldsData">
      <summary>
            Gets collection of <see cref="T:SautinSoft.Document.FormFieldData" /> instances 
            from all form fields in the current range.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.ContentRange.Delete">
      <summary>
            Deletes the document content specified with the current 
            <see cref="T:SautinSoft.Document.ContentRange" />.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\08. Manipulation\06. Content - Delete\Sample.cs" title="Open a document and delete some content using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\08. Manipulation\06. Content - Delete\Sample.vb" title="Open a document and delete some content using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.ContentRange.Find(System.String)">
      <summary>
            Finds all <see cref="T:SautinSoft.Document.ContentRange" />s which contain the specified text.
            </summary>
      <param name="text">The text which should be searched for.</param>
      <returns>
            All <see cref="T:SautinSoft.Document.ContentRange" />s which contain the specified text.
            </returns>
      <exception cref="T:System.ArgumentException">
            Argument text can't be null or empty.
            </exception>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\08. Manipulation\05. Content - Find and Replace\Sample.cs" title="Find and replace a text using ContentRange in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\08. Manipulation\05. Content - Find and Replace\Sample.vb" title="Find and replace a text using ContentRange in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.ContentRange.Find(System.Text.RegularExpressions.Regex)">
      <summary>
            Finds all <see cref="T:SautinSoft.Document.ContentRange" />s which match the specified
            <see cref="T:System.Text.RegularExpressions.Regex" />.
            </summary>
      <param name="regex">The <see cref="T:System.Text.RegularExpressions.Regex" /> 
            which should be matched.</param>
      <returns>
            All <see cref="T:SautinSoft.Document.ContentRange" />s which match the specified 
            <see cref="T:System.Text.RegularExpressions.Regex" />.
            </returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\08. Manipulation\05. Content - Find and Replace\Sample.cs" title="Find and replace a text using ContentRange in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\08. Manipulation\05. Content - Find and Replace\Sample.vb" title="Find and replace a text using ContentRange in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.ContentRange.Replace(System.String,SautinSoft.Document.CharacterFormat,SautinSoft.Document.TxtLoadOptions)">
      <summary>
            Replaces the current <see cref="T:SautinSoft.Document.ContentRange" />'s content with the
            specified text with specific formatting.
            </summary>
      <param name="text">
            The text which should replace the current
            <see cref="T:SautinSoft.Document.ContentRange" />'s content.
            </param>
      <param name="format">The formatting of the text.</param>
      <param name="options">The options used to define settings for insert operation.</param>
      <returns>
            A <see cref="T:SautinSoft.Document.ContentRange" /> instance which contains newly inserted content.
            </returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\05. Text\08. Find and Replace text\Sample.cs" title="Find and replace a text using ContentRange in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\05. Text\08. Find and Replace text\Sample.vb" title="Find and replace a text using ContentRange in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.ContentRange.Replace(System.String)">
      <summary>
            Replaces the current <see cref="T:SautinSoft.Document.ContentRange" />'s content with the
            specified text.
            </summary>
      <param name="text">
            The text which should replace the current
            <see cref="T:SautinSoft.Document.ContentRange" />'s content.
            </param>
      <returns>
            A <see cref="T:SautinSoft.Document.ContentRange" /> instance which contains newly inserted content.
            </returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\08. Manipulation\05. Content - Find and Replace\Sample.cs" title="Find and replace a text using ContentRange in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\08. Manipulation\05. Content - Find and Replace\Sample.vb" title="Find and replace a text using ContentRange in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.ContentRange.Replace(System.String,SautinSoft.Document.CharacterFormat)">
      <summary>
            Replaces the current <see cref="T:SautinSoft.Document.ContentRange" />'s content with the
            specified text with specific formatting.
            </summary>
      <param name="text">
            The text which should replace the current
            <see cref="T:SautinSoft.Document.ContentRange" />'s content.
            </param>
      <param name="format">The formatting of the text.</param>
      <returns>
            A <see cref="T:SautinSoft.Document.ContentRange" /> instance which contains newly inserted content.
            </returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\05. Text\08. Find and Replace text\Sample.cs" title="Find and replace a text using ContentRange in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\05. Text\08. Find and Replace text\Sample.vb" title="Find and replace a text using ContentRange in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.ContentRange.Replace(System.String,SautinSoft.Document.TxtLoadOptions)">
      <summary>
            Replaces the current <see cref="T:SautinSoft.Document.ContentRange" />'s content with the
            specified text.
            </summary>
      <param name="text">
            The text which should replace the current
            <see cref="T:SautinSoft.Document.ContentRange" />'s content.
            </param>
      <param name="options">The options used to define settings for insert operation.</param>
      <returns>
            A <see cref="T:SautinSoft.Document.ContentRange" /> instance which contains newly inserted content.
            </returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\08. Manipulation\05. Content - Find and Replace\Sample.cs" title="Find and replace a text using ContentRange in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\08. Manipulation\05. Content - Find and Replace\Sample.vb" title="Find and replace a text using ContentRange in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.ContentRange.Replace(System.String,SautinSoft.Document.RtfLoadOptions)">
      <summary>
            Replaces the current <see cref="T:SautinSoft.Document.ContentRange" />'s content with the
            specified RTF text.
            </summary>
      <param name="text">
            The RTF text which should replace the current
            <see cref="T:SautinSoft.Document.ContentRange" />'s content.
            </param>
      <param name="options">The options used to define settings for insert operation.</param>
      <returns>
            A <see cref="T:SautinSoft.Document.ContentRange" /> instance which contains newly inserted content.
            </returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\08. Manipulation\05. Content - Find and Replace\Sample.cs" title="Find and replace a text using ContentRange in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\08. Manipulation\05. Content - Find and Replace\Sample.vb" title="Find and replace a text using ContentRange in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.ContentRange.Replace(System.String,SautinSoft.Document.HtmlLoadOptions)">
      <summary>
            Replaces the current <see cref="T:SautinSoft.Document.ContentRange" />'s content with the
            specified HTML text.
            </summary>
      <param name="text">
            The HTML text which should replace the current
            <see cref="T:SautinSoft.Document.ContentRange" />'s content.
            </param>
      <param name="options">The options used to define settings for insert operation.</param>
      <returns>
            A <see cref="T:SautinSoft.Document.ContentRange" /> instance which contains newly inserted content.
            </returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\08. Manipulation\05. Content - Find and Replace\Sample.cs" title="Find and replace a text using ContentRange in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\08. Manipulation\05. Content - Find and Replace\Sample.vb" title="Find and replace a text using ContentRange in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.ContentRange.Replace(SautinSoft.Document.ContentRange)">
      <summary>
            Replaces the content of the current <see cref="T:SautinSoft.Document.ContentRange" />'s
            with a content specified with the range parameter.
            </summary>
      <param name="range">The <see cref="T:SautinSoft.Document.ContentRange" /> which
            specifies content which should replace the current 
            <see cref="T:SautinSoft.Document.ContentRange" />.</param>
      <returns>
            A <see cref="T:SautinSoft.Document.ContentRange" /> instance which contains newly inserted content.
            </returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\08. Manipulation\05. Content - Find and Replace\Sample.cs" title="Find and replace a text using ContentRange in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\08. Manipulation\05. Content - Find and Replace\Sample.vb" title="Find and replace a text using ContentRange in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.ContentRange.Replace(SautinSoft.Document.ContentRange,SautinSoft.Document.ImportSession)">
      <summary>
            Replaces the content of the current <see cref="T:SautinSoft.Document.ContentRange" />'s
            with a content (from another <see cref="T:SautinSoft.Document.DocumentCore" /> instance)
            specified with the range parameter.
            </summary>
      <param name="range">The <see cref="T:SautinSoft.Document.ContentRange" /> which
            specifies content which should replace the current 
            <see cref="T:SautinSoft.Document.ContentRange" />.
            </param>
      <param name="session">Import session.</param>
      <returns>
            A <see cref="T:SautinSoft.Document.ContentRange" /> instance which contains newly inserted content.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.ContentRange.ToString">
      <summary>
            Returns a plain text that represents this 
            <see cref="T:SautinSoft.Document.ContentRange" /> instance.
            </summary>
      <returns>
            A plain text that represents this <see cref="T:SautinSoft.Document.ContentRange" /> instance.
            </returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\08. Manipulation\03. Content - Get\Sample.cs" title="How to get a content from a document  using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\08. Manipulation\03. Content - Get\Sample.vb" title="How to get a content from a document using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.ContentRange.Equals(System.Object)">
      <summary>
            Determines whether the specified object is equal to this <see cref="T:SautinSoft.Document.ContentRange" /> instance.
            </summary>
      <param name="obj">The object to compare with this <see cref="T:SautinSoft.Document.ContentRange" /> instance.</param>
      <returns>
            true if the specified object is a <see cref="T:SautinSoft.Document.ContentRange" /> and is equal 
            to this <see cref="T:SautinSoft.Document.ContentRange" /> instance; otherwise, false.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.ContentRange.#ctor(SautinSoft.Document.ContentPosition,SautinSoft.Document.ContentPosition)">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.ContentRange" /> class.
            </summary>
      <param name="start">
            The <see cref="T:SautinSoft.Document.ContentPosition" /> that marks the beginning
            of the new <see cref="T:SautinSoft.Document.ContentRange" />.
            </param>
      <param name="end">
            The <see cref="T:SautinSoft.Document.ContentPosition" /> that marks the end 
            of the new <see cref="T:SautinSoft.Document.ContentRange" />.
            </param>
      <exception cref="T:System.ArgumentNullException">
            Argument start or end is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            Arguments start and end do not belong to the same document.
            </exception>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\08. Manipulation\04. Content - Insert\Sample.cs" title="Create a new document with some content using ContentRange in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\08. Manipulation\04. Content - Insert\Sample.vb" title="Create a new document with some content using ContentRange in VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.ElementCollection">
      <summary>
            Represents a base non-generic class for <see cref="T:SautinSoft.Document.Element" /> collections.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\08. Manipulation\14. Manipulation with ElementCollection\Sample.cs" title="Manipulation with ElementCollection. Split 1st Paragraph by separate Runs and insert each Run into a new Paragraph in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\08. Manipulation\14. Manipulation with ElementCollection\Sample.vb" title="Manipulation with ElementCollection. Split 1st Paragraph by separate Runs and insert each Run into a new Paragraph in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.ElementCollection.SupportedElementTypes">
      <summary>
            Gets a sequence of <see cref="T:SautinSoft.Document.ElementType" />s that can be contained in this collection.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.ElementCollection.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.Element" /> at the specified index.
            </summary>
      <param name="index">The zero-based index of the <see cref="T:SautinSoft.Document.Element" /> to get.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.IList" />.</exception>
    </member>
    <member name="P:SautinSoft.Document.ElementCollection.Count">
      <summary>
            Gets the number of elements contained in this collection.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.ElementCollection.Content">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.ContentRange" /> of this collection.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.ElementCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.IList" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList" /> is read-only.-or- The <see cref="T:System.Collections.IList" /> has a fixed size.</exception>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\08. Manipulation\15. ElementCollection - Add and Delete\Sample.cs" title="ElementCollection: Adds 20 paragraphs into document and delete 10 of them in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\08. Manipulation\15. ElementCollection - Add and Delete\Sample.vb" title="ElementCollection: Adds 20 paragraphs into document and delete 10 of them in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.ElementCollection.Clear">
      <summary>
            Removes all elements from this collection.
            </summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList" /> is read-only.-or- The <see cref="T:System.Collections.IList" /> has a fixed size.</exception>
    </member>
    <member name="M:SautinSoft.Document.ElementCollection.CopyTo(SautinSoft.Document.Element[],System.Int32)">
      <summary>
            Copies the entire collection to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from collection. 
            The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="M:SautinSoft.Document.ElementCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1">IEnumerator&lt;Element&gt;</see> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="T:SautinSoft.Document.ElementCollection`1">
      <summary>
            Represents a base generic class for <see cref="T:SautinSoft.Document.Element" /> collections.
            </summary>
      <typeparam name="T">An <see cref="T:SautinSoft.Document.Element" /> derived type.</typeparam>
    </member>
    <member name="P:SautinSoft.Document.ElementCollection`1.Item(System.Int32)">
      <summary>
            Gets or sets the element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to get.</param>
      <value>The element at the specified index.</value>
    </member>
    <member name="M:SautinSoft.Document.ElementCollection`1.Remove(`0)">
      <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />;
            otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="M:SautinSoft.Document.ElementCollection`1.Insert(System.Int32,`0)">
      <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.
            </summary>
      <param name="index">The zero-based index at which item should be inserted.</param>
      <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
    </member>
    <member name="M:SautinSoft.Document.ElementCollection`1.IndexOf(`0)">
      <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
      <returns>The index of item if found in the list; otherwise, -1.</returns>
    </member>
    <member name="M:SautinSoft.Document.ElementCollection`1.CopyTo(`0[],System.Int32)">
      <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">array is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from arrayIndex to the end of the destination array.</exception>
    </member>
    <member name="M:SautinSoft.Document.ElementCollection`1.Contains(`0)">
      <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
    </member>
    <member name="M:SautinSoft.Document.ElementCollection`1.Add(`0)">
      <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="M:SautinSoft.Document.ElementCollection`1.GetEnumerator">
      <summary>
            Gets an enumerator that iterates through the collection.
            </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="T:SautinSoft.Document.DocumentCore">
      <summary>
            The main class of "Document .Net" library. Represents a document itself.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\02. Create\01. Create a document\Sample.cs" title="How to create a new document and saves it in a desired format in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\02. Create\01. Create a document\Sample.vb" title="How to create a new document and saves it in a desired format in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.DocumentCore.ElementType">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.ElementType" /> of this element instance.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.DocumentCore.Sections">
      <summary>
            Gets a collection that represents all sections in the document.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\02. Sections and Page Layout\01. Sections\Sample.cs" title="Creates a document with different sections in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\02. Sections and Page Layout\01. Sections\Sample.vb" title="Creates a document with different sections in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.DocumentCore.DefaultCharacterFormat">
      <summary>
            Gets or sets the default character format.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\12. Styles - Inheritance\Sample.cs" title="How the Styles Inheritance does work in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\12. Styles - Inheritance\Sample.vb" title="How the Styles Inheritance does work in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.DocumentCore.DefaultParagraphFormat">
      <summary>
            Gets or sets the default paragraph format.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\12. Styles - Inheritance\Sample.cs" title="How the Styles Inheritance does work in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\12. Styles - Inheritance\Sample.vb" title="How the Styles Inheritance does work in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.DocumentCore.Serial">
      <summary>
            Allows to activate your copy of the component after purchasing. ATTENTION: specify this property first of all before creating the instance of DocumentCore!
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\12. Product Installation\01. Product Activation\Sample.cs" title="How to activate Document .Net in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\12. Product Installation\01. Product Activation\Sample.vb" title="How to activate Document .Net in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.DocumentCore.Styles">
      <summary>
            Gets a collection of styles defined in the document.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\07. Formatting and Styles\13. Styles - Create\Sample.cs" title="How to create new styles and apply them to various elements using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\07. Formatting and Styles\13. Styles - Create\Sample.vb" title="How to create new styles and apply them to various elements using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.DocumentCore.Bookmarks">
      <summary>
            Gets the document bookmarks.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\05. Text\12. Bookmarks\Sample.cs" title="How add a text bounded by BookmarkStart and BookmarkEnd in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\05. Text\12. Bookmarks\Sample.vb" title="How add a text bounded by BookmarkStart and BookmarkEnd in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.DocumentCore.Properties">
      <summary>
            Gets the document properties.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\07. Document Properties\01. Built-in Document Properties\Sample.cs" title="Read built-in document properties (from .docx) and enumerate them in new PDF document as small report using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\07. Document Properties\01. Built-in Document Properties\Sample.vb" title="Read built-in document properties (from .docx) and enumerate them in new PDF document as small report using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.DocumentCore.Settings">
      <summary>
            Gets or sets the document settings.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.DocumentCore.EditProtection">
      <summary>
            Gets or sets the document protection settings used to restrict editing and formatting 
            of document content. Supported in DOCX format.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.DocumentCore.WriteProtection">
      <summary>
            Gets the document write protection options. Supported only in DOCX format.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.DocumentCore.MailMerge">
      <summary>
            Gets a <see cref="T:SautinSoft.Document.MailMerging.MailMerge" /> object that represents the mail merge functionality for the document.
            </summary>
      <remarks>
            See details at: <a href="https://www.sautinsoft.com/products/document/help/net/developer-guide/mail-merge-simple-report-net-csharp-vb.php" target="_blank">https://www.sautinsoft.com/products/document/help/net/developer-guide/mail-merge-simple-report-net-csharp-vb.php</a>.
            </remarks>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\10. Reporting and Mail Merge\01. Simple Report\Sample.cs" title="Generates 5 envelopes 'Happy New Year' for Simpson family using the one template using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\10. Reporting and Mail Merge\01. Simple Report\Sample.vb" title="Generates 5 envelopes 'Happy New Year' for Simpson family using the one template using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.DocumentCore.Revisions">
      <summary>
            Gets a collection of revisions (tracked changes) that exist in this document.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.DocumentCore.CustomXmlParts">
      <summary>
            Gets the custom XML parts contained in this document.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.DocumentCore.Clone(System.Boolean)">
      <summary>
            Clones this <see cref="T:SautinSoft.Document.DocumentCore" /> instance.
            </summary>
      <param name="cloneDescendants">True to clone all descendants.</param>
      <returns>
            The cloned <see cref="T:SautinSoft.Document.DocumentCore" />.
            </returns>
    </member>
    <member name="M:SautinSoft.Document.DocumentCore.Import``1(``0,System.Boolean,SautinSoft.Document.ImportSession)">
      <summary>
            Imports (clones) the specified source element to this <see cref="T:SautinSoft.Document.DocumentCore" />
            instance so it can be inserted into document content.
            </summary>
      <typeparam name="T">The element type to import.</typeparam>
      <param name="sourceElement">The source element.</param>
      <param name="importDescendants">true to import source element descendants; otherwise false.</param>
      <param name="session">Import session.</param>
      <returns>
            Imported (cloned) source element that can be inserted in this <see cref="T:SautinSoft.Document.DocumentCore" /> instance.
            </returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\06. Split and Merge\03. Combine multiple files into a single PDF\Sample.cs" title="This sample shows how to merge multiple DOCX, RTF, PDF and Text files using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\06. Split and Merge\03. Combine multiple files into a single PDF\Sample.vb" title="This sample shows how to merge multiple DOCX, RTF, PDF and Text files using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.DocumentCore.Import``1(``0,System.Boolean)">
      <summary>
            Imports (clones) the specified source element to this <see cref="T:SautinSoft.Document.DocumentCore" /> instance
            so it can be inserted into document content.
            </summary>
      <typeparam name="T">The element type to import.</typeparam>
      <param name="sourceElement">The source element.</param>
      <param name="importDescendants">true to import source element descendants; otherwise false.</param>
      <returns>
            Imported (cloned) source element that can be inserted in this <see cref="T:SautinSoft.Document.DocumentCore" /> instance.
            </returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\06. Split and Merge\03. Combine multiple files into a single PDF\Sample.cs" title="This sample shows how to merge multiple DOCX, RTF, PDF and Text files using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\06. Split and Merge\03. Combine multiple files into a single PDF\Sample.vb" title="This sample shows how to merge multiple DOCX, RTF, PDF and Text files using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.DocumentCore.GetPaginator(SautinSoft.Document.PaginatorOptions)">
      <summary>
            Gets the document paginator.
            </summary>
      <param name="options">
            The <see cref="T:SautinSoft.Document.PaginatorOptions" /> for pagination process.</param>
      <returns>
            The document <see cref="T:SautinSoft.Document.DocumentPaginator" />.
            </returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\06. Split and Merge\02. Split document by pages\Sample.cs" title="Loads a document and split it by separate pages. Saves the each page into PDF format using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\06. Split and Merge\02. Split document by pages\Sample.vb" title="Loads a document and split it by separate pages. Saves the each page into PDF format using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.DocumentCore.GetPaginator">
      <summary>
            Gets the document paginator.
            </summary>
      <returns>
            The document <see cref="T:SautinSoft.Document.DocumentPaginator" />.
            </returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\06. Split and Merge\02. Split document by pages\Sample.cs" title="Loads a document and split it by separate pages. Saves the each page into PDF format using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\06. Split and Merge\02. Split document by pages\Sample.vb" title="Loads a document and split it by separate pages. Saves the each page into PDF format using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.DocumentCore.Load(System.IO.Stream,SautinSoft.Document.LoadOptions)">
      <summary>
            Loads a document from the specified stream.
            </summary>
      <param name="stream">The stream from which to load a document.</param>
      <param name="options">The loading options which can be used to define settings for load operation.</param>
      <returns>
            A loaded document.
            </returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\03. Load\02. Load a DOCX document\Sample.cs" title="Loads a DOCX document into DocumentCore (dc) from a MemoryStream in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\03. Load\02. Load a DOCX document\Sample.vb" title="Loads a DOCX document into DocumentCore (dc) from a MemoryStream in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.DocumentCore.Load(System.String,SautinSoft.Document.LoadOptions)">
      <summary>
            Loads a document from a file or URL.
            </summary>
      <param name="filePathOrUrl">Path to a file or URL.</param>
      <param name="options">The loading options which can be used to define settings for load operation.</param>
      <returns>
            A loaded document.
            </returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\03. Load\01. Load a document\Sample.cs" title="Loads a document into DocumentCore (dc) from a file in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\03. Load\01. Load a document\Sample.vb" title="Loads a document into DocumentCore (dc) from a file in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.DocumentCore.Load(System.String)">
      <summary>
            Loads a document from a file with the specified path.
            </summary>
      <param name="fileName">Path to the local file.</param>
      <returns>
            A loaded document.
            </returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\03. Load\03. Load a PDF document\Sample.cs" title="Loads a PDF document into DocumentCore (dc) from a file in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\03. Load\03. Load a PDF document\Sample.vb" title="Loads a PDF document into DocumentCore (dc) from a file in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.DocumentCore.Save(System.IO.Stream,SautinSoft.Document.SaveOptions)">
      <summary>
            Saves the document in the specified stream.
            </summary>
      <param name="stream">The stream in which to save the document.</param>
      <param name="options">The saving options which can be used to define settings for save operation.</param>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\04. Save as\03. Save a document as PDF\Sample.cs" title="Creates a new document and saves it as PDF/A using MemoryStream in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\04. Save as\03. Save a document as PDF\Sample.vb" title="Creates a new document and saves it as PDF/A using MemoryStream in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.DocumentCore.Save(System.String,SautinSoft.Document.SaveOptions)">
      <summary>
            Saves the document to a file with the specified path. 
            </summary>
      <param name="fileName">Path to a local file.</param>
      <param name="options">The saving options which can be used to define settings for save operation.</param>
      <remarks>If a file with the same name is already exists, it will be overwritten by the new.</remarks>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\04. Save as\05. Save a document as HTML\Sample.cs" title="Open an existing document and saves it as HTML files (in the Fixed and Flowing modes) in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\04. Save as\05. Save a document as HTML\Sample.vb" title="Open an existing document and saves it as HTML files (in the Fixed and Flowing modes) in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.DocumentCore.Save(System.String)">
      <summary>
            Saves the document to a file with the specified path. Path must include file extension.
            </summary>
      <param name="fileName">Path to a local file.</param>
      <remarks>The <see cref="T:SautinSoft.Document.SaveOptions" /> will be automatically chosen by the extension (.docx, .rtf, .txt).<br />
            If a file with the same name is already exists, it will be overwritten by the new.
            </remarks>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\04. Save as\01. Save a document\Sample.cs" title="Creates a new document and saves it as DOCX file using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\04. Save as\01. Save a document\Sample.vb" title="Creates a new document and saves it as DOCX file using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.DocumentCore.CalculateListItems">
      <summary>
            Calculates the list items contained in this document.
            </summary>
      <returns>A sequence of <see cref="T:SautinSoft.Document.ListItem" />s contained in this document.</returns>
    </member>
    <member name="M:SautinSoft.Document.DocumentCore.CalculateListItems(System.Boolean)">
      <summary>
            Calculates the list items contained in this document.
            </summary>
      <param name="showRevisionDifferences">When true, revision differences in list items will be shown.</param>
      <returns>A sequence of <see cref="T:SautinSoft.Document.ListItem" />s contained in this document.</returns>
    </member>
    <member name="M:SautinSoft.Document.DocumentCore.CalculateStats">
      <summary>
            Calculates document's statistics (number of words, number of pages and etc).
            </summary>
      <remarks>
            Appropriate properties of <see cref="P:SautinSoft.Document.DocumentProperties.BuiltIn" /> will be updated.<br /><para>Note:</para>
            The trial version calculates the number of words with a small error, because of random inserting of word "trial".<br />
            The full version calculates the number of words completely correctly.
            </remarks>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\07. Document Properties\02. Calculate Document Statistics\Sample.cs" title="Calculates the number of words, pages and characters in a document in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\07. Document Properties\02. Calculate Document Statistics\Sample.vb" title="Calculates the number of words, pages and characters in a document in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.DocumentCore.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:SautinSoft.Document.DocumentCore" /> class.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\01. Document\02. Create\03. Create a PDF document\Sample.cs" title="Creates a new document and saves it into PDF format using C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\01. Document\02. Create\03. Create a PDF document\Sample.vb" title="Creates a new document and saves it into PDF format using VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.Element">
      <summary>
            Represents a base class for all document elements.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\08. Manipulation\16. ElementCollection - Insert\Sample.cs" title="Inserts a new Run (Text element) at the start of each paragraph in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\08. Manipulation\16. ElementCollection - Insert\Sample.vb" title="Inserts a new Run (Text element) at the start of each paragraph in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.Document.Element.ElementType">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.ElementType" /> of this element instance.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Element.Content">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.ContentRange" /> of the current element.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Element.Document">
      <summary>
            Gets the owner <see cref="T:SautinSoft.Document.DocumentCore">document</see>.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Element.Parent">
      <summary>
            Gets the parent of this element instance.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Element.ParentCollection">
      <summary>
            Gets the <see cref="T:SautinSoft.Document.ElementCollection" /> that contains this element instance.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Element.PreviuosSibling">
      <summary>
            Gets the previous sibling <see cref="T:SautinSoft.Document.Element" />.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.Element.NextSibling">
      <summary>
            Gets the next sibling <see cref="T:SautinSoft.Document.Element" />.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.Element.Ancestors(System.Boolean)">
      <summary>
            Returns the all ancestors of the current <see cref="T:SautinSoft.Document.Element" /> object.
            </summary>
      <param name="includeSelf">In case of true, returns itself also.</param>
      <returns>The collection with all ancestors of the current <see cref="T:SautinSoft.Document.Element" />.</returns>
    </member>
    <member name="M:SautinSoft.Document.Element.Clone(System.Boolean)">
      <summary>
            Clones this element instance.
            </summary>
      <remarks>
        <para>This method serves as a copy constructor for elements. The cloned element
            has no parent, but belongs to the same document as the original element. </para>
        <para>If you want to insert this element into another document, then you should
            first import it into another document with 
            <see cref="M:SautinSoft.Document.DocumentCore.Import``1(``0,System.Boolean,System.Boolean)">Import&lt;T&gt;(T,System.Boolean,System.Boolean)</see>
            method and then insert the imported element.
            </para>
      </remarks>
      <param name="cloneDescendants">
        <see langword="True" /> to clone all descendants.</param>
      <returns>
            The cloned element.
            </returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\08. Manipulation\08. Element - Cloning\Sample.cs" title="How to clone an element in DOCX document in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\08. Manipulation\08. Element - Cloning\Sample.vb" title="How to clone an element in DOCX document in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Element.GetChildElements(System.Boolean)">
      <summary>
            Gets the child elements.
            </summary>
      <param name="recursively">true to get all descendants elements; otherwise false to get just child elements.</param>
      <returns>Sequence of child elements.</returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\08. Manipulation\13. Element - Iteration\Sample.cs" title="Calculate sections, paragraphs, inlines, runs and fields in DOCX document in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\08. Manipulation\13. Element - Iteration\Sample.vb" title="Calculate sections, paragraphs, inlines, runs and fields in DOCX document in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.Document.Element.GetChildElements(System.Boolean,SautinSoft.Document.ElementType[])">
      <summary>
            Gets the child elements filtered by <see cref="T:SautinSoft.Document.ElementType" />.
            </summary>
      <param name="recursively">true to get all descendants elements; otherwise false to get just child elements.</param>
      <param name="filterElements">Specify the <see cref="T:SautinSoft.Document.ElementType" />s which you want to get.</param>
      <returns>Sequence of child elements filtered by <see cref="T:SautinSoft.Document.ElementType" />.</returns>
      <example>
        <code lang="cs" source="..\Packages\Document .Net\Code samples\CSharp\08. Manipulation\13. Element - Iteration\Sample.cs" title="Calculate sections, paragraphs, inlines, runs and fields in DOCX document in C#">
        </code>
        <code lang="vbnet" source="..\Packages\Document .Net\Code samples\VB.Net\08. Manipulation\13. Element - Iteration\Sample.vb" title="Calculate sections, paragraphs, inlines, runs and fields in DOCX document in VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.Document.IContentElement">
      <summary>
            Represents an <see cref="T:SautinSoft.Document.Element" /> that can contain other 
            <see cref="T:SautinSoft.Document.Element" />s underneath itself.
            </summary>
    </member>
    <member name="P:SautinSoft.Document.IContentElement.Content">
      <summary>
            Gets a sequence of <see cref="T:SautinSoft.Document.ElementCollection" />s that are contained
            under this <see cref="T:SautinSoft.Document.IContentElement" />.
            </summary>
    </member>
    <member name="T:SautinSoft.Document.IHtmlImageSavingCallback">
      <summary>
            Implement this interface if you want to control how Document .Net saves images when 
            saving a document to Html.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.IHtmlImageSavingCallback.ImageSaving(SautinSoft.Document.HtmlImageSavingArgs)">
      <summary>
            Called when Document .Net saves an image to HTML.
            </summary>
      <param name="args">Provides the data: image file name, image format, image stream and so forth.</param>
    </member>
    <member name="T:SautinSoft.Document.IHtmlDocumentPartSavingCallback">
      <summary>
            Implement this interface if you want to receive notifications and control how Document.Net saves 
            document parts when exporting a document to Html.
            </summary>
    </member>
    <member name="M:SautinSoft.Document.IHtmlDocumentPartSavingCallback.PartSaving(SautinSoft.Document.HtmlDocumentPartSavingArgs)">
      <summary>
            Called when Document .Net is about to save a document part.
            </summary>
      <param name="args">Provides the data: a file name; a stream where the part will be saved; specify to keep the stream open or close.</param>
    </member>
    <!-- Badly formed XML comment ignored for member "M:SautinSoft.Document.ByteBuffer.SetCacheSize(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:SautinSoft.Document.RandomAccessFileOrArray.ReadShortLE" -->
    <!-- Badly formed XML comment ignored for member "M:SautinSoft.Document.RandomAccessFileOrArray.ReadUnsignedShortLE" -->
    <!-- Badly formed XML comment ignored for member "M:SautinSoft.Document.RandomAccessFileOrArray.ReadCharLE" -->
    <!-- Badly formed XML comment ignored for member "M:SautinSoft.Document.RandomAccessFileOrArray.ReadIntLE" -->
    <!-- Badly formed XML comment ignored for member "M:SautinSoft.Document.RandomAccessFileOrArray.ReadUnsignedInt" -->
  </members>
</doc>